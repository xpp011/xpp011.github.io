<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringMVC学习笔记</title>
      <link href="/2021/11/06/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/06/SpringMVC%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>SpringMVC</h1><h2 id="1，MVC">1，MVC</h2><p>MVC 模式代表 Model-View-Controller（模型-视图-控制器） 模式。这种模式用于应用程序的分层开发。</p><ul><li><strong>Model（模型）</strong> - 模型代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器。</li><li><strong>View（视图）</strong> - 视图代表模型包含的数据的可视化。</li><li><strong>Controller（控制器）</strong> - 控制器作用于模型和视图上。它控制数据流向模型对象，并在数据变化时更新视图。它使视图与模型分离开。</li></ul><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5Cimage-20210410115817819.png" alt="image-20210410115817819"></p><h2 id="2，MVC执行流程详解">2，MVC执行流程详解</h2><h3 id="图解">图解</h3><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5CSpringMVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="SpringMVC执行流程"></p><p><font color="red">极其详细的MVC流程</font>：<a href="https://zhuanlan.zhihu.com/p/91835444">https://zhuanlan.zhihu.com/p/91835444</a></p><h3 id="HelloSpring"><strong>HelloSpring</strong></h3><p>通过详细的配置实现</p><ol><li><p>在web.xml位置文件中配置我们的中央处理器DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册DispatcherServlet使得项目的所有请求全部走Spring的DispatcherServlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联一个springmvc的配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationcontext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--启动级别--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--匹配所有请求: / (不包括.jsp文件)</span></span><br><span class="line"><span class="comment">    匹配所有请求 : /* (包括.jsp文件)</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在我们的Spring配置文件中注册处理器映射器（HandlerMapping），处理器适配（HandlerAdapter），视图解析器（DispatcherServlet）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器映射器BeanNameUrlHandlerMapping继承HandlerMapping--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--处理器适配器SimpleControllerHandlerAdapter实现了HandlerAdapter--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器InternalResourceViewResolver实现ViewResolver接口，将 DispatcherServlet给他的ModeAndView交给视图解析器解析并返回一个视图实例--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--由于我们选用的处理器映射器BeanNameUrlHandlerMapping比较特殊需要通过id寻找映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写处理器Controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView 模型和试图==视图</span></span><br><span class="line">        ModelAndView mv=<span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装对象，放在ModelAndView中</span></span><br><span class="line">        mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;helloSpringmvc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装要转跳的视图名字</span></span><br><span class="line">        mv.setViewName(<span class="string">&quot;Hello&quot;</span>);<span class="comment">///WEB-INF/jsp/Hello.jsp</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>别忘了由于我们选用的处理器映射器BeanNameUrlHandlerMapping比较特殊需要通过id寻找映射，需要在Spring配置文件中注册Bean</p></li><li></li></ol>   <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.controller.HelloController&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>我们发现使用SpringMVC时需要写不少的配置文件，比之前的javaweb并没有轻松很多，但是我们在实际开发中不会使用配置文件实现MVC，而是注解</p><h3 id="问题">问题</h3><p>当我们检查所有的代码的时候发现并没有问题，但是请求资源就是报404。</p><p>这种情况很有可能就是我们生成项目时没有把Spring的jar包加入</p><p>这时需要点开IDEA的项目结构的工件</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5Cimage-20210410192859673.png" alt="image-20210410192859673"></p><p>我们发现工件下打包的项目不包含lib目录</p><p>所有我们需要添加lib目录并加入所有项目的jar包</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5Cimage-20210410193003392.png" alt="image-20210410193003392"></p><h2 id="3，注解开发MVC">3，注解开发MVC</h2><p>注解开发MVC有几个是不变的</p><h3 id="流程">流程</h3><ol><li><p>在web.xml位置文件中配置我们的中央处理器DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在spring配置文件中设置，自动扫描包，注册视图解析器，开启注解支持，不处理静态资源等</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--自动扫描包下的注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.xpp.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不处理静态资源 如：.css .html--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--支持mvc注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>书写实现类       @Controller（声明这是一个处理器，且自动被Spring托管） @RequestMapping(“XXX”)(该方法的请求地址)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAnnotationMVC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;你好注解MVC&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="问题-2">问题</h3><p>如果检查代码没有问题还是报404，则可以参考2：MVC执行流程详解——问题</p><h3 id="不同注解，相同作用">不同注解，相同作用</h3><p>不同注解，相同作用的目的是便于区分各个层</p><ul><li>@Component  声明为Spring的组件</li><li>@Servlet      写在servlet层</li><li>@Controller  写在controller层</li><li>@Repository   写在dao层</li></ul><h2 id="4，RestFul风格">4，RestFul风格</h2><p><strong>REST</strong>(英文：Representational State Transfer，简称<strong>REST</strong>，意思：表述性状态转换，描述了一个<strong>架构</strong>样式的网络系统，比如web应用)。</p><p>它是一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件，它主要用于<strong>客户端和服务端</strong>交互类的软件。基于这个风格设计的软件可以更简介，更有层次，更易于实现缓存等机制。</p><p>它本身并没有什么使用性，其核心价值在于如何设计出符合REST风格的网络接口。</p><p><strong>RESTful示例</strong></p><ol><li>/account/1 HTTP GET：得到id=1的account</li><li>/account/1 HTTP DELETE：删除id=1的account</li><li>/account/1 HTTP PUT：更新id=1的account</li></ol><ul><li>method = RequestMethod.GET 设置请求方式为GET</li><li><strong>@PathVariable</strong>：可以解析出来URL中的模板变量(<strong>{a}/{b}</strong>)</li><li><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5Cimage-20210411143423872.png" alt="image-20210411143423872"></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloAnnotationMVC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hello/&#123;a&#125;/&#123;b&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> a,<span class="meta">@PathVariable</span> <span class="keyword">int</span> b, Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res=a+b;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;结果是:&quot;</span>+res);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RESTful的CRUD</strong></p><p>由于我们需要设置请求方式每一次都要写method = RequestMethod.GET 这么一大长串，所以Spring为我们提供了各种请求方式对应的注解</p><ul><li><strong>@GetMapping</strong>            get请求方式</li><li><strong>@PostMapping</strong>          post请求方式</li><li>**@PutMapping **           put请求方式</li><li>**@DeleteMapping **     delete请求方式</li></ul><h2 id="5，转发和重定向">5，转发和重定向</h2><p>在Spring中 return时不写任何前缀则默认调用视图解析器拼接前缀和后缀，<strong>然后进行转发</strong></p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5Cimage-20210411145814055.png" alt="image-20210411145814055"></p><p>那如果我们想让视图解析器不解析转发而是重定向那么该怎么做</p><p>在需要返回页面的路径的前面加上<code>redirect:</code>关键字</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5Cimage-20210411150156276.png" alt="image-20210411150156276"></p><h2 id="6，前端传参和后端回显">6，前端传参和后端回显</h2><p>回想在JavaWeb阶段我们想要得到前端数据需要通过HttpServletRequest对象获取，不免一些麻烦，那再SpringMVC中怎么得到前端数据呢，很简单，我们在请求路径方法上的参数保持和url内请求路径的参数名一样即可，SpringMVC会自动映射</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5Cimage-20210411164703747.png" alt="image-20210411164703747"></p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5Cimage-20210411164358373.png" alt="image-20210411164358373"></p><p><strong>前端传入对象</strong></p><p>当我们前端传入一个对象时，我们只需要保证url内的属性和实体类的属性一一对应，名字一致即可，SpingMVC会自动匹配</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5Cimage-20210411165401433.png" alt="image-20210411165401433"></p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5Cimage-20210411165424945.png" alt="image-20210411165424945"></p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5Cimage-20210411165436696.png" alt="image-20210411165436696"></p><h2 id="7，乱码问题">7，乱码问题</h2><p>解决乱码的唯一办法就是编写过滤器</p><p>**方法一：**使用我们自己写的过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncodeingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改编码&quot;</span>);</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//让过滤器放行</span></span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在web.xml中注册（<font color="red">注意分别/和/*之间的区别!!!</font>，前者不负责过滤.jsp文件，而后者负责，所以当我们编写过滤器时一定要写<code>/*</code>路径）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeing<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>cn.xpp.filter.EncodeingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeing<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**方式二：**使用Spring自带的编码过滤器CharacterEncodingFilter</p><p>在web.xml中注册（<font color="red">注意分别/和/*之间的区别!!!</font>，前者不负责过滤.jsp文件，而后者负责，所以当我们编写过滤器时一定要写<code>/*</code>路径）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeing<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodeing<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**方式三：**可以去网上找大佬写的编码过滤器</p><h3 id="注意【重要！！！】">注意【重要！！！】</h3><p>在web.xml中注册（<font color="red">注意分别/和/*之间的区别!!!</font>，前者不负责过滤.jsp文件，而后者负责，因为我们访问所有的jsp页面，所以当我们编写过滤器时一定要写<code>/*</code>路径）</p><h2 id="8，JSON">8，JSON</h2><p><a href="https://baike.baidu.com/item/JSON">JSON</a>(<a href="https://baike.baidu.com/item/JavaScript">JavaScript</a> Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 <a href="https://baike.baidu.com/item/ECMAScript">ECMAScript</a> (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p><h3 id="注解"><strong>注解</strong></h3><ul><li>@RestController  作用域类上，该注释让类的所有方法都不走视图解析器，而是经过JSON解析返回字符串</li><li>@ResponseBody  作用域方法上，该注释让方法不走视图解析器，而是经过JSON解析返回字符串</li></ul><h3 id="Jackson">Jackson</h3><p><strong>导入依赖包</strong>（JSON有很多，这里我们选择Jackson）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Java代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/j1&quot;)</span></span><br><span class="line"><span class="comment">//@ResponseBody//当我们加上这个注释的话，该方法的返回值不会被视图解析器解析，而是直接返回JSON解析后的字符</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    User user=<span class="keyword">new</span> User(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    ObjectMapper mapper=<span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String s = mapper.writeValueAsString(user);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Jackson关键类ObjectMapper 通过writeValueAsString方法，我们可以将值转换为JSON格式</p><p><strong>乱码问题</strong>（只针对Jackson的乱码的问题）</p><p>我们在Spring的配置文件中加入以下配置即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Jackson乱码问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Fastjson">Fastjson</h3><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.76<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5Cimage-20210412184747785.png" alt="image-20210412184747785"></p><h2 id="9，SSM整合">9，SSM整合</h2><h3 id="准备工作">准备工作</h3><p>导入Maven依赖和静态资源过滤</p><ul><li>junit</li><li>lombok</li><li>servlet</li><li>jsp</li><li>jstl</li><li>c3p0</li><li>mysql</li><li>mybatis</li><li>mybatis-spring</li><li>spring-webmvc</li><li>spring-jdbc</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.xpp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssmbuild<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 以下是资源过滤器 可以在生成项目target时将.XML/.properties配置文件保留 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据源（database.properties）</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?serverTimezone=UTC&amp;characterEncoding=utf8&amp;useSSl=true</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>mybatis配置文件（mtbatis-config.xml）</p><p>整合后的mybatis配置文件只写 别名和注册Mapper</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;cn.xpp.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.dao.BooksMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring配置文件(applicationcontext.xml)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mybatis整合">Mybatis整合</h3><p>创建spring-dao配置文件 开始整合mybatis</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--读取数据库信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用C3P0的连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--最大连接数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--最少连接数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--关闭连接后不自动提交--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--连接超时时间--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--连接失败后可重连次数--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mtbatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置dao接口自动扫描包，动态实现了Dao接口可以注入到Spring容器中--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当我们书写dao层实现类时会帮我们自动导入sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注入sqlSessionFactory</span></span><br><span class="line"><span class="comment">        注意是value不是ref 这里是通过反射注入的而非IOC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;cn.xpp.dao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--aop--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建spring-service配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:conetxt</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--扫描报下的所有@Service注解自动装配到配置文件中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conetxt:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.xpp.service&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;booksService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.service.BooksServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;booksMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;booksMapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置声明式事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SpringMVC整合">SpringMVC整合</h3><p>web.xml配置文件内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--配置Service--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationcontext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--解决乱码问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建spring-mvc.xml配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注解驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不处理静态资源（.jsp/.css）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--扫描包注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.xpp.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ul><li>使用C3P0连接池时，数据源配置必须有前缀jdbc.<img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringMVC.assets%5Cimage-20210413222132682.png" alt="image-20210413222132682"></li></ul><h3 id="整合流程">整合流程</h3><h2 id="10，Ajax技术">10，Ajax技术</h2><p>相当于是一个异步无刷新请求,在一个无需刷新页面的情况下，更新数据，维护用户体验</p><h3 id="实现Ajax步骤">实现Ajax步骤</h3><ol><li><p>前往JQuer官网下载JQuer:<a href="https://jquery.com/download/">https://jquery.com/download/</a></p></li><li><p>将JQuer加入我们的maven项目<img src="/.cn//win10桌面存放\Spring\笔记\SpringMVC.assets\image-20210420195322152.png" alt="image-20210420195322152" style="zoom:50%;"></p></li><li><p>书写静态资源过滤器确保我们的JQuery不会被Maven过滤</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以下是资源过滤器 可以在生成项目target时将.XML/.properties配置文件保留 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>web<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.js<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>书写Ajax(a方法为调用函数)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/ajax&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;<span class="string">&quot;v&quot;</span>:$(<span class="string">&quot;#value&quot;</span>).val()&#125;,</span><br><span class="line">        <span class="attr">success</span>:<span class="function"><span class="keyword">function</span> (<span class="params">data</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>$符号就是我们的JQuery的函数库，我们调用ajax方法<font color="red">$.ajax</font></li><li>ajax内部使用对象的形式书写所以要包含{}符号</li><li>ajax需要三个属性 <font color="red"> url，data，回调函数</font><ul><li>url我们ajax调用时数据的处理地址</li><li>data需要处理的数据</li><li>success成功的回调函数（方法的形式）可以传参也可以不传参（参数值为处理后的数据）</li><li>error：失败的回调函数</li></ul></li></ul></li></ol><h3 id="注意">注意</h3><p>当我们的后端返回json数据时出现乱码需要在spring配置文件中配置乱码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Jackson乱码问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="11，拦截器">11，拦截器</h2><p>实现拦截器接口：HandlerInterceptor</p><p>实现对应方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法执行前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======方法执行前=======&quot;</span>);</span><br><span class="line">        <span class="comment">//是否将该请求拦截 true通过 false不通过</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法执行后</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======方法执行后=======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法清理后</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=======方法清理=======&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后因为拦截器是SpringMVC特有的需要在spring配置文件中的<code>mvc</code>标签配置</p><p>/**是/下的所有请求都会被TestHandlerInterceptor拦截</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.config.TestHandlerInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="12，文件上传和下载">12，文件上传和下载</h2><p>简单看看就行，用时直接复制</p><p>1,导入对应的jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2，在spring配置文件中配置CommonsMultipartResolver （文件最大值，编码集等等）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color="red">Controller类加上@@RestController注解不走视图解析器</font></p><p>3,编写上传请求</p><p><strong>注意上传的表单<code>form</code>标签的enctypes属性一定为&quot;multipart/form-data&quot;，表面以二进制上传数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//获取文件名称</span></span><br><span class="line">        String uploadFilename=file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果文件名为空直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(uploadFilename))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件上传名&quot;</span>+uploadFilename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上传路径设置</span></span><br><span class="line">        String path=request.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        File realPath=<span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="comment">//路径不存在则创建</span></span><br><span class="line">        <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">            realPath.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line">        InputStream is= file.getInputStream();<span class="comment">//文件输入流</span></span><br><span class="line">        OutputStream os=<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(realPath,uploadFilename));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            os.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        os.close();;</span><br><span class="line">        is.close();;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>4,编写下载请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">download</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//要下载文件的地址</span></span><br><span class="line">    String path=request.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    String fileName=<span class="string">&quot;image-20210409145432188.png&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1,设置response响应头</span></span><br><span class="line">    response.reset(); <span class="comment">//设置页面不缓存 ，清空buffer</span></span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">    response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>);<span class="comment">//二进制传输数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置响应头</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; &quot;</span> +</span><br><span class="line">            <span class="string">&quot;filename=&quot;</span>+URLEncoder.encode(fileName,<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    File file=<span class="keyword">new</span> File(path,fileName);</span><br><span class="line">    <span class="comment">//2，读取文件输入流</span></span><br><span class="line">    InputStream is=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3,写出文件-输出流</span></span><br><span class="line">    OutputStream os=response.getOutputStream();</span><br><span class="line">    <span class="keyword">byte</span>[] buff=<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((index=is.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        os.write(buff,<span class="number">0</span>,index);</span><br><span class="line">        os.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    os.close();</span><br><span class="line">    is.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p><font color="red">Controller类加上@@RestController注解不走视图解析器</font></p><p><strong>注意上传的表单<code>form</code>标签的enctypes属性一定为&quot;multipart/form-data&quot;，表面以二进制上传数据</strong></p><h2 id="13，补充">13，补充</h2><p>如果你的html文件在maven中的css和js不起效果可以尝试在web.xml文件中加入（注意在前端控制器前面书写）,将js和css、图片设置为可加载资源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span> &gt;</span>default &lt;/servlet-name &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span> &gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">&lt;/servlet-mapping &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span> &gt;</span>default &lt;/servlet-name &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span> &gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">&lt;/servlet-mapping &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span> &gt;</span>default &lt;/servlet-name &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span> &gt;</span>*.html<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">&lt;/servlet-mapping &gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span> &gt;</span>default &lt;/servlet-name &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span> &gt;</span>*.png<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">&lt;/servlet-mapping &gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习笔记</title>
      <link href="/2021/11/06/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/06/SpringBoot%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>SpringBoot</h1><h2 id="1，什么是Springboot">1，什么是Springboot</h2><p>Spring Boot可以帮助您创建可以运行的独立的，基于生产级的基于Spring的应用程序。我们对Spring平台和第三方库持固执己见的观点，这样您就可以以最小的麻烦开始使用。大多数Spring Boot应用程序只需要很少的Spring配置。</p><p>您可以使用Spring Boot创建Java应用程序，可以通过使用<code>java -jar</code>或更传统的战争部署来启动Java应用程序。我们还提供了运行“ spring脚本”的命令行工具。</p><p>我们的主要目标是：</p><ul><li>为所有Spring开发提供根本上更快且可广泛访问的入门体验。</li><li>开箱即用，但由于需求开始与默认值有所出入，因此请尽快避开。</li><li>提供一系列大型项目通用的非功能性功能（例如嵌入式服务器，安全性，指标，运行状况检查和外部化配置）。</li><li>完全没有代码生成，也不需要XML配置。</li></ul><h2 id="2，什么是微服务">2，什么是微服务</h2><p>原文是 Martin Flower 于 2014 年 3 月 25 日写的<a href="https://martinfowler.com/articles/microservices.html">《Microservices》</a>。</p><p>文章链接：<a href="https://blog.csdn.net/qq_43458555/article/details/108468384">https://blog.csdn.net/qq_43458555/article/details/108468384</a></p><h3 id="微服务">微服务</h3><p>“微服务架构（Microservice Architecture）”一词在过去几年里广泛的传播，它用于描述一种设计应用程序的特别方式，作为一套独立可部署的服务。目前，这种架构方式还没有准确的定义，但是在围绕业务能力的组织、自动部署（automated deployment）、端智能（intelligence in the endpoints）、语言和数据的分散控制，却有着某种共同的特征。</p><p>“微服务（Microservices）”——只不过在满大街充斥的软件架构中的一新名词而已。尽管我们非常鄙视这样的东西，但是这玩意所描述的软件风格，越来越引起我们的注意。在过去几年里，我们发现越来越多的项目开始使用这种风格，以至于我们身边的同事在构建企业级应用时，把它理所当然的认为这是一种默认开发形式。然而，很不幸，微服务风格是什么，应该怎么开发，关于这样的理论描述却很难找到。</p><p>简而言之，微服务架构风格，就像是把一个单独的应用程序开发为一套小服务，每个小服务运行在自己的进程中，并使用轻量级机制通信，通常是 HTTP API。这些服务围绕业务能力来构建，并通过完全自动化部署机制来独立部署。这些服务使用不同的编程语言书写，以及不同数据存储技术，并保持最低限度的集中式管理。</p><p>在开始介绍微服务风格（microservice style）前，比较一下整体风格（monolithic style）是很有帮助的：一个完整应用程序（monolithic application）构建成一个单独的单元。企业级应用通常被构建成三个主要部分：客户端用户界面（由运行在客户机器上的浏览器的 HTML 页面、Javascript 组成）、数据库（由许多的表构成一个通用的、相互关联的数据管理系统）、服务端应用。服务端应用处理 HTTP 请求，执行领域逻辑（domain logic），检索并更新数据库中的数据，使用适当的 HTML 视图发送给浏览器。服务端应用是完整的 ，是一个单独的的逻辑执行。任何对系统的改变都涉及到重新构建和部署一个新版本的服务端应用程序。</p><p>这样的整体服务（monolithic server）是一种构建系统很自然的方式。虽然你可以利用开发语基础特性把应用程序划分成类、函数、命名空间，但所有你处理请求的逻辑都运行在一个单独的进程中。在某些场景中，开发者可以在的笔计本上开发、测试应用，然后利用部署通道来保证经过正常测试的变更，发布到产品中。你也可以使用横向扩展，通过负载均衡将多个应用部署到多台服务器上。</p><p>整体应用程序（Monolithic applications）相当成功，但是越来越多的人感觉到有点不妥，特别是在云中部署时。变更发布周期被绑定了——只是变更应用程序的一小部分，却要求整个重新构建和部署。随着时间的推移，很难再保持一个好的模块化结构，使得一个模块的变更很难不影响到其它模块。扩展就需要整个应用程序的扩展，而不能进行部分扩展。<img src="https://img-blog.csdnimg.cn/20200908144747433.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNDU4NTU1,size_16,color_FFFFFF,t_70#pic_center" alt="描述"></p><p>这导致了微服务架构风格（microservice architectural style）的出现：把应用程序构建为一套服务。事实是，服务可以独立部署和扩展，每个服务提供了一个坚实的模块边界，甚至不同的服务可以用不同的编程语言编写。它们可以被不同的团队管理。</p><p>我们必须说，微服务风格不是什么新东西，它至少可以追溯到 Unix 的设计原则。但是并没有太多人考虑微服务架构，如果他们用了，那么很多软件都会更好。</p><h3 id="微服务风格的特性">微服务风格的特性</h3><p>微服务风格并没有一个正式的定义，但我们可以尝试描述一下微服务风格所具有的共同特点。并不是所有的微服务风格都要具有所有的特性，但我们期望常见的微服务都应该有这些特性。我们的意图是尝试描述我们工作中或者在其它我们了解的组件中所理解的微服务。特别是，我们不依赖于那些已经明确过的定义。</p><p>组件化（Componentization ）与服务（Services）<br>自从我们开始软件行业以来，一直希望由组件构建系统，就像我们在物理世界所看到的一样。在过去的几十年里，我们已经看到了公共库的大量简编取得了相当的进步，这些库是大部分语言平台的一部分。</p><p>当我们谈论组件时，可能会陷入一个困境——什么是组件。我们的定义是，组件（component）是一个可独立替换和升级的软件单元。</p><p>微服务架构（Microservice architectures）会使用库（libraries），但组件化软件的主要方式是把它拆分成服务。我们把库（libraries）定义为组件，这些组件被链接到程序，并通过内存中函数调用（in-memory function calls）来调用，而服务（services ）是进程外组件（out-of-process components），他们利用某个机制通信，比如 WebService 请求，或远程过程调用（remote procedure call）。组件和服务在很多面向对象编程中是不同的概念。</p><p>把服务当成组件（而不是组件库）的一个主要原因是，服务可以独立部署。如果你的应用程序是由一个单独进程中的很多库组成，那么对任何一个组件的改变都将导致必须重新部署整个应用程序。但是如果你把应用程序拆分成很多服务，那你只需要重新部署那个改变的服务。当然，这也不是绝对的，有些服务会改变导致协调的服务接口，但是一个好的微服务架构的目标就是通过在服务契约（service contracts）中解耦服务的边界和进化机制来避免这些。</p><p>另一个考虑是，把服务当组件将拥有更清晰的组件接口。大多数开发语言都没有一个良好的机制来定义一个发布的接口（Published Interface）。发布的接口是指一个类向外公开的成员，比如 Java 中的声明为 Public 的成员，C# 中声明为非 Internal 的成员。通常只有在文档和规范中会说明，这是为了让避免客户端破坏组件的封装性，阻止组件间紧耦合。服务通过使用公开远程调用机制可以很容易避免这些。</p><p>像这样使用服务也有不足之处。远程调用比进制内调用更消耗资源，因此远程 API 需要粗粒度（coarser-grained），但这会比较难使用。如果你需要调整组件间的职责分配，当跨越进程边界时，这样做将会很难。</p><p>一个可能是，我们看到，服务可以映射到运行时进程（runtime processes）上，但也只是一个可能。服务可以由多个进程组成，它们会同时开发和部署，例如一个应用程序进程和一个只能由这个服务使用的数据库。</p><h2 id="3，创建一个SpringBoot项目">3，创建一个SpringBoot项目</h2><p>方式一（不推荐）</p><ul><li>可以通过官方的SpringBoot项目生成器https://start.spring.io/生成项目，然后使用IDEA导入zip包<img src="/.cn//Users\25001\AppData\Roaming\Typora\typora-user-images\image-20210505155450366.png" alt="image-20210505155450366" style="zoom: 33%;"></li></ul><p>方式二：</p><ul><li>IDEA内部已经集成了https://start.spring.io/网站，可以在IDEA中直接创建。<img src="/.cn//Users\25001\AppData\Roaming\Typora\typora-user-images\image-20210505155629256.png" alt="image-20210505155629256" style="zoom:33%;"></li></ul><h2 id="4，SpringBoot自动装配原理">4，SpringBoot自动装配原理</h2><h3 id="核心依赖">核心依赖</h3><p>如果我们想要查看SpringBoot的核心依赖，需要找到pom.xml文件，在pom.xml配置文件中寻找maven的父工程，顶级工程<code>spring-boot-dependencies</code>内部定义了足足两千多行的依赖</p><p>所以在我们创建SpringBoot时不需要指定个个详细的依赖，因为在顶级父工程中制定了版本</p><p>各个版本的SpringBoot所指定的依赖版本不同，不过都可以在官方文档中查看，2.4.5的SpringBoot可以在网址：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-dependency-versions.html#dependency-versions-coordinates%E4%B8%AD%E6%9F%A5%E7%9C%8B">https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-dependency-versions.html#dependency-versions-coordinates中查看</a></p><h3 id="启动器">启动器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>启动器：也就是SpringBoot的启动场景</li><li>SpringBoot将启动器封装起来，内部包含了该启动器的所有依赖</li><li>如果我们想要添加别的启动场景，我们就可以直接添加启动器即可，SprintBoot会自动帮我们导入所需场景的依赖</li><li>需要什么功能，直接导入启动器（spring-boot-starter-XXX）即可。</li></ul><h3 id="自动装配">自动装配</h3><p><strong>帮助文档</strong></p><p>CSDN：<a href="https://blog.csdn.net/qq_38526573/article/details/107084943">https://blog.csdn.net/qq_38526573/article/details/107084943</a></p><p>知乎：<a href="https://zhuanlan.zhihu.com/p/123343325%EF%BC%8Chttps://zhuanlan.zhihu.com/p/95217578%EF%BC%88%E8%BF%99%E4%B8%AA%E6%8C%BA%E5%A5%BD%EF%BC%89">https://zhuanlan.zhihu.com/p/123343325，https://zhuanlan.zhihu.com/p/95217578（这个挺好）</a></p><p>博客园：<a href="https://www.cnblogs.com/hhcode520/p/9450933.html%EF%BC%88%E4%B8%8D%E9%94%99%EF%BC%89">https://www.cnblogs.com/hhcode520/p/9450933.html（不错）</a></p><p><strong>SpringBoot完美的诠释了什么叫JavaConfig配置Spring</strong></p><p><strong>注解</strong></p><p>@SpringBootApplication——（标注该类是一个SpringBoot的应用）</p><ul><li>@SpringBootConfiguration——(SpringBoot的配置)<ul><li>@Configuration——(Spring的JavaConfig的配置类)<ul><li>@Component——（组件）</li></ul></li></ul></li><li>@ComponentScan——(帮助我们去寻找指定包下的@Component等等标签注册到IOC容器当中)</li><li><font color="red">@EnableAutoConfiguration</font>——（重点：启动自动JavaConfig配置类）<ul><li>@AutoConfigurationPackage——(自动扫描@SpringBootApplication注解包下所有组件并注册)<ul><li>@Import(AutoConfigurationPackages.Registrar.class)</li></ul></li><li>@Import(AutoConfigurationImportSelector.class)</li></ul></li></ul><p><strong>关键配置类</strong></p><ul><li><p>AutoConfigurationPackages</p></li><li><p>AutoConfigurationImportSelector</p></li><li><p>Registrar</p></li></ul><p><strong>关键方法</strong></p><ul><li><p>Registrar——determineImports</p><ul><li><p><code>Registrar</code> 类里一共有两个方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Registrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">DeterminableImports</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        register(registry, <span class="keyword">new</span> PackageImports(metadata).getPackageNames().toArray(<span class="keyword">new</span> String[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Object&gt; <span class="title">determineImports</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singleton(<span class="keyword">new</span> PackageImports(metadata));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别是 <code>determineImports</code> 和 <code>registerBeanDefinitions</code> 。</p><p><code>determineImports</code> 方法在我的项目的启动过程中并没有触发断点，官方的文档描述这个方法返回的是一组代表要导入项的对象。</p><p><code>registerBeanDefinitions</code> 方法触发断点后发现</p><p><code>new AutoConfigurationPackages.PackageImport(metadata)).getPackageName()</code> 方法返回的就是 <code>@SpringBootApplication</code> 注解所在的类的包名。</p><p><strong>所以 <code>@AutoConfigurationPackage</code> 注解的作用应该是扫描与 <code>@SpringBootApplication</code> 标注的类同一包下的所有组件。</strong></p></li></ul></li><li><p>AutoConfigurationImportSelector——selectImports</p><ul><li><p><code>getAutoConfigurationEntry</code> 获取自动配置条目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">        <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">    &#125;</span><br><span class="line">    AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(annotationMetadata);</span><br><span class="line">    <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们再进入到这个叫做 <code>getCandidateConfigurations</code> 的方法中，这个方法名告诉我们这个方法的作用是获取候选配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//getCandidateConfigurations 的定义</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(<span class="keyword">this</span>.getSpringFactoriesLoaderFactoryClass(), <span class="keyword">this</span>.getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个方法中的 <code>Assert.notEmpty()</code> 中我们可以反推得出，Spring Boot 除了扫描自己 jar 包中 <code>META-INF/spring.factories</code> 之外，还会去找别的 jar 包中是否存在 <code>META-INF/spring.factories</code> 。这也为第三方开发自己的 <code>spring-boot-starter</code> 提供了便利。</p></li></ul></li></ul><img src="/.cn//win10桌面存放\Spring\笔记\SpringBoot.assets\SpringBoot自动装配.png" alt="SpringBoot自动装配" style="zoom:200%;"><p>图片链接地址：<a href="http://assets.processon.com/chart_image/6093bca41e0853762874bea6.png">http://assets.processon.com/chart_image/6093bca41e0853762874bea6.png</a></p><p><img src="https://img-blog.csdn.net/20180630145817580?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0RvbmdndWFiYWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210506183334831.png" alt="image-20210506183334831"></p><h3 id="总结"><strong>总结</strong></h3><p><strong>当我们的SpringBoot项目启动的时候，会先导入AutoConfigurationImportSelector，这个类会帮我们选择所有候选的配置，我们需要导入的配置都是SpringBoot帮我们写好的一个一个的配置类，那么这些配置类的位置，存在与META-INF/spring.factories文件中，通过这个文件，Spring可以找到这些配置类的位置，于是去加载其中的配置。</strong></p><p><strong><img src="https://pic3.zhimg.com/80/v2-ec490d9baecef2b0ff77af59598c8c12_720w.jpg" alt="img" style="zoom: 50%;"></strong></p><p>SpringBoot所有的自动配置会在启动时去扫描并加载，<code>META-INF/spring.factories</code>文件装载了所有的自动配置类（JavaConfig类），但是并不是所有的自动配置类都会生效，装配，只有项目有对应的启动器时（也就是加入了对应的依赖如：web依赖），对应的自动装配类才会生效，具体实现是：<strong>@ConditionalOnXXX</strong>注解</p><ol><li>SpringBoot在启动时，会在类的路径下<code>META-INF/spring.factories</code>文件获取指定的值</li><li>通过值将指定的自动配置类导入至IOC容器，那么自动配置就会生效，帮助我们进行配置</li><li>整个JavaEE，解救方案和自动配置的东西都在spring-boot-autoconfigure-2.4.5.jar下</li><li>它会把所有需要导入的组件，以类名的方式返回，这些组件就会被添加到容器中</li><li>spring.factories文件存在非常多的XXXAutoConfiguration的文件（@Bean），这些类就是自动装配类，存在这个场景需要的所有组件，并自动装配(JavaConfig配置类)</li></ol><h2 id="5，多环境多配置">5，多环境多配置</h2><p><strong>优先级</strong></p><p>#application.properties 优先级从高到低，application.yml文件优先级也一样<br>#级别高的会覆盖级别低的，级别高没有的，级别低有的配置项会同样生效</p><p>1、-- 项目根目录config文件夹里面（优先级最高）<br>./config/</p><p>2、–项目根目录<br>./</p><p>3、-- src/main/resources/config/文件夹里面<br>classpath:/config</p><p>4、-- src/main/resources/<br>classpath:/</p><p>1-4优先级从高到低，优先级高的配置内容会覆盖优先级低的配置内容<br>server.port=8081</p><p><strong>如何选择配置文件</strong></p><p>在不同的环境下需要选择不同的配置文件（生产环境，测试环境）</p><p>那么我们应该如何选择配置文件呢</p><p>我们只需要在application.yaml加入</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><p>其中dev是其他配置文件的后缀名(后缀名可以看作配置文件的别名)</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210508172959315.png" alt="image-20210508172959315"></p><h2 id="6，SpringBoot自动装配再理解">6，SpringBoot自动装配再理解</h2><p>为什么我们SpringBoot的配置文件application.yaml可以修改SpringBoot原有配置呢</p><p>如：可以修改端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure><p><strong>原理</strong></p><p>背后的原理其实就是yaml去给我们的JavaConfig类属性赋值</p><p>以字符编码配置类举例</p><p><code>org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\</code></p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210508180355140.png" alt="image-20210508180355140"></p><p>通过注解<code>@EnableConfigurationProperties(ServerProperties.class)</code></p><p>去指定我们的JavaConfig配置类，也就是ServerProperties类</p><p>我们点开这个类来看一看</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210508180602998.png" alt="image-20210508180602998"></p><p>我们可以看到一个非常熟悉的注解<code>@ConfigurationProperties</code></p><p>该注解的功能就是去yaml配置文件中去寻找server的属性并通过server以下的属性给该类的属性赋值</p><p><strong>举例</strong></p><p>如：现在我们想给prot属性赋值</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210508180852864.png" alt="image-20210508180852864"></p><p>那么我需要再yaml配置文件中去写即可</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210508180929186.png" alt="image-20210508180929186"></p><h2 id="7，-Conditional注解">7，@Conditional注解</h2><p>@Conditional是Spring4新提供的注解，它的作用是按照一定的条件进行判断，满足条件给容器注册bean。</p><p><img src="https://pic3.zhimg.com/80/v2-f8bedc8a5eb6ff8b39aeddcf640f9fc6_720w.jpg" alt="img"></p><h2 id="8，WEB开发">8，WEB开发</h2><h3 id="处理静态资源">处理静态资源</h3><p>在JavaConfig配置类<code>WebMvcAutoConfiguration.java</code>类的<code>addResourceHandlers</code>添加资源处理器方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.addResourceHandlers(registry);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ServletContext servletContext = getServletContext();</span><br><span class="line">    addResourceHandler(registry, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    addResourceHandler(registry, <span class="keyword">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class="line">        registration.addResourceLocations(<span class="keyword">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line">        <span class="keyword">if</span> (servletContext != <span class="keyword">null</span>) &#123;</span><br><span class="line">            registration.addResourceLocations(<span class="keyword">new</span> ServletContextResource(servletContext, SERVLET_LOCATION));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一步判断我们是否自定义配置了类静态资源路径<code> if (!this.resourceProperties.isAddMappings())</code></p><p>如果配置了则直接返回</p><p>然后它将静态资源路径<code>/META-INF/resources/webjars/</code>缩减成了路径<code>/webjars/**</code></p><p>也就是将静态资源请求地址从原先的<code>localhost:8080/META-INF/resources/webjars/**</code>变成了</p><p><code>localhost:8080/webjars/**</code></p><p>哪会有什么静态资源会放在<code>/META-INF/resources/webjars/</code>下呢</p><p>以jquery举例（这里我们使用webjars导入jquery，而不是之前的直接导入js文件）</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210509152304246.png" alt="image-20210509152304246"></p><p>现在我们去寻找jquery.js不需要写全路径，而是写<code>http://localhost:8080/webjars/jquery/3.6.0/jquery.js</code></p><p>因为/webjars已经代替了/META-INF/resources/webjars/</p><p><strong>这是jar的静态资源</strong></p><p>那我们项目当中的静态资源应该放在那里呢</p><p>在<code>Resources</code>类中就可以看到我们的静态资源可以放在那了<img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210509153147629.png" alt="image-20210509153147629"></p><p>所以我们的静态资源可以放在&quot;classpath:/resources/&quot;, “classpath:/static/”, &quot;classpath:/public/&quot;目录</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210509153318859.png" alt="image-20210509153318859"></p><p><strong>优先级</strong></p><p>resources=&gt;static=&gt;public</p><h2 id="9，模板引擎">9，模板引擎</h2><p>Thymeleaf模板引擎是SpringBoot推荐的模板引擎</p><p>（一）Thymeleaf 是个什么？</p><pre><code> 简单说， Thymeleaf 是一个跟 Velocity、FreeMarker 类似的模板引擎，它可以完全替代 JSP 。相较与其他的模板引擎，它有如下三个极吸引人的特点：1.Thymeleaf 在有网络和无网络的环境下皆可运行，即它可以让美工在浏览器查看页面的静态效果，也可以让程序员在服务器查看带数据的动态页面效果。这是由于它支持 html 原型，然后在 html 标签里增加额外的属性来达到模板+数据的展示方式。浏览器解释 html 时会忽略未定义的标签属性，所以 thymeleaf 的模板可以静态地运行；当有数据返回到页面时，Thymeleaf 标签会动态地替换掉静态内容，使页面动态显示。2.Thymeleaf 开箱即用的特性。它提供标准和spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、该jstl、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。3. Thymeleaf 提供spring标准方言和一个与 SpringMVC 完美集成的可选模块，可以快速的实现表单绑定、属性编辑器、国际化等功能。</code></pre><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210509161046706.png" alt="image-20210509161046706"></p><h3 id="使用Thymeleaf"><strong>使用Thymeleaf</strong></h3><h4 id="前提"><strong>前提</strong></h4><p>官方文档：<a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html">https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p><p>在SpringBoot项目的pom文件中导入Thymeleaf</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在我们创建的所有html文件中加入约束/命名空间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用"><strong>使用</strong></h4><p>使用和jsp相似</p><p>通过model携带数据</p><p>返回字符串，经过视图解析器解析</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210509164007672.png" alt="image-20210509164007672"></p><p>指定页面，通过Thymeleaf语法接收数据</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210509164117188.png" alt="image-20210509164117188"></p><h4 id="查看配置类">查看配置类</h4><p>我们可以看一下Thymeleaf的JavaConfig配置类<code>ThymeleafProperties</code></p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210509164403500.png" alt="image-20210509164403500"></p><p><font color="red">可以看到Thymeleaf会去扫描资源包下的templates路径，然后拼接.html后缀</font></p><p>所以我们的所有页面必须放在templates路径下，同时页面以html后缀结尾</p><p>这里可以深刻体会到<font color="red">约定大于配置</font></p><h4 id="语法">语法</h4><ul><li>简单表达式：<ul><li>变量表达式： <code>$&#123;...&#125;</code></li><li>选择变量表达式： <code>*&#123;...&#125;</code></li><li>消息表达： <code>#&#123;...&#125;</code></li><li>链接URL表达式： <code>@&#123;...&#125;</code></li><li>片段表达式： <code>~&#123;...&#125;</code></li></ul></li><li>文字<ul><li>文本文字：<code>'one text'</code>，<code>'Another one!'</code>，…</li><li>数字文字：<code>0</code>，<code>34</code>，<code>3.0</code>，<code>12.3</code>，…</li><li>布尔文字：<code>true</code>，<code>false</code></li><li>空文字： <code>null</code></li><li>文字标记：<code>one</code>，<code>sometext</code>，<code>main</code>，…</li></ul></li><li>文字操作：<ul><li>字符串串联： <code>+</code></li><li>文字替换： <code>|The name is $&#123;name&#125;|</code></li></ul></li><li>算术运算：<ul><li>二元运算符：<code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>%</code></li><li>减号（一元运算符）： <code>-</code></li></ul></li><li>布尔运算：<ul><li>二元运算符：<code>and</code>，<code>or</code></li><li>布尔否定（一元运算符）： <code>!</code>，<code>not</code></li></ul></li><li>比较和平等：<ul><li>比较：<code>&gt;</code>，<code>&lt;</code>，<code>&gt;=</code>，<code>&lt;=</code>（<code>gt</code>，<code>lt</code>，<code>ge</code>，<code>le</code>）</li><li>等号运算符：<code>==</code>，<code>!=</code>（<code>eq</code>，<code>ne</code>）</li></ul></li><li>条件运算符：<ul><li>如果-则： <code>(if) ? (then)</code></li><li>如果-则-否则： <code>(if) ? (then) : (else)</code></li><li>默认： <code>(value) ?: (defaultvalue)</code></li></ul></li></ul><h2 id="10，扩展SpringMVC配置">10，扩展SpringMVC配置</h2><p>在SpringBoot自定义设置我们的SpringMVC</p><p>文档地址：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-spring-mvc</a></p><p>我们可以先看自动配置视图解析</p><p>如果我们要自定义视图解析器的话，可以先看官方默认的视图解析器<code>ContentNegotiatingViewResolver</code>是怎么写的</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210511214220487.png" alt="image-20210511214220487"></p><p>官方的视图解析器实现了<code>ViewResolver</code>接口</p><p><code>ContentNegotiatingViewResolver</code>实现了<code>ViewResolver</code>接口的<code>resolveViewName</code>方法</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210511214459312.png" alt="image-20210511214459312"></p><p><code>getCandidateViews</code> 得到候选视图</p><p><code>getBestView</code> 得到最好视图</p><p><strong>自定义视图解析器</strong></p><p>那么我们自定义的视图解析器需要实现<code>ViewResolver</code>接口并且实现了<code>ViewResolver</code>接口的<code>resolveViewName</code>方法</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210511215019247.png" alt="image-20210511215019247"></p><p>最后将自定义的视图解析器注册到IOC容器当中</p><h3 id="关于注解-EnableWebMvc">关于注解@EnableWebMvc</h3><p>在官方文档我们可以看到这样一句话</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If you want to keep those Spring Boot MVC customizations and make more [MVC customizations](interceptors, formatters, view controllers, and other features), you can add your own `@Configuration` class of type `WebMvcConfigurer` but **without** `@EnableWebMvc`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果要保留这些Spring Boot MVC定制并进行更多的MVC定制（拦截器，格式化程序，视图控制器和其他功能），则可以添加自己@Configuration的注解，同时实现WebMvcConfigurer接口，但不添加 @EnableWebMvc注解。</span><br></pre></td></tr></table></figure><p>为什么我们扩展配置类的时候不能添加 @EnableWebMvc注解呢</p><p>官方是这样解释的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If you want to take complete control of Spring MVC, you can add your own @Configuration annotated with @EnableWebMvc, or alternatively add your own @Configuration-annotated DelegatingWebMvcConfiguration as described in the Javadoc of @EnableWebMvc.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果你想利用Spring MVC中的完全控制，你可以添加自己配置类添加@Configuration注解和@EnableWebMvc，或者添加自己的@Configuration-annotatedDelegatingWebMvcConfiguration中的Javadoc中所述@EnableWebMvc。</span><br></pre></td></tr></table></figure><p>所以一旦我们加上@EnableWebMvc注解我们的配置类就会完全接管MVC配置，<font color="red">官方的自动配置类就会失效</font></p><p>那SpringBoot是怎么实现的呢，看看源码！</p><p><strong>源码分析</strong></p><p>1，先看看注解@EnableWebMvc</p><img src="/.cn//win10桌面存放\Spring\笔记\SpringBoot.assets\image-20210511221841918.png" alt="image-20210511221841918" style="zoom:50%;"><p>该注解导入了一个<code>DelegatingWebMvcConfiguration</code>类</p><p>看看<code>DelegatingWebMvcConfiguration</code>类</p><img src="/.cn//win10桌面存放\Spring\笔记\SpringBoot.assets\image-20210511222020656.png" alt="image-20210511222020656" style="zoom:50%;"><p><code>DelegatingWebMvcConfiguration</code>类继承了<code>WebMvcConfigurationSupport</code>类</p><p>好的，注解@EnableWebMvc先到这里，不过要记住<code>WebMvcConfigurationSupport</code>类</p><p>2，再来看看SpringBoot官方的Web配置类<code>WebMvcAutoConfiguration</code>类</p><img src="/.cn//win10桌面存放\Spring\笔记\SpringBoot.assets\image-20210511222314623.png" alt="image-20210511222314623" style="zoom:50%;"><p>在最上方我们看到了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br></pre></td></tr></table></figure><p>之前我们一再强调@ConditionalXXX系列注解的重要性</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210511222520036.png" alt="image-20210511222520036"></p><p><strong>现在我们就知道了原理</strong></p><p>只有容器中不存在<code>WebMvcConfigurationSupport</code>类那么<code>WebMvcAutoConfiguration</code>类才会生效，</p><p>那么再看@EnableWebMvc注解，它内部继承了<code>WebMvcConfigurationSupport</code>类</p><p>也就是现在IOC容器内存在了<code>WebMvcConfigurationSupport</code>类，</p><p>所以官方的Web配置类<code>WebMvcAutoConfiguration</code>类不会生效</p><h2 id="11，练习">11，练习</h2><h3 id="1，国际化">1，国际化</h3><p>我们先定义一个页面的语言包内部包含中英文</p><img src="/.cn//win10桌面存放\Spring\笔记\SpringBoot.assets\image-20210513002452883.png" alt="image-20210513002452883" style="zoom:50%;"><p>然后再SpringBoot配置文件中配置语言包</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定消息国际化的资源包</span></span><br><span class="line"><span class="meta">spring.messages.basename</span>=<span class="string">i18n/login</span></span><br></pre></td></tr></table></figure><p>然后我们自定义配置文件的话我们可以参考官方的国际化包<code>AcceptHeaderLocaleResolver</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocaleResolver</span> <span class="keyword">implements</span> <span class="title">LocaleResolver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Locale <span class="title">resolveLocale</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取标志位</span></span><br><span class="line">        String l = request.getParameter(<span class="string">&quot;l&quot;</span>);</span><br><span class="line">        <span class="comment">//获取默认配置</span></span><br><span class="line">        Locale locale = Locale.getDefault();</span><br><span class="line">        <span class="comment">//判断标志是否不合法</span></span><br><span class="line">        <span class="keyword">if</span> (l!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//得到国家和语言</span></span><br><span class="line">            String[] s = l.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            locale =<span class="keyword">new</span> Locale(s[<span class="number">0</span>],s[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> locale;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocale</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后将我们自己配置的类装配到扩展配置类中</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210513004439044.png" alt="image-20210513004439044"></p><p>@Bean</p><p>注意方法名必须是<code>localeResolver</code></p><h3 id="2，拦截器">2，拦截器</h3><p>实现连接器接口<code>HandlerInterceptor</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Interceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        String user = (String) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将自己的拦截器添加到自己的扩展配置类中</p><p>扩展配置类重写<code>addInterceptors</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//拦截器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addInterceptor(<span class="keyword">new</span> Interceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/user/login&quot;</span>,<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>new一个自己的拦截器，拦截&quot;/**“的所有请求，排除”/user/login&quot;,&quot;/index.html&quot;请求</p><h2 id="12，数据库的连接与配置">12，数据库的连接与配置</h2><h3 id="1，JDBC">1，JDBC</h3><p><strong>1,1</strong>  创建SpringBoot项目时勾选JDBC和Mysql数据库的支持</p><img src="/.cn//win10桌面存放\Spring\笔记\SpringBoot.assets\image-20210517112512280.png" alt="image-20210517112512280" style="zoom:50%;"><p><strong>1,2</strong>  在yaml配置文件中配置数据库的用户名，密码，连接地址，Driver</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;characterEncoding=utf8&amp;useSSl=true</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p><strong>1,3</strong>  如何使用</p><p>在SpringBoot中使用JDBC不需要再像之前的JavaEE阶段从获取连接 <code>connection</code>，预编译sql语句<code>PreparedStatement</code> ，结果集<code>ResultSet</code>等等</p><p>而是使用SpringBoot集成的模板XXXTemplate</p><p>JDBC的模板是jdbcTemplate，使用它可以直接执行sql语句，传入值集合，也可以预编译</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210517114952248.png" alt="image-20210517114952248"></p><h3 id="2，集成Druid">2，集成Druid</h3><p>文档：<a href="https://github.com/alibaba/druid/wiki/Druid%E8%BF%9E%E6%8E%A5%E6%B1%A0%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/druid/wiki/Druid连接池介绍</a></p><h4 id="Druid-简介">Druid 简介</h4><p>更新时间： 2020-01-18</p><p>Apache Druid 是一个分布式内存实时分析系统，用于解决如何在大规模数据集下进行快速的、交互式的查询和分析的问题。Apache Druid 由 Metamarkets 公司（一家为在线媒体或广告公司提供数据分析服务的公司）开发，在2019年春季被捐献给 Apache 软件基金会。</p><h4 id="基本特点">基本特点</h4><p>Apache Druid 具有以下特点：</p><ul><li>亚秒级 OLAP 查询，包括多维过滤、Ad-hoc 的属性分组、快速聚合数据等等。</li><li>实时的数据消费，真正做到数据摄入实时、查询结果实时。</li><li>高效的多租户能力，最高可以做到几千用户同时在线查询。</li><li>扩展性强，支持 PB 级数据、千亿级事件快速处理，支持每秒数千查询并发。</li><li>极高的高可用保障，支持滚动升级。</li></ul><h4 id="应用场景">应用场景</h4><p>实时数据分析是 Apache Druid 最典型的使用场景。该场景涵盖的面很广，例如：</p><ul><li>实时指标监控</li><li>推荐模型</li><li>广告平台</li><li>搜索模型</li></ul><p>这些场景的特点都是拥有大量的数据，且对数据查询的时延要求非常高。在实时指标监控中，系统问题需要在出现的一刻被检测到并被及时给出报警。在推荐模型中，用户行为数据需要实时采集，并及时反馈到推荐系统中。用户几次点击之后系统就能够识别其搜索意图，并在之后的搜索中推荐更合理的结果。</p><h4 id="使用Druid">使用Druid</h4><p>1，首先在SpringBoot项目中导入Druid的starter，如果我们Druid配置了log4j的日志打，还需要加入log4j的依赖</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attr">&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="attr">&lt;version&gt;1.1.10&lt;/version&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!--</span> <span class="string">https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line"><span class="attr">&lt;dependency&gt;</span></span><br><span class="line">    <span class="attr">&lt;groupId&gt;log4j&lt;/groupId&gt;</span></span><br><span class="line">    <span class="attr">&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span></span><br><span class="line">    <span class="attr">&lt;version&gt;1.2.17&lt;/version&gt;</span></span><br><span class="line"><span class="attr">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p>2，通过yaml配置Druid</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">druidDataSource</span></span><br><span class="line">    <span class="comment">#指定使用Druid的数据源</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment">#注意版本</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC&amp;characterEncoding=utf8&amp;useSSl=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="comment">#注意此处密码为纯数字需要引用</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#-配置监控统计拦截器</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#配置中,stat监控统计,wall防御sql注入,log4日志记录</span></span><br><span class="line">      <span class="comment">#如果报错检查是否导入log4j</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment">#-连接池设置</span></span><br><span class="line">      <span class="comment">#最大连接池数量 maxIdle已经不再使用</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#初始化时建立物理连接的个数</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#获取连接时最大等待时间，单位毫秒</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#最小连接池数量</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#既作为检测的间隔时间又作为testWhileIdel执行的依据</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#用来检测连接是否有效的sql 必须是一个查询语句</span></span><br><span class="line">      <span class="comment">#mysql中为 select &#x27;x&#x27;</span></span><br><span class="line">      <span class="comment">#oracle中为 select 1 from dual</span></span><br><span class="line">      <span class="attr">validation-query:</span> <span class="string">select</span> <span class="string">&#x27;x&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效</span></span><br><span class="line">      <span class="attr">test-while-idle:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span></span><br><span class="line">      <span class="attr">test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true</span></span><br><span class="line">      <span class="attr">test-on-return:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#是否缓存preparedStatement,mysql5.5+建议开启</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#当值大于0时poolPreparedStatements会自动修改为true</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">20</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#合并多个DruidDataSource的监控数据</span></span><br><span class="line">      <span class="attr">use-global-data-source-stat:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#设置访问druid监控页的账号和密码,默认没有</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><p>3，如果报了图片的错误</p><p><img src="https://img-blog.csdnimg.cn/20200213164518610.png" alt="在这里插入图片描述"></p><p>则需要在资源包下添加名为：<code>log4j.properties</code>  log4j的properties配置文件</p><p>并将以下内容复制进去</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG, stdout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] - %m%n</span></span><br></pre></td></tr></table></figure><h3 id="3，整合Mybatis框架">3，整合Mybatis框架</h3><p>Mybatis框架可以和Druid共存，只需要分别配置即可</p><p><strong>导入依赖</strong></p><p>这是Maven的mybatis自己写的依赖，所以命名是spring-boot-starter在后面，官方是以spring-boot-starter开头的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis SpringBoot的依赖--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置Mybatis</strong></p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210518142941023.png" alt="image-20210518142941023"></p><p><strong>编写Mapper接口</strong></p><img src="/.cn//win10桌面存放\Spring\笔记\SpringBoot.assets\image-20210518143051435.png" alt="image-20210518143051435" style="zoom:50%;"><p>值得注意的是我们需要在接口上加上@Repository注解将其交给IOC容器管理</p><h4 id="Mapper注解的的作用">@Mapper注解的的作用</h4><p>1:为了把mapper这个DAO交給Spring管理 <a href="http://412887952-qq-com.iteye.com/blog/2392672">http://412887952-qq-com.iteye.com/blog/2392672</a></p><p>2:为了不再写mapper映射文件 <a href="https://blog.csdn.net/weixin_39666581/article/details/103899495">https://blog.csdn.net/weixin_39666581/article/details/103899495</a></p><p>3:为了给mapper接口 自动根据一个添加@Mapper注解的接口生成一个实现类 <a href="http://www.tianshouzhi.com/api/tutorials/mapstruct/292">http://www.tianshouzhi.com/api/tutorials/mapstruct/292</a></p><p>但是在一个dao层接口写上@Mapper明显比较繁琐，那么在工程较大时，可以在<font color="red">SpringBoot的主启动类加上@MapperScan() 注解</font>，只要在注解内部写上dao层接口的路径，就会自动扫描并注册</p><p>可参考：<a href="https://www.iteye.com/blog/412887952-qq-com-2392672">https://www.iteye.com/blog/412887952-qq-com-2392672</a></p><h2 id="13，SpringSecurity">13，SpringSecurity</h2><p>Spring Security 是 Spring 家族中的一个安全管理框架，实际上，在 Spring Boot 出现之前，Spring Security 就已经发展了多年了，但是使用的并不多，安全管理这个领域，一直是 Shiro 的天下。</p><p>相对于 Shiro，在 SSM/SSH 中整合 Spring Security 都是比较麻烦的操作，所以，Spring Security 虽然功能比 Shiro 强大，但是使用反而没有 Shiro 多（Shiro 虽然功能没有 Spring Security 多，但是对于大部分项目而言，Shiro 也够用了）。</p><p>自从有了 Spring Boot 之后，Spring Boot 对于 Spring Security 提供了 自动化配置方案，可以零配置使用 Spring Security。</p><p>因此，一般来说，常见的安全管理技术栈的组合是这样的：</p><ul><li>SSM + Shiro</li><li>Spring Boot/Spring Cloud + Spring Security</li></ul><p><strong>注意，这只是一个推荐的组合而已，如果单纯从技术上来说，无论怎么组合，都是可以运行的。</strong></p><p>**帮助文档：**<a href="https://www.cnblogs.com/lenve/p/11242055.html">https://www.cnblogs.com/lenve/p/11242055.html</a></p><p><a href="https://www.cnblogs.com/felordcn/p/12142549.html">https://www.cnblogs.com/felordcn/p/12142549.html</a></p><p><strong>使用SpringSecurity</strong></p><p>在pom配置文件中导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们添加依赖后，Security会直接生效</p><p>访问请求时，会要求我们登录</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210518161448878.png" alt="image-20210518161448878"></p><p>默认的用户名是user ，而密码会在每一次启动项目时生成</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210518161540577.png" alt="image-20210518161540577"></p><p><strong>配置文件指定用户名和密码</strong></p><p>我们也可以自定义密码和用户名，这样就不会每一次靠Security生成</p><p>在yaml配置文件中指定用户名和密码</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210518163947193.png" alt="image-20210518163947193"></p><p><strong>Java配置文件指定用户名和密码</strong></p><p>首先我们创建一个JavaConfig的配置类，将配置类继承<code>WebSecurityConfigurerAdapter</code>类</p><p>并且在配置类上方加上@EnableWebSecurity注解，开启web安全</p><p>@EnableWebSecurity注解内部有一个@Configuration注解了，所以不需要在加了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置请求的权限 过滤器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                <span class="comment">//&quot;/&quot;,&quot;/toLogin&quot; 的请求所有人都可以通过</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;/toLogin&quot;</span>).permitAll()</span><br><span class="line">                <span class="comment">///views/1/** 请求 必须有权限1</span></span><br><span class="line">                .antMatchers(<span class="string">&quot;/views/1/**&quot;</span>).hasRole(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/views/2/**&quot;</span>).hasRole(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/views/3/**&quot;</span>).hasRole(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        http.formLogin();<span class="comment">//.loginPage(&quot;/toLogin&quot;).loginProcessingUrl(&quot;/logon&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//认证用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//从内存中读取用户</span></span><br><span class="line">        <span class="comment">//passwordEncoder(new BCryptPasswordEncoder()) 设置密码加密格式为BCryptPasswordEncoder</span></span><br><span class="line">        auth.inMemoryAuthentication().passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">                <span class="comment">//添加一个用户 密码通过new BCryptPasswordEncoder().encode(&quot;123&quot;)加密   roles 拥有的权限</span></span><br><span class="line">                .withUser(<span class="string">&quot;admin&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>)).roles(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>)</span><br><span class="line">                <span class="comment">//如果想在添加一个用户只需在and方法后面添加</span></span><br><span class="line">                .and().withUser(<span class="string">&quot;xpp011&quot;</span>).password(<span class="keyword">new</span> BCryptPasswordEncoder().encode(<span class="string">&quot;123&quot;</span>)).roles(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color="red">从数据库得到用户认证，参考文档</font>：<a href="https://blog.csdn.net/BLU_111/article/details/110727891">https://blog.csdn.net/BLU_111/article/details/110727891</a></p><p>注意<code>WebSecurityConfigurerAdapter</code>类有很多的configure重载方法，它们分别是</p><p><strong>2.1 认证管理器配置方法</strong></p><p><code>void configure(AuthenticationManagerBuilder auth)</code> 用来配置认证管理器<code>AuthenticationManager</code>。说白了就是所有 <code>UserDetails</code> 相关的它都管，包含 <code>PasswordEncoder</code> 密码机。如果你不清楚可以通过 <a href="https://www.felord.cn/spring-security-userdetails.html">Spring Security 中的 UserDetail</a> 进行了解。本文对 <code>AuthenticationManager</code> 不做具体分析讲解，后面会有专门的文章来讲这个东西 。 可通过 <a href="https://www.felord.cn/categories/spring-security/">Spring Security 实战系列</a> 进行学习。</p><p><strong>2.2 核心过滤器配置方法</strong></p><p><code>void configure(WebSecurity web)</code> 用来配置 <code>WebSecurity</code> 。而 <code>WebSecurity</code> 是基于 <code>Servlet Filter</code> 用来配置 <code>springSecurityFilterChain</code> 。而 <code>springSecurityFilterChain</code> 又被委托给了 <strong>Spring Security 核心过滤器 Bean</strong> <code>DelegatingFilterProxy</code> 。 相关逻辑你可以在 <code>WebSecurityConfiguration</code> 中找到。我们一般不会过多来自定义 <code>WebSecurity</code> , 使用较多的使其<code>ignoring()</code> 方法用来忽略 <strong>Spring Security</strong> 对静态资源的控制。</p><p><strong>2.3 安全过滤器链配置方法</strong></p><p><code>void configure(HttpSecurity http)</code> 这个是我们使用最多的，用来配置 <code>HttpSecurity</code> 。 <code>HttpSecurity</code> 用于构建一个安全过滤器链 <code>SecurityFilterChain</code> 。<code>SecurityFilterChain</code> 最终被注入<strong>核心过滤器</strong> 。 <code>HttpSecurity</code> 有许多我们需要的配置。我们可以通过它来进行自定义安全访问策略。所以我们单独开一章来讲解这个东西。</p><h3 id="13-1，SpringSecurity和thymeleaf整合">13.1，SpringSecurity和thymeleaf整合</h3><p>文档:<a href="https://github.com/thymeleaf/thymeleaf-extras-springsecurity">https://github.com/thymeleaf/thymeleaf-extras-springsecurity</a></p><p><a href="https://www.thymeleaf.org/doc/articles/springsecurity.html">https://www.thymeleaf.org/doc/articles/springsecurity.html</a></p><p>导入maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf和springsecurity5的整合包--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf.extras/thymeleaf-extras-springsecurity5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在html文件导入正确的约束<code>xmlns:sec=&quot;http://www.thymeleaf.org/extras/spring-security&quot;</code>是<font color="red">官方推荐的命名空间</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用来判断是否登录验证</p><img src="/.cn//win10桌面存放\Spring\笔记\SpringBoot.assets\image-20210518184646205.png" alt="image-20210518184646205" style="zoom:67%;"><p><strong>登录页定制和记住我</strong></p><p><strong>定制首页</strong>只需在<code>configure(HttpSecurity http)</code>方法中加入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin().loginPage(<span class="string">&quot;/toLogin&quot;</span>)<span class="comment">//用户为登录时，访问的所以请求都会转跳到这个页面，即登录页面</span></span><br><span class="line">        .loginProcessingUrl(<span class="string">&quot;/login&quot;</span>)<span class="comment">//处理登录的请求地址，即登录表单的action的值</span></span><br><span class="line">        .usernameParameter(<span class="string">&quot;username&quot;</span>)<span class="comment">//登录表单用户名的name，默认username</span></span><br><span class="line">        .passwordParameter(<span class="string">&quot;password&quot;</span>)<span class="comment">//登录表单密码的name，默认password</span></span><br><span class="line">        .defaultSuccessUrl(<span class="string">&quot;/&quot;</span>);<span class="comment">//登录成功后会转跳的页面 首页</span></span><br></pre></td></tr></table></figure><p><strong>登录退出</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.logout()</span><br><span class="line">        .logoutUrl(<span class="string">&quot;/logout&quot;</span>)<span class="comment">//注销表单中请求的地址路径</span></span><br><span class="line">        .logoutSuccessUrl(<span class="string">&quot;/&quot;</span>);<span class="comment">//注销成功后转跳的地址</span></span><br></pre></td></tr></table></figure><p>注意在<strong>登录请求</strong><code>/toLogin,/login</code>和<strong>登录退出请求</strong><code>/logout</code><font color="red">均为post请求</font>，a标签的href为get，所以<font color="red">不要使用a标签请求</font>，不然会导致404的情况</p><p><strong>记住我</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.rememberMe()<span class="comment">//记住我</span></span><br><span class="line">        .rememberMeParameter(<span class="string">&quot;remember&quot;</span>)<span class="comment">//登录表单中选择记住我单选框的名字name属性</span></span><br><span class="line">        .tokenValiditySeconds(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>);<span class="comment">//设置cookie过期时间</span></span><br></pre></td></tr></table></figure><p><strong>关于数据库保存cookie的token值</strong></p><p>参考：<a href="https://www.jb51.net/article/175334.htm">https://www.jb51.net/article/175334.htm</a></p><p><font color="red">建议以后项目实现一下，有意义</font></p><h2 id="14，Shiro">14，Shiro</h2><h3 id="简介"><strong>简介</strong></h3><p>Apache Shiro是一个强大且易用的Java安全框架,执行身份验证、授权、密码和会话管理。使用Shiro的易于理解的API,您可以快速、轻松地获得任何应用程序,从最小的移动应用程序到最大的网络和企业应用程序。</p><p>**官网：**<a href="https://shiro.apache.org/index.html">https://shiro.apache.org/index.html</a></p><p>**帮助文档：**<a href="https://www.w3cschool.cn/shiro/co4m1if2.html">https://www.w3cschool.cn/shiro/co4m1if2.html</a>  (值得一看)</p><p><img src="https://atts.w3cschool.cn/attachments/image/wk/shiro/1.png" alt="img"></p><ul><li><strong>Authentication</strong>：身份认证 / 登录，验证用户是不是拥有相应的身份；</li><li><strong>Authorization</strong>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限；即判断用户是否能做事情，常见的如：验证某个用户是否拥有某个角色。或者细粒度的验证某个用户对某个资源是否具有某个权限；</li><li><strong>Session</strong> <strong>Management</strong>：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通 JavaSE 环境的，也可以是如 Web 环境的；</li><li><strong>Cryptography</strong>：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；</li><li><strong>Web Support</strong>：Web 支持，可以非常容易的集成到 Web 环境；</li><li><strong>Caching</strong>：缓存，比如用户登录后，其用户信息、拥有的角色 / 权限不必每次去查，这样可以提高效率；</li><li><strong>Concurrency</strong>：shiro 支持多线程应用的并发验证，即如在一个线程中开启另一个线程，能把权限自动传播过去；</li><li><strong>Testing</strong>：提供测试支持；</li><li><strong>Run As</strong>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问；</li><li><strong>Remember Me</strong>：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了。</li></ul><p><strong>记住一点，Shiro 不会去维护用户、维护权限；这些需要我们自己去设计 / 提供；然后通过相应的接口注入给 Shiro 即可。</strong></p><p><strong>架构</strong></p><p>接下来我们分别从外部和内部来看看 Shiro 的架构，对于一个好的框架，从外部来看应该具有非常简单易于使用的 API，且 API 契约明确；从内部来看的话，其应该有一个可扩展的架构，即非常容易插入用户自定义实现，因为任何框架都不能满足所有需求。</p><p>首先，我们从外部来看 Shiro 吧，即从应用程序角度的来观察如何使用 Shiro 完成工作。如下图：</p><p><img src="https://atts.w3cschool.cn/attachments/image/wk/shiro/2.png" alt="img"></p><p>可以看到：应用代码直接交互的对象是 Subject，也就是说 Shiro 的对外 API 核心就是 Subject；其每个 API 的含义：</p><p><strong>Subject</strong>：主体，代表了当前 “用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是 Subject，如网络爬虫，机器人等；即一个抽象概念；所有 Subject 都绑定到 SecurityManager，与 Subject 的所有交互都会委托给 SecurityManager；可以把 Subject 认为是一个门面；SecurityManager 才是实际的执行者；</p><p><strong>SecurityManager</strong>：安全管理器；即所有与安全有关的操作都会与 SecurityManager 交互；且它管理着所有 Subject；可以看出它是 Shiro 的核心，它负责与后边介绍的其他组件进行交互，如果学习过 SpringMVC，你可以把它看成 DispatcherServlet 前端控制器；</p><p><strong>Realm</strong>：域，Shiro 从从 Realm 获取安全数据（如用户、角色、权限），就是说 SecurityManager 要验证用户身份，那么它需要从 Realm 获取相应的用户进行比较以确定用户身份是否合法；也需要从 Realm 得到用户相应的角色 / 权限进行验证用户是否能进行操作；可以把 Realm 看成 DataSource，即安全数据源。</p><p>也就是说对于我们而言，最简单的一个 Shiro 应用：</p><ol><li>应用代码通过 Subject 来进行认证和授权，而 Subject 又委托给 SecurityManager；</li><li>我们需要给 Shiro 的 SecurityManager 注入 Realm，从而让 SecurityManager 能得到合法的用户及其权限进行判断。</li></ol><p><strong>从以上也可以看出，Shiro 不提供维护用户 / 权限，而是通过 Realm 让开发人员自己注入。</strong></p><p>接下来我们来从 Shiro 内部来看下 Shiro 的架构，如下图所示：</p><p><img src="https://atts.w3cschool.cn/attachments/image/wk/shiro/3.png" alt="img"></p><ul><li><strong>Subject</strong>：主体，可以看到主体可以是任何可以与应用交互的 “用户”；</li><li><strong>SecurityManager</strong>：相当于 SpringMVC 中的 DispatcherServlet 或者 Struts2 中的 FilterDispatcher；是 Shiro 的心脏；所有具体的交互都通过 SecurityManager 进行控制；它管理着所有 Subject、且负责进行认证和授权、及会话、缓存的管理。</li><li><strong>Authenticator</strong>：认证器，负责主体认证的，这是一个扩展点，如果用户觉得 Shiro 默认的不好，可以自定义实现；其需要认证策略（Authentication Strategy），即什么情况下算用户认证通过了；</li><li><strong>Authrizer</strong>：授权器，或者访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的哪些功能；</li><li><strong>Realm</strong>：可以有 1 个或多个 Realm，可以认为是安全实体数据源，即用于获取安全实体的；可以是 JDBC 实现，也可以是 LDAP 实现，或者内存实现等等；由用户提供；注意：Shiro 不知道你的用户 / 权限存储在哪及以何种格式存储；所以我们一般在应用中都需要实现自己的 Realm；</li><li><strong>SessionManager</strong>：如果写过 Servlet 就应该知道 Session 的概念，Session 呢需要有人去管理它的生命周期，这个组件就是 SessionManager；而 Shiro 并不仅仅可以用在 Web 环境，也可以用在如普通的 JavaSE 环境、EJB 等环境；所以呢，Shiro 就抽象了一个自己的 Session 来管理主体与应用之间交互的数据；这样的话，比如我们在 Web 环境用，刚开始是一台 Web 服务器；接着又上了台 EJB 服务器；这时想把两台服务器的会话数据放到一个地方，这个时候就可以实现自己的分布式会话（如把数据放到 Memcached 服务器）；</li><li><strong>SessionDAO</strong>：DAO 大家都用过，数据访问对象，用于会话的 CRUD，比如我们想把 Session 保存到数据库，那么可以实现自己的 SessionDAO，通过如 JDBC 写到数据库；比如想把 Session 放到 Memcached 中，可以实现自己的 Memcached SessionDAO；另外 SessionDAO 中可以使用 Cache 进行缓存，以提高性能；</li><li><strong>CacheManager</strong>：缓存控制器，来管理如用户、角色、权限等的缓存的；因为这些数据基本上很少去改变，放到缓存中后可以提高访问的性能</li><li><strong>Cryptography</strong>：密码模块，Shiro 提供了一些常见的加密组件用于如密码加密 / 解密的。</li></ul><hr><h3 id="使用Shiro">使用Shiro</h3><p>首先在pom配置文件中导入Shiro依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring-boot-web-starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring-boot-web-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color="red">自定义Shiro配置类</font> <code>MyShiroConfig</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//自定义过滤器</span></span><br><span class="line">    <span class="comment">//将ShiroFilterFactoryBean托管给容器，名字是shiroFilterFactoryBean</span></span><br><span class="line">    <span class="meta">@Bean(&quot;shiroFilterFactoryBean&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">ShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;SecurityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span></span>&#123;</span><br><span class="line">                ShiroFilterFactoryBean factoryBean=<span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        factoryBean.setSecurityManager(defaultWebSecurityManager);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义setFilterChainDefinitionMap方法需要的参数</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap=<span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        anon: 无需认证就可以访问</span></span><br><span class="line"><span class="comment">        authc:必须通过认证才能访问</span></span><br><span class="line"><span class="comment">        user:必须拥有记住我功能访问</span></span><br><span class="line"><span class="comment">        perms:拥有某个资源访问权限才能访问</span></span><br><span class="line"><span class="comment">        role: 拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/add&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/update&quot;</span>,<span class="string">&quot;perms[user:update]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义视图链 以map的形式</span></span><br><span class="line">        factoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        <span class="comment">//登录请求地址</span></span><br><span class="line">        factoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line">        <span class="comment">//设定权限不够的请求路径</span></span><br><span class="line">        factoryBean.setUnauthorizedUrl(<span class="string">&quot;toUnauthorized&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义安全管理器 DefaultWebSecurityManager依赖于UserRealm</span></span><br><span class="line">    <span class="comment">//将安全管理器托管给Spring容器,名字是SecurityManager</span></span><br><span class="line">    <span class="meta">@Bean(&quot;SecurityManager&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">DefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span></span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager=<span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//关联Realm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义的Realm</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置thymeleaf-和-shiro的整合包的方言</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义的类需要三个类 分别是</p><ul><li><p><code>ShiroFilterFactoryBean</code></p><ul><li><p>它是Shiro的过滤器，/Filter工厂，设置对应的过滤条件和跳转条件</p></li><li><pre><code class="language-java">anon: 无需认证就可以访问authc:必须通过认证才能访问user:必须拥有记住我功能访问perms:拥有某个资源访问权限才能访问role: 拥有某个角色权限才能访问<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `DefaultWebSecurityManager`</span><br><span class="line"></span><br><span class="line">  - 安全管理器 它负责所具体的交互，比如，身份认证，授权，控制缓存等，都由他调度</span><br><span class="line">  - 依赖于Realm</span><br><span class="line"></span><br><span class="line">- `Realm`</span><br><span class="line"></span><br><span class="line">  - Shiro 从 Realm 获取安全数据（如用户、角色、权限），就是说 SecurityManager 要验证用户身份，那么它需要从 Realm 获取相应的用户进行比较以确定用户身份是否合法；</span><br><span class="line">  - 由于Shiro是不提供用户/授权的，需要我们去自定义Realm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;font color=&#x27;red&#x27;&gt;依赖关系&lt;/font&gt;： `ShiroFilterFactoryBean`==&gt;`DefaultWebSecurityManager`==&gt;自定义`Realm`</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">//ShiroFilterFactoryBean设置安全管理器defaultWebSecurityManager</span><br><span class="line">ShiroFilterFactoryBean factoryBean=new ShiroFilterFactoryBean();</span><br><span class="line">        //设置安全管理器</span><br><span class="line">        factoryBean.setSecurityManager(defaultWebSecurityManager);       </span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安全管理器DefaultWebSecurityManager设置自定义Realm userRealm</span></span><br><span class="line">DefaultWebSecurityManager securityManager=<span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        <span class="comment">//关联Realm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义的Realm </span></span><br><span class="line"><span class="meta">@Bean</span> <span class="comment">//将自定义Realm托管给Spring容器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">自定义Realm类 </font><code>UserRealm</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">//连接数据库</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权,查询用户是否有响应权限</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了授权==》&quot;</span>+principals);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取得方法的返回值 AuthorizationInfo接口的实现类SimpleAuthorizationInfo</span></span><br><span class="line">        SimpleAuthorizationInfo info=<span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">//获取当前的用户</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">//获取当前用户携带的值  这个值是下面doGetAuthenticationInfo方法</span></span><br><span class="line">        <span class="comment">//new SimpleAuthenticationInfo(user,user.getPwd(),&quot;&quot;)的参数user</span></span><br><span class="line">        User currentUser = (User)subject.getPrincipal();</span><br><span class="line">        <span class="comment">//授权用户类内部属性权限值</span></span><br><span class="line">        info.addStringPermission(currentUser.getPerms());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//身份认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了身份认证==》&quot;</span>+token);</span><br><span class="line">        <span class="comment">//先伪造数据 测试</span></span><br><span class="line">        <span class="comment">//String username=&quot;admin&quot;,password=&quot;123&quot;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将令牌 token转换为可以得到用户名和密码的类型 UsernamePasswordToken</span></span><br><span class="line">        UsernamePasswordToken token1=(UsernamePasswordToken) token;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从数据库中获取用户</span></span><br><span class="line">        User user = userMapper.selectUserByName(token1.getUsername());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //注意Shiro进行授权时 我们只需要判断用户名即可，密码的匹配交给 SimpleAuthenticationInfo 保证安全</span></span><br><span class="line"><span class="comment">        if (!token1.getUsername().equals(username))&#123;</span></span><br><span class="line"><span class="comment">            //用户名不正确</span></span><br><span class="line"><span class="comment">            //当doGetAuthenticationInfo方法返回null时 会报一个UnknownAccountException异常 也就是用户名不存在</span></span><br><span class="line"><span class="comment">            return null;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (user==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//用户名不存在</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//密码配对交给AuthenticationInfo接口的实现类SimpleAuthenticationInfo去做</span></span><br><span class="line">        <span class="comment">//将user存到Subject当前用户中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user,user.getPwd(),<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">Controller层的登录请求</font></p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210519221703245.png" alt="image-20210519221703245"></p><hr><h3 id="Shiro记住我">Shiro记住我</h3><p>参考博客：<a href="https://blog.csdn.net/qq_43298012/article/details/87890956?utm_medium=distribute.wap_relevant.none-task-blog-baidujs_baidulandingword-0">https://blog.csdn.net/qq_43298012/article/details/87890956?utm_medium=distribute.wap_relevant.none-task-blog-baidujs_baidulandingword-0</a></p><p>​记住我功能在各各网站是比较常见的，实现起来也都差不多，主要就是利用cookie来实现，而shiro对记住我功能的实现也是比较简单的，只需要几步即可。</p><p><strong>Shiro配置记住我步骤：</strong></p><p>在MyShiroConfig中添加以下Bean</p><p><strong>记住我cookie</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * cookie对象;会话Cookie模板 ,默认为: JSESSIONID 问题: 与SERVLET容器名冲突,重新定义为sid或rememberMe，自定义</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleCookie <span class="title">rememberMeCookie</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//自定义Cookie</span></span><br><span class="line">    SimpleCookie simpleCookie=<span class="keyword">new</span> SimpleCookie(<span class="string">&quot;rememberMe&quot;</span>);</span><br><span class="line">    <span class="comment">//simpleCookie的httponly属性如果设为true的话，会增加对xss防护的安全系数。它有以下特点：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//simpleCookie()的第七个参数</span></span><br><span class="line">    <span class="comment">//设为true后，只能通过http访问，javascript无法访问</span></span><br><span class="line">    <span class="comment">//防止xss读取cookie</span></span><br><span class="line">    simpleCookie.setHttpOnly(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">//根目录下的所有路径都可以的到该Cookie</span></span><br><span class="line">    simpleCookie.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="comment">//Cookie的有效时间 单位秒</span></span><br><span class="line">    simpleCookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">return</span> simpleCookie;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>记住我Cookie的安全管理器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * cookie管理对象;记住我功能,rememberMe管理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CookieRememberMeManager <span class="title">rememberMeManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">    CookieRememberMeManager rememberMeManager=<span class="keyword">new</span> CookieRememberMeManager();</span><br><span class="line">    <span class="comment">//设置自定义的Cookie</span></span><br><span class="line">    rememberMeManager.setCookie(rememberMeCookie());</span><br><span class="line">    <span class="comment">//rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度(128 256 512 位)</span></span><br><span class="line">    <span class="comment">//官方推荐使用Base64加密</span></span><br><span class="line">    rememberMeManager.setCipherKey(Base64.getDecoder().decode(<span class="string">&quot;4AvVhmFLUs0KTA3Kprsdag==&quot;</span>));</span><br><span class="line">    <span class="keyword">return</span> rememberMeManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>记住我的过滤器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * FormAuthenticationFilter 过滤器 过滤记住我</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FormAuthenticationFilter <span class="title">formAuthenticationFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FormAuthenticationFilter filter=<span class="keyword">new</span> FormAuthenticationFilter();</span><br><span class="line">    <span class="comment">//对应前端的checkbox的name = rememberMe</span></span><br><span class="line">    filter.setRememberMeParam(<span class="string">&quot;rememberMe&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> filter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上准备完成后，开始和Shiro整合</p><p><strong>在核心安全管理器中配置rememberMe的安全管理器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(&quot;SecurityManager&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">DefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span></span>&#123;</span><br><span class="line">    DefaultWebSecurityManager securityManager=<span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">    <span class="comment">//关联Realm</span></span><br><span class="line">    securityManager.setRealm(userRealm);</span><br><span class="line">    <span class="comment">//配置记住我的安全管理器!!!</span></span><br><span class="line">    securityManager.setRememberMeManager(rememberMeManager());</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**修改shirFilter中拦截请求的规则,将/<strong>从authc 改为user</strong></p><p>但是注意前往登录和处理登录的请求就不是user了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义过滤器</span></span><br><span class="line"><span class="meta">@Bean(&quot;shiroFilterFactoryBean&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">ShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;SecurityManager&quot;)</span> DefaultWebSecurityManager defaultWebSecurityManager)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//定义setFilterChainDefinitionMap方法需要的参数</span></span><br><span class="line">    <span class="comment">// 配置访问权限 必须是LinkedHashMap，因为它必须保证有序</span></span><br><span class="line">    <span class="comment">// 过滤链定义，从上向下顺序执行，一般将 /**放在最为下边 --&gt; : 这是一个坑，一不小心代码就不好使了</span></span><br><span class="line">    Map&lt;String, String&gt; filterMap=<span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    anon: 无需认证就可以访问</span></span><br><span class="line"><span class="comment">    authc:必须通过认证才能访问</span></span><br><span class="line"><span class="comment">    user:必须拥有记住我功能访问</span></span><br><span class="line"><span class="comment">    perms:拥有某个资源访问权限才能访问</span></span><br><span class="line"><span class="comment">    role: 拥有某个角色权限才能访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    filterMap.put(<span class="string">&quot;/add&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">    filterMap.put(<span class="string">&quot;/update&quot;</span>,<span class="string">&quot;perms[user:update]&quot;</span>);</span><br><span class="line">    filterMap.put(<span class="string">&quot;/&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    <span class="comment">//设置登录请求为无需认证就可以访问</span></span><br><span class="line">    filterMap.put(<span class="string">&quot;/login&quot;</span>,<span class="string">&quot;anon&quot;</span>);</span><br><span class="line">    <span class="comment">//其他资源都需要认证  authc 表示需要认证才能进行访问 user表示配置记住我或认证通过可以访问的地址</span></span><br><span class="line">    filterMap.put(<span class="string">&quot;/**&quot;</span>,<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>更改HelloController中login方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(String username, String password,<span class="keyword">boolean</span> rememberMe, Model model)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;用户信息：&quot;</span>+username+<span class="string">&quot;:&quot;</span>+password+<span class="string">&quot;:&quot;</span>+rememberMe);</span><br><span class="line">    <span class="comment">//得到当前的用户</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">//将用户名和密码封装成UsernamePasswordToken 形成令牌token 同时将rememberMe加入登录验证</span></span><br><span class="line">    UsernamePasswordToken token=<span class="keyword">new</span> UsernamePasswordToken(username,password,rememberMe);</span><br><span class="line"></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>登陆页面加入rememberMe功能</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/login&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;rememberMe&quot;</span>&gt;</span>记住我</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="Shiro和thymeleaf整合">Shiro和thymeleaf整合</h3><p>导入整合包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--thymeleaf-和-shiro的整合包--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置thymeleaf的Shiro的方言(可以写在Shiro的配置文件中)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置thymeleaf-和-shiro的整合包的方言</span></span><br><span class="line"><span class="meta">@Bean</span><span class="comment">//注册到Spring容器中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ShiroDialect <span class="title">shiroDialect</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//ShiroDialect就是方言配置类</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ShiroDialect();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">thymeleaf的命名空间</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:shiro=&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span><br></pre></td></tr></table></figure><p>可以写的一些标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">首页</span><br><span class="line"><span class="comment">&lt;!--判断是否已认证 没认证则为false 认证则相反--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:notAuthenticated</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--判断当前用户是否有user:add的权限--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/add&#125;&quot;</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/update&#125;&quot;</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器中rememberMe的值</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210520143510203.png" alt="image-20210520143510203"></p><p>其实是将用户信息加密后放到前台的(包含密码)，在项目中user对象信息过于庞大，不能全部存入Cookie,Cookie对长度有一定的限制。</p><h2 id="15，Swagger">15，Swagger</h2><p>帮助文档:<a href="https://zhuanlan.zhihu.com/p/275708279">https://zhuanlan.zhihu.com/p/275708279</a> (比较高级)</p><p><a href="https://blog.csdn.net/weixin_44203158/article/details/109137799">https://blog.csdn.net/weixin_44203158/article/details/109137799</a> (推荐看这个)</p><h4 id="1，介绍">1，介绍</h4><p>Swagger 是一套基于 OpenAPI 规范（OpenAPI Specification，OAS）构建的开源工具，后来成为了 Open API 标准的主要定义者。<br>对于 Rest API 来说很重要的一部分内容就是文档，Swagger 为我们提供了一套通过代码和注解自动生成文档的方法，这一点对于保证API 文档的及时性将有很大的帮助。</p><p>swagger2于17年停止维护，现在最新的版本为17年发布的 Swagger3（Open Api3）。</p><h4 id="2，springfox介绍">2，<strong>springfox介绍</strong></h4><p>SpringFox是 spring 社区维护的一个项目（非官方）<br>由于Spring的流行，Marty Pitt编写了一个基于Spring的组件swagger-springmvc，用于将swagger集成到springmvc中来，而springfox则是从这个组件发展而来。</p><h4 id="3，springfox-swagger-2">3，springfox-swagger 2</h4><p>SpringBoot项目整合swagger2需要用到两个依赖：<code>springfox-swagger2</code>和<code>springfox-swagger-ui</code>，用于自动生成swagger文档。</p><p>springfox-swagger2：这个组件的功能用于帮助我们自动生成描述API的json文件<br>springfox-swagger-ui：就是将描述API的json文件解析出来，用一种更友好的方式呈现出来。</p><h4 id="4，SpringFox-3-0-0-发布">4，SpringFox 3.0.0 发布</h4><ul><li>Spring5，Webflux支持（仅支持请求映射，尚不支持功能端点）。</li><li>Spring Integration支持。</li><li>SpringBoot支持springfox Boot starter依赖性（零配置、自动配置支持）。</li><li>支持OpenApi 3.0.3。</li><li>零依赖。几乎只需要spring-plugin，swagger-core ，现有的swagger2注释将继续工作并丰富openapi3.0规范。</li></ul><h4 id="5，使用Swagger3-0">5，使用Swagger3.0</h4><p>导入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1,  application.yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springfox-swagger</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="comment"># ===== 自定义swagger配置 ===== #</span></span><br><span class="line"><span class="attr">swagger:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application-name:</span> <span class="string">$&#123;spring.application.name&#125;</span></span><br><span class="line">  <span class="attr">application-version:</span> <span class="number">1.0</span></span><br><span class="line">  <span class="attr">application-description:</span> <span class="string">springfox</span> <span class="string">swagger</span> <span class="number">3.0</span><span class="string">整合Demo</span></span><br><span class="line">  <span class="attr">try-host:</span> <span class="string">http://localhost:$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>2,  自定义一个<font color="red">swagger配置类</font><code>SwaggerProperties.class</code></p><p>注意注解<code>@ConfigurationProperties</code>的使用</p><p>代表被修饰的类可以通过前缀<code>prefix = &quot;XXX&quot;</code>,yaml赋值.</p><p>同时注解<code>@ConfigurationProperties</code>需要搭配注解<code>@Component</code>托管给ioc容器</p><p>帮助文档:<a href="https://www.cnblogs.com/jimoer/p/11374229.html">https://www.cnblogs.com/jimoer/p/11374229.html</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xpp011.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * swagger的属性配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;swagger&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否开启swagger，生产环境一般关闭，所以这里定义一个变量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean enable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目应用名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目版本信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String applicationVersion;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目描述信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String applicationDescription;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口调试地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String tryHost;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">getEnable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnable</span><span class="params">(Boolean enable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enable = enable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getApplicationName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationName</span><span class="params">(String applicationName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationName = applicationName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getApplicationVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationVersion;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationVersion</span><span class="params">(String applicationVersion)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationVersion = applicationVersion;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getApplicationDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationDescription;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationDescription</span><span class="params">(String applicationDescription)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationDescription = applicationDescription;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTryHost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tryHost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTryHost</span><span class="params">(String tryHost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tryHost = tryHost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3, springfox swagger3配置类<code>SwaggerConfiguration.class</code></p><p>注解<code>@EnableOpenApi</code>大致意思就是**「只有在配置类标注了<code>@EnableOpenApi</code>这个注解才会生成Swagger文档」**。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@EnableOpenApi</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfiguration</span>  <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SwaggerProperties swaggerProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SwaggerConfiguration</span><span class="params">(SwaggerProperties swaggerProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.swaggerProperties = swaggerProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).pathMapping(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                <span class="comment">//组名字</span></span><br><span class="line">                .groupName(<span class="string">&quot;lighter&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 定义是否开启swagger，false为关闭，可以通过变量控制</span></span><br><span class="line">                .enable(swaggerProperties.getEnable())</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将api的元信息设置为包含在json ResourceListing响应中。</span></span><br><span class="line">                .apiInfo(apiInfo(<span class="string">&quot;lighter&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;123456@gmail.com&quot;</span>))</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 接口调试地址</span></span><br><span class="line">                .host(swaggerProperties.getTryHost())</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 选择哪些接口作为swagger的doc发布</span></span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//扫描指定包下的@controller注解 any()是所有 none()是不扫描</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;cn.xpp011.controller&quot;</span>))</span><br><span class="line"></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 支持的通讯协议集合</span></span><br><span class="line">                .protocols(newHashSet(<span class="string">&quot;https&quot;</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 授权信息设置，必要的header token等认证信息</span></span><br><span class="line">                .securitySchemes(securitySchemes())</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 授权信息全局应用</span></span><br><span class="line">                .securityContexts(securityContexts());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * API 页面上半部分展示信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">(String name,String url,String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().title(swaggerProperties.getApplicationName() + <span class="string">&quot; Api Doc&quot;</span>)</span><br><span class="line">                .description(swaggerProperties.getApplicationDescription())</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(name, url,email ))</span><br><span class="line">                .version(<span class="string">&quot;Application Version: &quot;</span> + swaggerProperties.getApplicationVersion() + <span class="string">&quot;, Spring Boot Version: &quot;</span> + SpringBootVersion.getVersion())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置授权信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SecurityScheme&gt; <span class="title">securitySchemes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApiKey apiKey = <span class="keyword">new</span> ApiKey(<span class="string">&quot;BASE_TOKEN&quot;</span>, <span class="string">&quot;token&quot;</span>, In.HEADER.toValue());</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(apiKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权信息全局应用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;SecurityContext&gt; <span class="title">securityContexts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.singletonList(</span><br><span class="line">                SecurityContext.builder()</span><br><span class="line">                        .securityReferences(Collections.singletonList(<span class="keyword">new</span> SecurityReference(<span class="string">&quot;BASE_TOKEN&quot;</span>, <span class="keyword">new</span> AuthorizationScope[]&#123;<span class="keyword">new</span> AuthorizationScope(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;&quot;</span>)&#125;)))</span><br><span class="line">                        .build()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SafeVarargs</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> &lt;T&gt; <span class="function">Set&lt;T&gt; <span class="title">newHashSet</span><span class="params">(T... ts)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ts.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(ts));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用拦截器排除swagger设置，所有拦截器都会自动加swagger相关的资源排除信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field registrationsField = FieldUtils.getField(InterceptorRegistry.class, <span class="string">&quot;registrations&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">            List&lt;InterceptorRegistration&gt; registrations = (List&lt;InterceptorRegistration&gt;) ReflectionUtils.getField(registrationsField, registry);</span><br><span class="line">            <span class="keyword">if</span> (registrations != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (InterceptorRegistration interceptorRegistration : registrations) &#123;</span><br><span class="line">                    interceptorRegistration</span><br><span class="line">                            .excludePathPatterns(<span class="string">&quot;/swagger**/**&quot;</span>)</span><br><span class="line">                            .excludePathPatterns(<span class="string">&quot;/webjars/**&quot;</span>)</span><br><span class="line">                            .excludePathPatterns(<span class="string">&quot;/v3/**&quot;</span>)</span><br><span class="line">                            .excludePathPatterns(<span class="string">&quot;/doc.html&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置完成后可访问：<a href="http://localhost:8080/swagger-ui/index.html">http://localhost:8080/swagger-ui/index.html</a> 查看</p><h4 id="6，Swagger分组">6，Swagger分组</h4><p>其实在Swagger中分组就是对应着不同的Docket</p><p>我们只需要想IOC容器中注册不同的Docket即可</p><p>这里组被分成了两个，分别是root，lighter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">rootRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).pathMapping(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                <span class="comment">//组名字</span></span><br><span class="line">                .groupName(<span class="string">&quot;root&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 定义是否开启swagger，false为关闭，可以通过变量控制</span></span><br><span class="line">                .enable(swaggerProperties.getEnable())</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将api的元信息设置为包含在json ResourceListing响应中。得到个人信息</span></span><br><span class="line">                .apiInfo(apiInfo(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;https://xpp011.xn&quot;</span>,<span class="string">&quot;2500176776@qq.com&quot;</span>))</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 接口调试地址</span></span><br><span class="line">                .host(swaggerProperties.getTryHost())</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 选择哪些接口作为swagger的doc发布</span></span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//扫描指定包下的@controller注解 any()是所有 none()是不扫描</span></span><br><span class="line">                .apis(RequestHandlerSelectors.any())</span><br><span class="line"></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 支持的通讯协议集合</span></span><br><span class="line">                .protocols(newHashSet(<span class="string">&quot;https&quot;</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 授权信息设置，必要的header token等认证信息</span></span><br><span class="line">                .securitySchemes(securitySchemes())</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 授权信息全局应用</span></span><br><span class="line">                .securityContexts(securityContexts());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.OAS_30).pathMapping(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                <span class="comment">//组名字</span></span><br><span class="line">                .groupName(<span class="string">&quot;lighter&quot;</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 定义是否开启swagger，false为关闭，可以通过变量控制</span></span><br><span class="line">                .enable(swaggerProperties.getEnable())</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将api的元信息设置为包含在json ResourceListing响应中。</span></span><br><span class="line">                .apiInfo(apiInfo(<span class="string">&quot;lighter&quot;</span>,<span class="keyword">null</span>,<span class="string">&quot;123456@gmail.com&quot;</span>))</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 接口调试地址</span></span><br><span class="line">                .host(swaggerProperties.getTryHost())</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 选择哪些接口作为swagger的doc发布</span></span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//扫描指定包下的@controller注解 any()是所有 none()是不扫描</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;cn.xpp011.controller&quot;</span>))</span><br><span class="line"></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 支持的通讯协议集合</span></span><br><span class="line">                .protocols(newHashSet(<span class="string">&quot;https&quot;</span>, <span class="string">&quot;http&quot;</span>))</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 授权信息设置，必要的header token等认证信息</span></span><br><span class="line">                .securitySchemes(securitySchemes())</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 授权信息全局应用</span></span><br><span class="line">                .securityContexts(securityContexts());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="7，测试注解">7，测试注解</h4><p>帮助文档：<a href="http://c.biancheng.net/view/5533.html">http://c.biancheng.net/view/5533.html</a></p><ol><li><p>@Api</p><p>@Api 用在类上，说明该类的作用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;用户登录控制类&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>ApiOperation</p></li></ol><p>@ApiOperation 用在 Controller 里的方法上，说明方法的作用，每一个接口的定义。</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiOperation(&quot;首页请求&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>ApiParam</p><p>@ApiParam 用于 Controller 中方法的参数说明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;处理登录请求&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(<span class="meta">@ApiParam(&quot;用户名字&quot;)</span> String username,<span class="meta">@ApiParam(&quot;用户密码&quot;)</span> String password,<span class="meta">@ApiParam(&quot;是否勾选记得我&quot;)</span> <span class="keyword">boolean</span> rememberMe, Model model)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>@ApiModel</p><p>@ApiModel 用在实体类上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(value = &quot;用户类&quot;,discriminator = &quot;实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>ApiModelProperty</p></li></ol><p>@ApiModelProperty() 用于实体类的字段</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty(&quot;用户id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="meta">@ApiModelProperty(&quot;用户名字&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@ApiModelProperty(&quot;用户密码&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String pwd;</span><br><span class="line"><span class="meta">@ApiModelProperty(&quot;用户权限&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String perms;</span><br></pre></td></tr></table></figure><hr><h2 id="16，异步任务">16，异步任务</h2><p>异步任务主要帮助用户提升体验，比如发送邮件，后台发送邮件是比较慢的过程，需要联网等等，而用户就会需要等待多时，而我们开启异步任务时，将邮件发送变成一个多线程任务，让用户先做其他事情，就会大大增加用户体验</p><p><strong>如何开启异步任务</strong></p><p>在需要异步的类上加上一个注解<code>@Async</code>声明这是一个异步任务，那样程序调用该类时就会开启异步</p><p>该注解可以加在类上或者方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span><span class="comment">//该类是一个异步任务</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在SpringBoot主启动类上加上<code>@EnableAsync</code>注解,启动异步</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span><span class="comment">//开启异步任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAsyncApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootAsyncApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="17，文件上传，邮件发送">17，文件上传，邮件发送</h2><h3 id="邮件发送">邮件发送</h3><p>参考文档:<a href="https://blog.csdn.net/qq_43647359/article/details/104638599">https://blog.csdn.net/qq_43647359/article/details/104638599</a></p><p>首先导入依赖</p><p>由于我发现springBoot启动器mail的依赖包中，<code>javax.mail.internet.MimeMessage</code>是缺失的，所有还需要额外导入<code>javax.mail</code>的mail依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-mail --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.mail/mail --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yaml配置文件中配置发送邮件需要的信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="comment">#服务器地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="comment">#邮件编码</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">utf-8</span></span><br><span class="line">    <span class="comment">#发送邮件用户名</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">2500176776</span><span class="string">@qq.com</span></span><br><span class="line">    <span class="comment">#发送邮件的密码，防止密码暴露，填写授权码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">ddkrojojfylldhic</span></span><br><span class="line">    <span class="comment">#设置ssl加密</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">socketFactoryClass:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br></pre></td></tr></table></figure><p>一个简单的邮件</p><p>项目中要把它提成一个方法，这里先偷懒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">SimpleMailSend</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String msg=<span class="string">&quot;邮件发送成功&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个简单邮件实例</span></span><br><span class="line">        SimpleMailMessage message=<span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        <span class="comment">//邮件主题</span></span><br><span class="line">        message.setSubject(<span class="string">&quot;主题&quot;</span>);</span><br><span class="line">        <span class="comment">//邮件内容</span></span><br><span class="line">        message.setText(<span class="string">&quot;邮件内容&quot;</span>);</span><br><span class="line">        <span class="comment">//接收人,可以写多个</span></span><br><span class="line">        message.setTo(<span class="string">&quot;2500176776@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//发送人 ，注意这里一定要和配置文件中的发送人地址一致</span></span><br><span class="line">        message.setFrom(<span class="string">&quot;2500176776@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过自带的邮件发送类发送</span></span><br><span class="line">        javaMailSender.send(message);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        msg=<span class="string">&quot;邮件发送失败&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个复杂邮件</p><p>项目中要把它提成一个方法，这里先偷懒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">MimeMailSend</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">    String msg=<span class="string">&quot;邮件发送成功&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//复杂邮件实例</span></span><br><span class="line">        MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">        <span class="comment">//复杂邮件的助手实例 构造方法中的Boolean值为是否支持多文件</span></span><br><span class="line">        MimeMessageHelper helper=<span class="keyword">new</span> MimeMessageHelper(mimeMessage,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//邮件主题</span></span><br><span class="line">        helper.setSubject(<span class="string">&quot;附件邮件主题&quot;</span>);</span><br><span class="line">        <span class="comment">//邮件内容 Boolean为是否支持html语法</span></span><br><span class="line">        helper.setText(<span class="string">&quot;&lt;h1&gt;你好&lt;/h1&gt;&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//接收人,可以写多个</span></span><br><span class="line">        helper.setTo(<span class="string">&quot;2500176776@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//发送人 ，注意这里一定要和配置文件中的发送人地址一致</span></span><br><span class="line">        helper.setFrom(<span class="string">&quot;2500176776@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//添加附件 名字 File中是附件的绝对地址</span></span><br><span class="line">        helper.addAttachment(<span class="string">&quot;1.png&quot;</span>,<span class="keyword">new</span> File(<span class="string">&quot;D:\\win10桌面存放\\java\\赫夫曼思想.png&quot;</span>));</span><br><span class="line">        <span class="comment">//代理类发送</span></span><br><span class="line">        javaMailSender.send(mimeMessage);</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        msg=<span class="string">&quot;邮件发送失败&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将图片插入在邮件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendImgResMail</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        MimeMessage mimeMessage = javaMailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(mimeMessage,<span class="keyword">true</span>);</span><br><span class="line">        helper.setSubject(<span class="string">&quot;这是一封测试邮件&quot;</span>);</span><br><span class="line">        helper.setFrom(<span class="string">&quot;bai211425401@qq.com&quot;</span>);</span><br><span class="line">        helper.setTo(<span class="string">&quot;1712900841@qq.com&quot;</span>);</span><br><span class="line">        helper.setSentDate(<span class="keyword">new</span> Date());</span><br><span class="line">        helper.setText(<span class="string">&quot;&lt;p&gt;hello 大家好,我是一封测试邮件,我包含了两张图片,分别如下&lt;/p&gt;&lt;p&gt;第一张图片：&lt;/p&gt;&lt;img src=&#x27;cid:p01&#x27;/&gt;&lt;p&gt;第二张图片：&lt;/p&gt;&lt;img src=&#x27;cid:p02&#x27;/&gt;&quot;</span>,<span class="keyword">true</span>);</span><br><span class="line">    </span><br><span class="line">        helper.addInline(<span class="string">&quot;p01&quot;</span>,<span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\bai\\Pictures\\Camera Roll\\img\\1.png&quot;</span>)));</span><br><span class="line">    </span><br><span class="line">        helper.addInline(<span class="string">&quot;p02&quot;</span>,<span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="string">&quot;C:\\Users\\bai\\Pictures\\Camera Roll\\img\\2.png&quot;</span>)));</span><br><span class="line">        javaMailSender.send(mimeMessage);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>在实际开发中，我们不可能让用户等待邮件发送完毕，所以我们要将邮件发送变成一个异步任务</p><p>在邮件发送的类上加入注解<code>@Async</code>声明是一个异步任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSend</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>在SpringBoot主启动类中加入注解<code>@EnableAsync</code>开启异步任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span><span class="comment">//开启异步任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAsyncApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootAsyncApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件上传">文件上传</h3><p>前端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/fileUpload&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/fileUpload&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileUpload</span><span class="params">(MultipartFile file, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    String format = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">//getServletContext获取服务器的项目地址 SpringBoot集成的tomcat的地址</span></span><br><span class="line">    String path = request.getServletContext().getRealPath(<span class="string">&quot;/img/&quot;</span>) + format;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件保存路径:&quot;</span> + path);</span><br><span class="line">    File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span> (!realPath.exists()) &#123;</span><br><span class="line">        realPath.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//得到文件名</span></span><br><span class="line">    String oldName = file.getOriginalFilename();</span><br><span class="line">    <span class="comment">//设置新文件名更具uuid</span></span><br><span class="line">    String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//将文件转移到realPath路径 文件名为newName</span></span><br><span class="line">        file.transferTo(<span class="keyword">new</span> File(realPath, newName));</span><br><span class="line">        <span class="comment">//前端可访问的地址  getScheme()得到项目的协议使http还是https</span></span><br><span class="line">        <span class="comment">// getServerName()得到项目名</span></span><br><span class="line">        <span class="comment">//getServerPort() 得到项目端口</span></span><br><span class="line">        String overPath = request.getScheme() + <span class="string">&quot;://&quot;</span> + request.getServerName() + <span class="string">&quot;:&quot;</span> + request.getServerPort() + <span class="string">&quot;/img/&quot;</span> + format + newName;</span><br><span class="line">        <span class="keyword">return</span> overPath;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ajax请求</strong></p><p>axaj请求后端接口基本不用变</p><p>前端（记住需要导入jquery）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;UpLoad()&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">UpLoad</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> file=$(<span class="string">&quot;#file&quot;</span>)[<span class="number">0</span>].files[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> formDate=<span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript">        formDate.append(<span class="string">&quot;file&quot;</span>,file);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&quot;开始&quot;</span>);</span></span><br><span class="line"><span class="javascript">        $.ajax(&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">type</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">url</span>:<span class="string">&quot;/fileUpload&quot;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="comment">/*!!!!!</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 processData：处理数据</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                 默认情况下，processData 的值是 true，其代表以对象的形式上传的数据都会被转换为字符串的形式上传。而当上传文件的时候，则不需要把其转换为字符串，因此要改成false  */</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">processData</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                <span class="comment">/*!!!!!</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                * contentType：发送数据的格式</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  和 contentType 有个类似的属性是 dataType ， 代表的是期望从后端收到的数据的格式，一般会有 json 、text……等</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  而 contentType 则是与 dataType 相对应的，其代表的是 前端发送数据的格式</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  </span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  默认值：application/x-www-form-urlencoded</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  代表的是 ajax 的 data 是以字符串的形式 如 id=2019&amp;password=123456</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  使用这种传数据的格式，无法传输复杂的数据，比如多维数组、文件等</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  </span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  有时候要注意，自己所传输的数据格式和ajax的contentType格式是否一致，如果不一致就要想办法对数据进行转换</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                  把contentType 改成 false 就会改掉之前默认的数据格式，在上传文件时就不会报错了。*/</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">contentType</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">data</span>:formDate,</span></span><br><span class="line"><span class="javascript">                <span class="attr">success</span>:<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">&quot;#msg&quot;</span>).html(msg);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        )</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>多文件上传</strong></p><p>前端</p><p>前端只需要设置 input标案加入属性 multiple 实现多文件上传</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/fileUploads&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    multiple选择多个值  在file中也就是选择多个文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>后端</p><p>后端大致一样</p><p>接收的MultipartFile改为数组形式 存储多个文件</p><p>最后遍历该数组并保存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/fileUploads&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">fileUploads</span><span class="params">(MultipartFile[] files, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    String format = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="comment">//getServletContext获取服务器的项目地址 SpringBoot集成的tomcat的地址</span></span><br><span class="line">    String path = request.getServletContext().getRealPath(<span class="string">&quot;/img/&quot;</span>) + format;</span><br><span class="line">    System.out.println(<span class="string">&quot;文件保存路径:&quot;</span> + path);</span><br><span class="line">    File realPath = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span> (!realPath.exists()) &#123;</span><br><span class="line">        realPath.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line"></span><br><span class="line">        String oldName = file.getOriginalFilename();</span><br><span class="line">        String newName = UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> File(realPath, newName));</span><br><span class="line">            String overPath = request.getScheme() + <span class="string">&quot;://&quot;</span> + request.getServerName() + <span class="string">&quot;:&quot;</span> + request.getServerPort() + <span class="string">&quot;/img/&quot;</span> + format + newName;</span><br><span class="line">            System.out.println(overPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18，定时任务">18，定时任务</h2><p><strong>注解</strong><code>@EnableScheduling</code></p><p>开启定时任务,在主启动类上加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span><span class="comment">//开启定时任务</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootAsyncApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootAsyncApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注解</strong><code>@scheduled</code></p><p>通过cron表达式进行定时,作用域在方法上，不要加在类上</p><p>星期天到星期六的每月每日每时每分每秒执行hello方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@org</span>.springframework.scheduling.annotation.Scheduled(cron = <span class="string">&quot;* * * * * 0-6 &quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>cron表达式</strong></p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210522161627705.png" alt="image-20210522161627705"></p><p><strong>常用表达式例子</strong></p><p>（1）<strong>0 0 2 1 * ? *</strong>  表示在每月的1日的凌晨2点调整任务</p><p>（2）<strong>0 15 10 ? * MON-FRI</strong>  表示周一到周五每天上午10:15执行作业</p><p>（3）<strong>0 15 10 ? 6L 2002-2006</strong>  表示2002-2006年的每个月的最后一个星期五上午10:15执行作</p><p>（4）<strong>0 0 10,14,16 * * ?</strong>  每天上午10点，下午2点，4点</p><p>（5）<strong>0 0/30 9-17 * * ?</strong>  朝九晚五工作时间内每半小时</p><p>（6）<strong>0 0 12 ? * WED</strong>   表示每个星期三中午12点</p><p>（7）<strong>0 0 12 * * ?</strong>  每天中午12点触发</p><p>（8）<strong>0 15 10 ? * *</strong>   每天上午10:15触发</p><p>（9）<strong>0 15 10 * * ?</strong>   每天上午10:15触发</p><p>（10）<strong>0 15 10 * * ? *</strong>   每天上午10:15触发</p><p>（11）<strong>0 15 10 * * ? 2005</strong>   2005年的每天上午10:15触发</p><p>（12）<strong>0 * 14 * * ?</strong>   在每天下午2点到下午2:59期间的每1分钟触发</p><p>（13）<strong>0 0/5 14 * * ?</strong>   在每天下午2点到下午2:55期间的每5分钟触发</p><p>（14）<strong>0 0/5 14,18 * * ?</strong>   在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发</p><p>（15）<strong>0 0-5 14 * * ?</strong>   在每天下午2点到下午2:05期间的每1分钟触发</p><p>（16）<strong>0 10,44 14 ? 3 WED</strong>   每年三月的星期三的下午2:10和2:44触发</p><p>（17）<strong>0 15 10 ? * MON-FRI</strong>   周一至周五的上午10:15触发</p><p>（18）<strong>0 15 10 15 * ?</strong>   每月15日上午10:15触发</p><p>（19）<strong>0 15 10 L * ?</strong>   每月最后一日的上午10:15触发</p><p>（20）<strong>0 15 10 ? * 6L</strong>   每月的最后一个星期五上午10:15触发</p><p>（21）<strong>0 15 10 ? * 6L 2002-2005</strong>  2002年至2005年的每月的最后一个星期五上午10:15触发</p><p>（22）<strong>0 15 10 ? * 6#3</strong>  每月的第三个星期五上午10:15触发</p><p>学习网址：<a href="https://www.cnblogs.com/javahr/p/8318728.html">https://www.cnblogs.com/javahr/p/8318728.html</a></p><p>在线转换器网址:<a href="https://qqe2.com/cron">https://qqe2.com/cron</a>  也可以将cron表达式转为看得懂的文字</p><h2 id="19，Dubbo">19，Dubbo</h2><p>​Dubbo(读音[ˈdʌbəʊ])是阿里巴巴公司开源的一个高性能优秀的<a href="https://baike.baidu.com/item/%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6">服务框架</a>，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 [1] <a href="https://baike.baidu.com/item/Spring">Spring</a>框架无缝集成。</p><p>​Dubbo是一款高性能、轻量级的开源Java RPC框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。</p><h3 id="架构">架构</h3><p>Dubbo 架构</p><p><img src="https://dubbo.apache.org/imgs/user/dubbo-architecture.jpg" alt="dubbo-architucture"></p><p><strong>节点角色说明</strong></p><table><thead><tr><th>节点</th><th>角色说明</th></tr></thead><tbody><tr><td><code>Provider</code></td><td>暴露服务的服务提供方</td></tr><tr><td><code>Consumer</code></td><td>调用远程服务的服务消费方</td></tr><tr><td><code>Registry</code></td><td>服务注册与发现的注册中心</td></tr><tr><td><code>Monitor</code></td><td>统计服务的调用次数和调用时间的监控中心</td></tr><tr><td><code>Container</code></td><td>服务运行容器</td></tr></tbody></table><p><strong>调用关系说明</strong></p><ol><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ol><h3 id="实现Dubbo和zookeeper">实现Dubbo和zookeeper</h3><h4 id="zookeeper">zookeeper</h4><ol><li>前往zookeeper官网下载：<a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a>  3.6.3为稳定版<ul><li>​下载完成后解压，并运行<code>/bin</code>目录下的<code>zkServer.cmd</code>文件启动zookeeper</li><li><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210522214910199.png" alt="image-20210522214910199"></li></ul></li></ol><h4 id="dubbo-admin">dubbo-admin</h4><ol><li><p>前往下载dubbo在GetHub上托管的dubbo-admin</p><ul><li>dubbo-admin是是一个可视化管理dubbo和zookeeper注册中心的网页</li><li>网址:<a href="https://github.com/apache/dubbo-admin/tree/master">https://github.com/apache/dubbo-admin/tree/master</a> 建议下载master分支的debbo，最新版是vue分离的比较折腾</li><li>在项目<code>dubbo-admin-master</code>下，运行cmd，执行<code>mvn clean package -Dmaven.test.skip=true</code>将项目打成jar包</li><li>在子项目<code>dubbo-admin</code>的target目录运行打包好的jar包</li></ul><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210522215827776.png" alt="image-20210522215827776"></p></li></ol><h4 id="构建项目">构建项目</h4><ol><li>在IDEA中构建两个项目，分别是提供者<code>Provider</code>和消费者<code>Consumer</code></li></ol><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5Cimage-20210522220052435.png" alt="image-20210522220052435"></p><p>配置端口，避免端口冲突</p><p><code>server.port=XXXX</code></p><p>分别在两个项目中导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--zkclient客户端--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.github.mxsm/zkclient-spring-boot-starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.mxsm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--dubbo依赖--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo-spring-boot-starter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.dubbo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--解决日志冲突--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-framework --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.curator/curator-recipes --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-recipes<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--剔除log4日志--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong>springboot-provider</strong></p><p>编写配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment">#服务器的名字</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">provider-server</span></span><br><span class="line"><span class="comment">#注册中心的地址</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br><span class="line"><span class="comment">#该项目下的那些服务被注册,并暴露给注册中心zookeeper</span></span><br><span class="line"><span class="meta">dubbo.scan.base-packages</span>=<span class="string">cn.xpp011.service</span></span><br></pre></td></tr></table></figure><p>在提供者springboot-provider项目中书写想要暴露的服务</p><p>注意TicketServiceImpl类实现接口TicketService，接口TicketService中就一个方法ticket</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xpp011.service;</span><br><span class="line"><span class="meta">@DubboService</span><span class="comment">//将该服务类在注册中心注册</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TicketServiceImpl</span> <span class="keyword">implements</span> <span class="title">TicketService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ticket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;《成都--&gt;上海》&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主启动类中加入注解<code>@EnableDubbo</code>启动Dubbo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubbo</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootProviderApplication</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>springboot-consumer</strong></p><p>编写配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8082</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#消费者服务的名字</span></span><br><span class="line"><span class="meta">dubbo.application.name</span>=<span class="string">consumer-server</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#注册中心的地址</span></span><br><span class="line"><span class="meta">dubbo.registry.address</span>=<span class="string">zookeeper://127.0.0.1:2181</span></span><br></pre></td></tr></table></figure><p>在消费者类中编写服务类，同时调用提供者<strong>springboot-provider</strong>项目中暴露的服务类</p><p>注意如果想要拿到别的项目暴露的服务类，需要编写该服务类实现的接口，包路径也必须相同</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210522221032294.png" alt="image-20210522221032294"></p><p>拿到其他项目暴露服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerTicket</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DubboReference</span><span class="comment">//从注册中心拿取类型为TicketService，同时包路径为cn.xpp011.service</span></span><br><span class="line">    </span><br><span class="line">    TicketService ticketService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String ticket = ticketService.ticket();</span><br><span class="line">        System.out.println(<span class="string">&quot;购买了:&quot;</span>+ticket);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行消费者<strong>springboot-consumer</strong></p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210522221316160.png" alt="image-20210522221316160"></p><hr><p>最后可以在dubbo-admin的网页地址<code>http://localhost:7001</code></p><p>可视化的看到暴露的服务类</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210522221433991.png" alt="image-20210522221433991"></p><h3 id="思考">思考</h3><p>1，为什么dubbo-admin可以可视化的看到提供者暴露的服务类呢</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210522222006051.png" alt="image-20210522222006051"></p><p>在dubbo-admin-master的配置文件中我们看到了，它已经配置了zookeeper注册中心的地址。所以dubbo-admin拿到了注册中心的数据。</p><p>所以我们zookeeper注册中心的端口修改时，我们的dubbo-admin-master的配置文件也要修改哦；</p><p>2，那zookeeper注册中心是怎么拿到提供者暴露的服务类的呢</p><p>其实在提供者<strong>springboot-provider</strong> 项目中配置了注册中心的地址</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210522222331445.png" alt="image-20210522222331445"></p><p>并提供服务类的注解<code>@DubboService</code>将该服务类在注册中心注册</p><p>3，那消费者是怎么拿到暴露的服务的呢</p><p>这就比较简单了</p><p>消费者<strong>springboot-consumer</strong>项目也配置了zookeeper注册中心的地址</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210522222545148.png" alt="image-20210522222545148"></p><p>并通过注解<code>@DubboReference</code>从注册中心拿取相应类型，相应包路径的服务类</p><h2 id="20，跨域请求（cors）">20，跨域请求（cors）</h2><h3 id="1-什么是跨域？">1.什么是跨域？</h3><p>跨域：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。</p><p>例如：a页面想获取b页面资源，如果a、b页面的协议、域名、端口、子域名不同，所进行的访问行动都是跨域的，而浏览器为了安全问题一般都限制了跨域访问，也就是不允许跨域请求资源。注意：跨域限制访问，其实是<strong>浏览器的限制</strong>。理解这一点很重要！！！</p><p>同源策略：是指协议，域名，端口都要相同，其中有一个不同都会产生跨域；</p><p><img src="https://upload-images.jianshu.io/upload_images/9487719-d9eb2035e204d817.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/717/format/webp" alt="img"></p><p><strong>那SpringBoot如何解决跨域请求呢</strong></p><p><strong>注解</strong></p><p>在SpringBoot中解决跨域请求是相当简单的</p><p>只需要注解@CrossOrigin(“域名地址:端口”)</p><p>当我们加上<strong>该注解的使用那么该方法或者类下的所有方法</strong>  都会<strong>被指定</strong>域名:端口允许方法</p><p>实现Cors  跨域资源共享</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加上该注解后表示该方法 支持地址为http://localhost:8082的跨域请求   作用域为类和方法</span></span><br><span class="line">    <span class="comment">//@CrossOrigin(&quot;http://localhost:8082&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">gethello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello cors:get&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">puthello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello cors:put&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置类</strong></p><p>但是在项目很大的使用，加注解的方式就显得不是很明智了，那么通过Java配置类的方式解救跨域请求</p><p>实现WebMvcConfigurer接口，并实现跨域资源共享映射方法addCorsMappings方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于注解方式可能在项目大时比较繁琐</span></span><br><span class="line"><span class="comment">//所以这里可以使用配置类的方式实现 就不需要加很多注解</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//实现跨域资源共享映射方法addCorsMappings</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//addMapping 设置请求地址</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">//设置请求域名</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;http://localhost:8082&quot;</span>)</span><br><span class="line">                <span class="comment">//设置跨域的请求头  *表示任何请求头都可以</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">//设置请求的方法 get,post,del *表示任何请求方式都可以</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">//设置探测请求后多少秒不需要再探测  默认1800秒</span></span><br><span class="line">                .maxAge(<span class="number">3</span> * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于探测请求</strong></p><p>在put请求方式中，它第一次会发送两次请求</p><p>第一次是探测请求，判断服务器是否支持该请求地址，如果支持那么就会发送第二次正式请求</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210530131140246.png" alt="image-20210530131140246"></p><p>那探测请求其实不用每次都发，我们可以设置一个探测请求有效期，在该有效期内就不用每次都发探测请求了,也就是配置类的<code>maxAge()</code>方法</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210530131253860.png" alt="image-20210530131253860"></p><h2 id="21，系统启动任务">21，系统启动任务</h2><h3 id="CommandLineRunner"><strong>CommandLineRunner</strong></h3><p>系统启动任务，可以在系统启动之前做一些事情，比如初始化参数等等</p><p>自定义Java配置类   实现启动命令接口<code>CommandLineRunner</code></p><p>实现run方法在其中可以做一些系统启动任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Order(100)</span><span class="comment">//系统启动任务的优先级   默认为2的31次方减一  数字越小优先级越高</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComm</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//这里的参数args为主启动类run方法传递的参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;系统启动任务1,参数:&quot;</span>+ Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意注解<code>@Order</code>当我们有多个系统启动任务类时，设置优先级就很必要</p><p>系统启动任务的优先级   默认为2的31次方减一  数字越小优先级越高</p><h3 id="ApplicationRunner">ApplicationRunner</h3><p>ApplicationRunner也是一个系统启动类，只不过它可以获取kv键值对形式的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Order(99)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplicationRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String[] sourceArgs = args.getSourceArgs();</span><br><span class="line">        <span class="comment">//获取全部参数 包括kv键值对的形式</span></span><br><span class="line">        System.out.println(<span class="string">&quot;sourceArgs : &quot;</span>+ Arrays.toString(sourceArgs));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取值  只包括kv键值对的形式</span></span><br><span class="line">        List&lt;String&gt; nonOptionArgs = args.getNonOptionArgs();</span><br><span class="line">        nonOptionArgs.forEach((v)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;v : &quot;</span>+v);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取kv键值对的形式的key</span></span><br><span class="line">        Set&lt;String&gt; optionNames = args.getOptionNames();</span><br><span class="line">        optionNames.forEach((k)-&gt;&#123;</span><br><span class="line">            <span class="comment">//getOptionValues更具key得到value值</span></span><br><span class="line">            System.out.println(k+<span class="string">&quot; : &quot;</span>+args.getOptionValues(k));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行效果</strong></p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210531135600115.png" alt="image-20210531135600115"></p><h2 id="22，SpringBoot—Aop">22，SpringBoot—Aop</h2><p><strong>前置</strong></p><h3 id="JoinPoint-对象">JoinPoint 对象</h3><p><strong>JoinPoint</strong>对象****封装了SpringAop中切面方法的信息*<em><strong>,在切面方法中添加</strong></em>*JoinPoint参数*<em><strong>,就可以获取到封装了该方法信息的</strong></em>*JoinPoint对象.****<br><strong>常用api:</strong></p><table><thead><tr><th style="text-align:left">方法名</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">Signature getSignature();</td><td style="text-align:left"><strong>获取封装了署名信息的对象,在该对象中可以获取到目标方法名,所属类的Class等信息</strong></td></tr><tr><td style="text-align:left">Object[] getArgs();</td><td style="text-align:left"><strong>获取传入目标方法的参数对象</strong></td></tr><tr><td style="text-align:left">Object getTarget();</td><td style="text-align:left"><strong>获取被代理的对象</strong></td></tr><tr><td style="text-align:left">Object getThis();</td><td style="text-align:left"><strong>获取代理对象</strong></td></tr></tbody></table><h3 id="ProceedingJoinPoint对象">ProceedingJoinPoint对象</h3><p><em><strong>*ProceedingJoinPoint对象是JoinPoint的子接口,该对象只用在@Around的切面方法中,*</strong></em><br>添加了<br><code>Object proceed() throws Throwable //执行目标方法</code><br><code>Object proceed(Object[] var1) throws Throwable //传入的新的参数去执行目标方法</code><br>两个方法.</p><h3 id="导入aop依赖">导入aop依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义切面类">自定义切面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xpp011.Config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span><span class="comment">//切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定制方法规则  这个方法只是单纯的指定方法规则 指定一个切点</span></span><br><span class="line">    <span class="comment">//返回值  指定包   指定方法  指定参数</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* cn.xpp011.Service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pc1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法执行前</span></span><br><span class="line">    <span class="meta">@Before(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint jp)</span></span>&#123;</span><br><span class="line">        String name = jp.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法执行前&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法执行后</span></span><br><span class="line">    <span class="meta">@After(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">After</span><span class="params">(JoinPoint jp)</span></span>&#123;</span><br><span class="line">        String name = jp.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法有返回值的aop returning指定返回参数</span></span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;pc1()&quot;,returning = &quot;o&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">AfterReturning</span><span class="params">(JoinPoint jp,Object o)</span></span>&#123;</span><br><span class="line">        String name = jp.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法的返回值:&quot;</span>+o);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法异常aop e为该方法报出的异常  Throwing抛出什么异常</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;pc1()&quot;,throwing = &quot;e&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterThrowing</span><span class="params">(JoinPoint jp,Exception e)</span></span>&#123;</span><br><span class="line">        String name = jp.getSignature().getName();</span><br><span class="line">        System.out.println(name+<span class="string">&quot;方法报出的异常:&quot;</span>+e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;pc1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">a</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕通知&quot;</span>);</span><br><span class="line">        <span class="comment">//需要在方法执行前做什么只需要在这里写就可以了</span></span><br><span class="line">        Object proceed = pjp.proceed();<span class="comment">//proceed执行该方法 返回值就是这个方法的返回值</span></span><br><span class="line">        <span class="comment">//需要在方法执行后做什么只需要在这里写就可以了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要加入异常只需try catch包裹即可</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里可以对返回值进行修改</span></span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="23，整合Redis">23，整合Redis</h2><h3 id="Linux安装redis">Linux安装redis</h3><p>1.首先下载 Redis，下载地址https://redis.io/，下载获得 redis-4.0.8.tar.gz 后将它放入我们的 Linux 目录 /opt</p><p><a href="http://www.javaboy.org/images/redis/p285.png"><img src="http://www.javaboy.org/images/redis/p285.png" alt="img"></a></p><p>2./opt 目录下，对文件进行解压，解压命令: tar -zxvf redis-4.0.8.tar.gz ，如下：</p><p><a href="http://www.javaboy.org/images/redis/p286.png"><img src="http://www.javaboy.org/images/redis/p286.png" alt="img"></a></p><p>3.解压完成后出现文件夹：redis-4.0.8，进入到该目录中: cd redis-4.0.8</p><p><a href="http://www.javaboy.org/images/redis/p287.png"><img src="http://www.javaboy.org/images/redis/p287.png" alt="img"></a></p><p>4.在 redis-4.0.8 目录下执行 make 命令进行编译</p><p><a href="http://www.javaboy.org/images/redis/p288.png"><img src="http://www.javaboy.org/images/redis/p288.png" alt="img"></a></p><p>5.如果 make 完成后继续执行 make install 进行安装</p><p><a href="http://www.javaboy.org/images/redis/p289.png"><img src="http://www.javaboy.org/images/redis/p289.png" alt="img"></a></p><p>OK，至此，我们的 redis 就算安装成功了。</p><p>6.在我们启动之前，需要先做一个简单的配置：修改 redis.conf 文件，将里面的 daemonize no 改成 yes，让服务在后台启动，如下：</p><p><a href="http://www.javaboy.org/images/redis/p290.png"><img src="http://www.javaboy.org/images/redis/p290.png" alt="img"></a><br><a href="http://www.javaboy.org/images/redis/p291.png"><img src="http://www.javaboy.org/images/redis/p291.png" alt="img"></a></p><p>7.启动，通过<code>redis-server redis.conf</code>命令启动redis，如下：</p><p><a href="http://www.javaboy.org/images/redis/p292.png"><img src="http://www.javaboy.org/images/redis/p292.png" alt="img"></a></p><p>8.测试</p><p>首先我们可以通过 <code>redis-cli</code> 命令进入到控制台，然后通过 <code>ping</code> 命令进行连通性测试，如果看到 pong ，表示连接成功了，如下：</p><p><a href="http://www.javaboy.org/images/redis/p293.png"><img src="http://www.javaboy.org/images/redis/p293.png" alt="img"></a></p><p>9.关闭，通过 <code>shutdown</code> 命令我们可以关闭实例，如下：</p><p><a href="http://www.javaboy.org/images/redis/p294.png"><img src="http://www.javaboy.org/images/redis/p294.png" alt="img"></a></p><h3 id="远程连接">远程连接</h3><p>1，修改redis服务器的配置文件<br><code>vim redis.conf</code></p><p>2，注释以下绑定的主机地址</p><p>#bind 127.0.0.1</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210608143105417.png" alt="image-20210608143105417"></p><p>3，关闭保护模式</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210608143204943.png" alt="image-20210608143204943"></p><p>组合拳</p><p>4，开启端口6379 <code>firewall-cmd --zone=public --add-port=6379/tcp --permanent</code></p><p>5，重启防火墙 <code>firewall-cmd --reload</code></p><p>6，重启redis</p><h3 id="整合redis">整合redis</h3><p>加入依赖</p><p>redis必须和security一起使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210608143650149.png" alt="image-20210608143650149"></p><p>业务类</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210608143522343.png" alt="image-20210608143522343"></p><h2 id="24，Linux安装Nginx">24，Linux安装Nginx</h2><ol><li>首先下载 Nginx（可去官网nginx.org获取最新下载地址）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.17.0.tar.gz</span><br></pre></td></tr></table></figure><p>然后解压下载的目录，进入解压目录中，在编译安装之前，需要安装两个依赖：(如果没有安装C++编译环境则需要先安装C++编译环境)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install pcre-devel</span><br><span class="line">yum -y install openssl openssl-devel</span><br></pre></td></tr></table></figure><p>然后开始编译安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>装好之后，默认安装位置在 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p>进入到该目录的 <code>sbin</code> 目录下，执行 <code>nginx</code> 即可启动 <code>Nginx</code> ：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYkpibiahNwFHSibibEXSgsIC66z1FRY3ib9y4egeVGJr6MmC4VXdQWb4lsicrpKHxqcNNUbJjszIBQNjgNw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>Nginx 启动成功之后，在浏览器中直接访问 Nginx 地址：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/GvtDGKK4uYkpibiahNwFHSibibEXSgsIC66zd9ibwfNAHRttia7PNjUSUlSdSPd9ggLLeeV89kVQX91uuqdQGSicOX5GQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="图片"></p><p>看到如上页面，表示 Nginx 已经安装成功了。</p><p>如果修改了 Nginx 配置，则可以通过如下命令重新加载 Nginx 配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="25，Session共享">25，Session共享</h2><p>Session共享的前提是有两个及以上的服务器，这里就涉及到分布式等操作</p><img src="/.cn//win10桌面存放\Spring\笔记\SpringBoot.assets\image-20210608145652056.png" alt="image-20210608145652056" style="zoom:33%;"><p>在我们创建项目时，记住需要勾选Spring Session依赖，这样SpringBoot就可以帮助我们自动配置一些Session配置</p><p>我们启动两个tomcat，这两个tomcat配置了同一个redis</p><p>此时我们访问这两个项目就会得到相同的session</p><img src="/.cn//win10桌面存放\Spring\笔记\SpringBoot.assets\image-20210608151109024.png" alt="image-20210608151109024" style="zoom:33%;"><p>我们查看redis，发现他已经存放了相关的session信息</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210608151244337.png" alt="image-20210608151244337"></p><h3 id="使用Nginx进行负载均衡">使用Nginx进行负载均衡</h3><p>将jar包上传至linux，启动两个tomcat，判断tomcat是否可以正常访问</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210608154457549.png" alt="image-20210608154457549"></p><p>配置Nginx，实现负载均衡，</p><p>加入Nginx的默认路径</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210608154553630.png" alt="image-20210608154553630"></p><p>修改配置文件Nginx.config</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210608154624680.png" alt="image-20210608154624680"></p><img src="/.cn//win10桌面存放\Spring\笔记\SpringBoot.assets\image-20210608154338339.png" alt="image-20210608154338339" style="zoom: 50%;"><p><strong>解释：</strong></p><p>在这段配置中：</p><ol><li>upstream 表示配置上游服务器</li><li><a href="http://javaboy.org">javaboy.org</a> 表示服务器集群的名字，这个可以随意取名字</li><li>upstream 里边配置的是一个个的单独服务</li><li>weight 表示服务的权重，意味者将有多少比例的请求从 Nginx 上转发到该服务上</li><li>location 中的 proxy_pass 表示请求转发的地址，<code>/</code> 表示拦截到所有的请求，转发转发到刚刚配置好的服务集群中</li><li>proxy_redirect 表示设置当发生重定向请求时，nginx 自动修正响应头数据（默认是 Tomcat 返回重定向，此时重定向的地址是 Tomcat 的地址，我们需要将之修改使之成为 Nginx 的地址）。</li></ol><p>配置完成后，将本地的 Spring Boot 打包好的 jar 上传到 Linux ，然后在 Linux 上分别启动两个 Spring Boot 实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nohup java -jar sessionshare-0.0.1-SNAPSHOT.jar --server.port=8080 &amp;</span><br><span class="line">nohup java -jar sessionshare-0.0.1-SNAPSHOT.jar --server.port=8081 &amp;</span><br></pre></td></tr></table></figure><p>其中</p><ul><li>nohup 表示当终端关闭时，Spring Boot 不要停止运行</li><li>&amp; 表示让 Spring Boot 在后台启动</li></ul><p>配置完成后，重启 Nginx：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>Nginx 启动成功后，我们首先手动清除 Redis 上的数据，然后访问 <code>192.168.66.128/set</code> 表示向 <code>session</code> 中保存数据，这个请求首先会到达 <code>Nginx</code> 上，再由 <code>Nginx</code> 转发给某一个 <code>Spring Boot</code> 实例：</p><p><a href="http://www.javaboy.org/images/boot/14-8.png"><img src="http://www.javaboy.org/images/boot/14-8.png" alt="img"></a></p><p>如上，表示端口为 <code>8081</code> 的 <code>Spring Boot</code> 处理了这个 <code>/set</code> 请求，再访问 <code>/get</code> 请求：</p><p><a href="http://www.javaboy.org/images/boot/14-9.png"><img src="http://www.javaboy.org/images/boot/14-9.png" alt="img"></a></p><p>可以看到，<code>/get</code> 请求是被端口为 8080 的服务所处理的。</p><h2 id="26，SpringBoot集成RabbitMQ">26，SpringBoot集成RabbitMQ</h2><h3 id="简介-2">简介</h3><p><strong>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。</strong></p><p>AMQP ：Advanced Message Queue，高级消息队列协议。它是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。</p><p>RabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点包括：</p><ol><li>可靠性（Reliability）<br>RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。</li><li>灵活的路由（Flexible Routing）<br>在消息进入队列之前，通过 Exchange 来路由消息的。对于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路由功能，可以将多个 Exchange 绑定在一起，也通过插件机制实现自己的 Exchange 。</li><li>消息集群（Clustering）<br>多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。</li><li>高可用（Highly Available Queues）<br>队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。</li><li>多种协议（Multi-protocol）<br>RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等。</li><li>多语言客户端（Many Clients）<br>RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等等。</li><li>管理界面（Management UI）<br>RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方面。</li><li>跟踪机制（Tracing）<br>如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出发生了什么。</li><li>插件机制（Plugin System）<br>RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。</li></ol><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5C20190903141227300.png" alt="20190903141227300"></p><h3 id="安装和使用"><strong>安装和使用</strong></h3><p>首先在Linux中使用docker安装RabbitMQ ——执行以下命令</p><blockquote><p>docker run -d --hostname my-rabbit --name some-rabbit -p 15672:15672 -p 5672:5672   rabbitmq:3-management</p></blockquote><p><strong>说明：</strong></p><p>-p　　端口映射</p><p>–name　　容器实例名称</p><p>-d　　后台运行</p><p>5672　　客户端与rabbitmq通信端口</p><p>15672　　rabbitmq web管理端口　　访问http://ip:15672　　默认用户：guest　　默认密码：guest</p><p><strong>docker查看运行状态</strong></p><blockquote><p>docker ps</p></blockquote><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210611225137212.png" alt="image-20210611225137212"></p><p><strong>端口说明</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4369 -- erlang发现口</span><br><span class="line"></span><br><span class="line">5672 --client端通信口</span><br><span class="line"></span><br><span class="line">15672 -- 管理界面ui端口</span><br><span class="line"></span><br><span class="line">25672 -- server间内部通信口</span><br></pre></td></tr></table></figure></blockquote><p><strong>在防火墙中开放指定端口</strong></p><p>开启指定端口</p><blockquote><p>firewall-cmd --zone=public --add-port=15672/tcp --permanent</p></blockquote><p>重启防火墙</p><blockquote><p>firewall-cmd --reload</p></blockquote><h3 id="交换机模式">交换机模式</h3><p>常用的交换机有以下三种，因为消费者是从队列获取信息的，队列是绑定交换机的（一般），所以对应的消息推送/接收模式也会有以下几种：</p><h4 id="Direct-Exchange">Direct Exchange</h4><p>直连型交换机，根据消息携带的路由键将消息投递给对应队列。</p><p>大致流程，有一个队列绑定到一个直连交换机上，同时赋予一个路由键 routing key 。<br>然后当一个消息携带着路由值为X，这个消息通过生产者发送给交换机时，交换机就会根据这个路由值X去寻找绑定值也是X的队列。</p><h4 id="Fanout-Exchange">Fanout Exchange</h4><p>扇型交换机，这个交换机没有路由键概念，就算你绑了路由键也是无视的。 这个交换机在接收到消息后，会直接转发到绑定到它上面的所有队列。</p><h4 id="Topic-Exchange">Topic Exchange</h4><p>主题交换机，这个交换机其实跟直连交换机流程差不多，但是它的特点就是在它的路由键和绑定键之间是有规则的。<br>简单地介绍下规则：</p><ul><li>(星号) 用来表示一个单词 (必须出现的)</li></ul><p>(井号) <strong>用来表示任意数量</strong>（零个或多个）单词</p><p>通配的绑定键是跟队列进行绑定的，举个小例子<br>队列Q1 绑定键为 <em>.TT.</em>          队列Q2绑定键为  TT.#<br>如果一条消息携带的路由键为 A.TT.B，那么队列Q1将会收到；<br><a href="http://xn--TT-uu2cyis92cyrg89d7xjqsh2qag53cpvv53d9v2ibzwa.AA.BB">如果一条消息携带的路由键为TT.AA.BB</a>，那么队列Q2将会收到；</p><p>主题交换机是非常强大的，为啥这么膨胀？<br>当一个队列的绑定键为 “#”（井号） 的时候，这个队列将会无视消息的路由键，接收所有的消息。<br>当 * (星号) 和 # (井号) 这两个特殊字符都未在绑定键中出现的时候，此时主题交换机就拥有的直连交换机的行为。<br>所以主题交换机也就实现了扇形交换机的功能，和直连交换机的功能。</p><p>另外还有 Header Exchange 头交换机 ，Default Exchange 默认交换机，Dead Letter Exchange 死信交换机，这几个该篇暂不做讲述。</p><h3 id="SpringBoot配置信息">SpringBoot配置信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.rabbitmq.host=<span class="number">192.168</span><span class="number">.32</span><span class="number">.131</span></span><br><span class="line">spring.rabbitmq.username=xpp011</span><br><span class="line">spring.rabbitmq.password=xpp011</span><br><span class="line">spring.rabbitmq.port=<span class="number">5672</span></span><br></pre></td></tr></table></figure><h3 id="代码实现">代码实现</h3><h4 id="直连交换机模式（Direct-Exchange）"><strong>直连交换机模式（Direct Exchange）</strong></h4><p>RabbitDirectConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直连交换机配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitDirectConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIRECTNAME=<span class="string">&quot;directExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//消息队列名字</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;directQueue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DirectExchange <span class="title">directExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//DIRECTNAME 消息队列交换机的名字   true 重启后交换机是否有效   false  长期未使用是否删除</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(DIRECTNAME,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将消息队列和交换机绑定在一起</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">binding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//bind消息队列     to 交换机   with 绑定后的名字</span></span><br><span class="line">        <span class="keyword">return</span>  BindingBuilder.bind(queue()).to(directExchange()).with(<span class="string">&quot;direct&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//消费者监听者</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirectReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听那个队列</span></span><br><span class="line">    <span class="meta">@RabbitListener( queues = &quot;directQueue&quot;)</span></span><br><span class="line">    <span class="comment">//处理方法1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler1</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;handler1 -&gt; &quot;</span>+ msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过SpringBoot自带的模板进行消息发送  exchange 交换机的名字   routingKey 路由的名字      object 发送的消息体</span></span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">&quot;directExchange&quot;</span>,<span class="string">&quot;direct&quot;</span>,<span class="string">&quot;你好 rabbit消息队列&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扇形交换机（Fanout-Exchange）"><strong>扇形交换机（Fanout Exchange）</strong></h4><p>RabbitFanoutConfig配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitFanoutConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FANOUTNAME=<span class="string">&quot;fanoutExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;fanoutQueueOne&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;fanoutQueueTwo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">FanoutExchange <span class="title">fanoutExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FanoutExchange(FANOUTNAME,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//扇形交换机转发时不需要绑定routingKey  它是直接群发到它绑定的路由上</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  BindingBuilder.bind(queueOne()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">bindingTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  BindingBuilder.bind(queueTwo()).to(fanoutExchange());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听类FanoutReceiver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FanoutReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanoutQueueOne&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ListenerOne</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ListenerOne -&gt; &quot;</span>+ msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;fanoutQueueTwo&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ListenerTwo</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ListenerTwo -&gt; &quot;</span>+ msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FanoutTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//扇形交换机  无效写入routingKey</span></span><br><span class="line">    rabbitTemplate.convertAndSend(RabbitFanoutConfig.FANOUTNAME,<span class="keyword">null</span>,<span class="string">&quot;你好  扇形交换机转发&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="主题交换机-Topic-Exchange"><strong>主题交换机(Topic Exchange)</strong></h4><p>* <strong>(星号) 用来表示一个单词 (必须出现的)</strong><br># <strong>(井号) 用来表示任意数量（零个或多个）单词</strong></p><p>同时我们在写入toutingKey时，<font color="red">通配符连接点必须加.</font>  不然无法识别通配符</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210612110138478.png" alt="image-20210612110138478"></p><p>RabbitTopicConfig配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitTopicConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPICNAME=<span class="string">&quot;topicExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueXiaoMi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;XiaoMiQueue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueSanXin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;SanXinQueue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">queueHuaVei</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;HuaWeiQueue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">Topicqueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">&quot;TopicQueue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">TopicExchange <span class="title">topicExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(TOPICNAME,<span class="keyword">true</span>,<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">Topicbinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(Topicqueue()).to(topicExchange()).with(<span class="string">&quot;Topic#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">XiaoMibinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueXiaoMi()).to(topicExchange()).with(<span class="string">&quot;#.XiaoMi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">SanXinbinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueSanXin()).to(topicExchange()).with(<span class="string">&quot;#.SanXin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">Binding <span class="title">HuaVeibinding</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueHuaVei()).to(topicExchange()).with(<span class="string">&quot;#.HuaWei&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>监听类TopicReceiver</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;XiaoMiQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">XiaoMi</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;XiaoMi -&gt; &quot;</span>+ msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;SanXinQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SanXin</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SanXin -&gt; &quot;</span>+ msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;HuaWeiQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HuaWei</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HuaWei -&gt; &quot;</span>+ msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;TopicQueue&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queue</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;queue -&gt; &quot;</span>+ msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><p>当我们写入toutingKey时  它会去寻找符合匹配的toutingKey,并发送到绑定的路由上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TopicTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(RabbitTopicConfig.TOPICNAME,<span class="string">&quot;Topic.XiaoMi&quot;</span>,<span class="string">&quot;你好小米&quot;</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(RabbitTopicConfig.TOPICNAME,<span class="string">&quot;Topic.HuaWei&quot;</span>,<span class="string">&quot;你好华为&quot;</span>);</span><br><span class="line">    rabbitTemplate.convertAndSend(RabbitTopicConfig.TOPICNAME,<span class="string">&quot;Topic.SanXin&quot;</span>,<span class="string">&quot;你好三星&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringSecurity">SpringSecurity</h2><p><code>configure(HttpSecurity http)</code>方法设置登录成功处理器和登录失败处理器，返回JSON数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/**&quot;</span>).hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/user/**&quot;</span>).hasAnyRole(<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .formLogin()</span><br><span class="line">                .loginProcessingUrl(<span class="string">&quot;/doLogin&quot;</span>)</span><br><span class="line">                .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .usernameParameter(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">                .passwordParameter(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">                .successHandler(<span class="keyword">new</span> AuthenticationSuccessHandler() &#123;<span class="comment">//登录成功处理器</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);<span class="comment">//前后端分离返回JSON</span></span><br><span class="line">                        Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                        map.put(<span class="string">&quot;status&quot;</span>,<span class="number">200</span>);</span><br><span class="line">                        map.put(<span class="string">&quot;msg&quot;</span>,authentication.getPrincipal());</span><br><span class="line">                        PrintWriter out = resp.getWriter();</span><br><span class="line">                        out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(map));</span><br><span class="line">                        out.flush();</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .failureHandler(<span class="keyword">new</span> AuthenticationFailureHandler() &#123;<span class="comment">//登录失败处理器</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                        resp.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">                        Map&lt;String,Object&gt; map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                        map.put(<span class="string">&quot;status&quot;</span>,<span class="number">401</span>);<span class="comment">//登录失败  状态吗401</span></span><br><span class="line">                        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> LockedException)&#123;</span><br><span class="line">                            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;账户被锁住，登录失败&quot;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> BadCredentialsException)&#123;</span><br><span class="line">                            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;用户名或者密码错误，登录失败&quot;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DisabledException)&#123;</span><br><span class="line">                            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;账户被锁定，登录失败&quot;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        PrintWriter out = resp.getWriter();</span><br><span class="line">                        out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(map));</span><br><span class="line">                        out.flush();</span><br><span class="line">                        out.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .permitAll()<span class="comment">//注意书写顺序 permitAll一定放在最后</span></span><br><span class="line">                .and()</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="角色继承">角色继承</h3><p>该方法直接写在Security的配置类中即可</p><p>意思为角色为admin的可以干角色user的事</p><p>角色user的可以干visitor的事</p><p>注意两个关系之间需要以<code>\n</code>风格,可以看一眼源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Security角色继承</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RoleHierarchy <span class="title">roleHierarchy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RoleHierarchyImpl roleHierarchy=<span class="keyword">new</span> RoleHierarchyImpl();</span><br><span class="line">    String role=<span class="string">&quot;ROLE_admin &gt; ROLE_user \n ROLE_user &gt; ROLE_visitor&quot;</span>;</span><br><span class="line">    roleHierarchy.setHierarchy(role);</span><br><span class="line">    <span class="keyword">return</span> roleHierarchy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Security动态权限管理">Security动态权限管理</h3><p><font color="red">关键类</font></p><ul><li><code>AntPathMatcher</code>            --Spring自带的路径匹配类</li><li><code>FilterInvocation</code>        --调用过滤器类，可获得请求地址</li><li><code>Authentication</code>            --包含用户登录信息</li><li><code>UserDetails</code>                --用户的详细说明接口，创建用户实体类时继承该接口</li><li><code>UserDetailsService</code>    --用户的服务层接口</li><li><code>WebSecurityConfigurerAdapter</code>      --自定义Security配置类需要继承的类</li><li><code>FilterInvocationSecurityMetadataSource</code>    --自定义过滤器类实现的接口(匹配当前路径的权限)</li><li><code>AccessDecisionManager</code>         --访问决策管理器（做出最终的访问控制（授权）决定。）</li></ul><p><strong>AuthenticationException子类异常详解</strong></p><p>这个异常是在登录的时候出现错误时抛出的异常，比如账户锁定，证书失效等，先来看下AuthenticationException常用的的子类：</p><p><code>UsernameNotFoundException</code> 用户找不到</p><p><code>BadCredentialsException </code>坏的凭据</p><p><code>AccountStatusException </code>用户状态异常它包含如下子类</p><p><code>AccountExpiredException</code> 账户过期</p><p><code>LockedException</code>账户锁定</p><p><code>DisabledException</code> 账户不可用</p><p><code>CredentialsExpiredException</code> 证书过期</p><p>User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">UserDetails</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Boolean enabled;</span><br><span class="line">    <span class="keyword">private</span> Boolean locked;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Role&gt; roles;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//getAuthorities获取权限</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;</span><br><span class="line">        List&lt;SimpleGrantedAuthority&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Role role : roles) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> SimpleGrantedAuthority(role.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//账户是否过期  true是没有</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户是否被锁住 true是没有</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !locked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//凭证是否过期 true是没有</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户是否被激活 true是被激活</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enabled;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get  and set    .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用dao层接口  得到用户</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//根据用户名得到用户</span></span><br><span class="line">        User user=userMapper.loadUserByUsername(username);</span><br><span class="line">        <span class="comment">//用户不存在抛异常</span></span><br><span class="line">        <span class="keyword">if</span> (user==<span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        <span class="comment">//根据方法得到用户的权限</span></span><br><span class="line">        user.setRoles(userMapper.getRoleById(user.getId()));</span><br><span class="line">        <span class="comment">//返回用户</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">MyFilert</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//Security的过滤器管理器 调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span>  <span class="keyword">implements</span> <span class="title">FilterInvocationSecurityMetadataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MenuMapper menuMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Spring自带的路径匹配列类  支持通配符</span></span><br><span class="line">    <span class="keyword">static</span> AntPathMatcher antPathMatcher=<span class="keyword">new</span> AntPathMatcher();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAttributes</span><span class="params">(Object object)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换为过滤器</span></span><br><span class="line">        FilterInvocation invocation=(FilterInvocation) object;</span><br><span class="line">        <span class="comment">//得到当前的请求地址</span></span><br><span class="line">        <span class="comment">//注意这里不用调用getFullRequestUrl方法  会得到全路径导致匹配不成功</span></span><br><span class="line">        String requestUrl=invocation.getRequestUrl();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前请求地址 : &quot;</span>+requestUrl);</span><br><span class="line">        <span class="comment">//得到数据所有请求地址所需要的权限</span></span><br><span class="line">        List&lt;Menu&gt; menuAll = menuMapper.getMenuAll();</span><br><span class="line">        <span class="keyword">for</span> (Menu menu : menuAll) &#123;</span><br><span class="line">            <span class="comment">//判断当前的请求地址是否在数据库中记录</span></span><br><span class="line">            <span class="comment">//由于我们存在数据中的路径是带通配符的，所以使用antPathMatcher匹配</span></span><br><span class="line">            <span class="keyword">if</span> (antPathMatcher.match(menu.getPattern(),requestUrl))&#123;</span><br><span class="line">                <span class="comment">//得到当前地址需要的权限</span></span><br><span class="line">                List&lt;Role&gt; roles = menu.getRoles();</span><br><span class="line">                <span class="comment">//由于该方法返回Collection类型  所以先将权限的名字取出 放到String数组中</span></span><br><span class="line">                String [] res=<span class="keyword">new</span> String[roles.size()];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; roles.size(); i++) &#123;</span><br><span class="line">                    res[i]=roles.get(i).getName();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//通过SecurityConfig的createList的类型转换后得到Collection类型</span></span><br><span class="line">                <span class="keyword">return</span> SecurityConfig.createList(res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果当前地址不在数据库记录  则该地址只需要登录即可浏览</span></span><br><span class="line">        <span class="keyword">return</span> SecurityConfig.createList(<span class="string">&quot;ROLE_login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;ConfigAttribute&gt; <span class="title">getAllConfigAttributes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值为true</span></span><br><span class="line">    <span class="comment">//这里clazz表示安全对象的类型，该方法用于告知调用者当前SecurityMetadataSource是否支持此类安全对象，只有支持的时候，才能对这类安全对象调用getAttributes方法。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">MyAccessDecisionManager</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//访问决策管理器</span></span><br><span class="line"><span class="comment">//做出最终的访问控制（授权）决定。</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccessDecisionManager</span> <span class="keyword">implements</span> <span class="title">AccessDecisionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//configAttributes参数 即MyFilter类的getAttributes方法返回的权限名字</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前用户的权限</span></span><br><span class="line">        Collection&lt;? extends GrantedAuthority&gt; authorities = authentication.getAuthorities();</span><br><span class="line">        <span class="keyword">for</span> (ConfigAttribute configAttribute : configAttributes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;ROLE_login&quot;</span>.equals(configAttribute.getAttribute()))&#123;</span><br><span class="line">                <span class="comment">//AnonymousAuthenticationToken匿名认证失败的令牌</span></span><br><span class="line">                <span class="keyword">if</span> (authentication <span class="keyword">instanceof</span> AnonymousAuthenticationToken)&#123;</span><br><span class="line">                    <span class="comment">//拒绝访问异常</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">&quot;非法请求&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">                <span class="comment">//configAttribute.getAttribute() 获取属性</span></span><br><span class="line">                <span class="comment">//authority.getAuthority()  获取权限</span></span><br><span class="line">                <span class="keyword">if</span> (configAttribute.getAttribute().equals(authority.getAuthority()))&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(<span class="string">&quot;非法请求&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//支持安全类型对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(ConfigAttribute attribute)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">SecurityConfig</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyAccessDecisionManager myAccessDecisionManager;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyFilter myFilter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//配置加密方式</span></span><br><span class="line">        auth.userDetailsService(userService).passwordEncoder(passwordEncoder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//withObjectPostProcessor  写入处理器</span></span><br><span class="line">        <span class="comment">//FilterSecurityInterceptor Security的调用过滤器</span></span><br><span class="line">        http.authorizeRequests().withObjectPostProcessor(<span class="keyword">new</span> ObjectPostProcessor&lt;FilterSecurityInterceptor&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> &lt;O extends FilterSecurityInterceptor&gt; <span class="function">O <span class="title">postProcess</span><span class="params">(O object)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//设置自定的访问决策管理器</span></span><br><span class="line">                object.setAccessDecisionManager(myAccessDecisionManager);</span><br><span class="line">                <span class="comment">//设置Security的数据源  即从数据库中的得到访问地址所需权限</span></span><br><span class="line">                object.setSecurityMetadataSource(myFilter);</span><br><span class="line">                <span class="keyword">return</span> object;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .and()</span><br><span class="line">        .formLogin()</span><br><span class="line">        .permitAll()</span><br><span class="line">        .and().csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Security-JSON登录">Security  JSON登录</h3><p>通过阅读<code>UsernamePasswordAuthenticationFilter</code>源码,我们得知，Security是通过request请求得到Username的，这种形式经常在servlet出现,那也就是Security是能通过表单登录，而无法通过JSON登录，这样对前后端分离是不友好的</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpringBoot.assets%5Cimage-20210610182151951.png" alt="image-20210610182151951"></p><p>更改<code>UsernamePasswordAuthenticationFilter</code>，使其支持JSON登录，注意只是扩展功能，不是重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义的Username和Password过滤器 增加了JSON登录的格式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUsernamePasswordAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">UsernamePasswordAuthenticationFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!request.getMethod().equals(<span class="string">&quot;POST&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断前端是否传递过来的格式是否为JSON格式</span></span><br><span class="line">        <span class="keyword">if</span> (request.getContentType().equals(MediaType.APPLICATION_JSON_VALUE))&#123;</span><br><span class="line">            Map&lt;String,String&gt; map;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//通过IO的形式解析request的Username和Password数据</span></span><br><span class="line">                map = <span class="keyword">new</span> ObjectMapper().readValue(request.getInputStream(), Map.class);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            String username = map.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"></span><br><span class="line">            username = (username != <span class="keyword">null</span>) ? username : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            username = username.trim();</span><br><span class="line">            String password = map.get(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">            password = (password != <span class="keyword">null</span>) ? password : <span class="string">&quot;&quot;</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;JSON解析：&quot;</span>+username+<span class="string">&quot;:&quot;</span>+password);</span><br><span class="line">            UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, password);</span><br><span class="line">            <span class="comment">// Allow subclasses to set the &quot;details&quot; property</span></span><br><span class="line">            setDetails(request, authRequest);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.attemptAuthentication(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写好自定的登录过滤器后，将其添加在<code>UsernamePasswordAuthenticationFilter</code>内部</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> ...</span><br><span class="line">        <span class="comment">//添加自定义过滤器到UsernamePasswordAuthenticationFilter</span></span><br><span class="line">        http.addFilterAt(myAuthenticationFilter(),UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将自定义的登录过滤器创建</span></span><br><span class="line">    <span class="function">MyUsernamePasswordAuthenticationFilter <span class="title">myAuthenticationFilter</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MyUsernamePasswordAuthenticationFilter filter = <span class="keyword">new</span> MyUsernamePasswordAuthenticationFilter();</span><br><span class="line">        <span class="comment">//设置权限管理</span></span><br><span class="line">        filter.setAuthenticationManager(authenticationManagerBean());</span><br><span class="line">        <span class="keyword">return</span> filter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Security整合WebSocket">Security整合WebSocket</h3><p>文档参考：<a href="https://developer.aliyun.com/article/763747">https://developer.aliyun.com/article/763747</a></p><p><a href="https://blog.csdn.net/achenyuan/article/details/80851512#java-config%E9%85%8D%E7%BD%AE">https://blog.csdn.net/achenyuan/article/details/80851512#java-config配置</a></p><p>HTTP 协议是一种无状态的、无连接的、单向的应用层协议。它采用了请求/响应模型。通信请求只能由客户端发起，服务端对请求做出应答处理。这种通信模型有一个弊端：HTTP 协议无法实现服务器主动向客户端发起消息。<br>这种单向请求的缺点，如果服务器有连续的状态变化，客户端要获知就非常麻烦。大多数 Web 应用程序将通过频繁的异步JavaScript和XML（AJAX）请求实现长轮询。轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。</p><p>WebSocket 连接允许客户端和服务器之间进行全双工通信，以便任一方都可以通过建立的连接将数据推送到另一端。WebSocket 只需要建立一次连接，就可以一直保持连接状态。这相比于轮询方式的不停建立连接显然效率要大大提高。</p><p><font color="red">点对面</font>(对所有在线的用户广播消息)</p><p>首先导入依赖，maven导入方便管理</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入WebSocket的依赖包  maven导入方便管理--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.webjars/sockjs-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sockjs-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.webjars/jquery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jquery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.webjars/stomp-websocket --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>stomp-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.webjars/webjars-locator-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.webjars<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webjars-locator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>WebSocket的配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WebSocket的配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//开启对WebSocket的支持</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置消息代理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//配置一个广播式的消息代理  前缀是&quot;/topic&quot;</span></span><br><span class="line">        registry.enableSimpleBroker(<span class="string">&quot;/topic&quot;</span>);</span><br><span class="line">        <span class="comment">//上面的是通过代理类处理消息  而这里是配置使用方法处理消息 凡是前缀为/app开头的就是通过方法处理消息</span></span><br><span class="line">        registry.setApplicationDestinationPrefixes(<span class="string">&quot;/app&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置连接点  注册STOMP协议的节点，并映射到指定的URL</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//注册一个STOMP协议的endpoint,并指定使用SockJS协议</span></span><br><span class="line">        registry.addEndpoint(<span class="string">&quot;/chat&quot;</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理消息的Controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//当浏览器向服务器发送STOMP请求时，通过@MessageMapping注解来映射/hello地址</span></span><br><span class="line">    <span class="meta">@MessageMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="comment">//当服务器有消息时，会对订阅了@SenfTo的路径的客户端发送消息</span></span><br><span class="line">    <span class="meta">@SendTo(&quot;/topic/greetings&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">greeting</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/webjars/jquery/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/webjars/sockjs-client/sockjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/webjars/stomp-websocket/stomp.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;connect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;连接&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span> <span class="attr">id</span>=<span class="string">&quot;disconnect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;断开连接&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chat&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入聊天内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;send&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;conversation&quot;</span>&gt;</span>群聊进行中....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#connect&quot;</span>).click(</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">/*开启连接方法*/</span></span></span><br><span class="line"><span class="javascript">                    connect()</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            )</span></span><br><span class="line"><span class="javascript">            <span class="comment">//断开连接点击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#disconnect&quot;</span>).click(</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (stompClient != <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//断开连接</span></span></span><br><span class="line"><span class="javascript">                        stompClient.disconnect();</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//设置连接和断开连接按钮的状态</span></span></span><br><span class="line"><span class="javascript">                    setConnected(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            )</span></span><br><span class="line"><span class="javascript">            <span class="comment">//发送按钮点击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#send&quot;</span>).click(</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//连接点代理类 发送连接          将JSON解析成字符串</span></span></span><br><span class="line"><span class="javascript">                    stompClient.send(<span class="string">&quot;/app/hello&quot;</span>,&#123;&#125;,<span class="built_in">JSON</span>.stringify(&#123;<span class="string">&quot;name&quot;</span>:$(<span class="string">&quot;#name&quot;</span>).val(),<span class="string">&quot;content&quot;</span>:$(<span class="string">&quot;#content&quot;</span>).val()&#125;))</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            )</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        )</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> stompClient =<span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">/*name为空时直接返回*/</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (!$(<span class="string">&quot;#name&quot;</span>).val())&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建SockJS 并连接 连接点（/chat）</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> socket=<span class="keyword">new</span> SockJS(<span class="string">&quot;/chat&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建STOMP客户端代理 地址为chat的代理</span></span></span><br><span class="line"><span class="javascript">            stompClient=Stomp.over(socket);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//开启连接</span></span></span><br><span class="line"><span class="javascript">            stompClient.connect(&#123;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">success</span>)</span>&#123;<span class="comment">//成功的回调函数</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//调整连接按钮和断开连接按钮</span></span></span><br><span class="line"><span class="javascript">                setConnected(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//订阅广播地址   当该地址发送消息时 回调函数 msg</span></span></span><br><span class="line"><span class="javascript">                stompClient.subscribe(<span class="string">&quot;/topic/greetings&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//将msg的body的信息解析成JSON</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//showGreeting方法 将接收的信息设置到页面上</span></span></span><br><span class="line"><span class="javascript">                    showGreeting(<span class="built_in">JSON</span>.parse(msg.body));</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//连接和断开连接按钮的状态</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">setConnected</span>(<span class="params">flag</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#connect&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,flag);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#disconnect&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,!flag);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//消息列表的隐藏和显示</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (flag)&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#chat&quot;</span>).show();</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#chat&quot;</span>).hide();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//将消息添加到末尾</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showGreeting</span>(<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#conversation&quot;</span>).append(<span class="string">&quot;&lt;div&gt;&quot;</span>+msg.name+<span class="string">&quot;:&quot;</span>+msg.content+<span class="string">&quot;&lt;/div&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><font color="red">点对点</font>（将消息发送到指定用户上）</p><p>由于引入了用户的概念  ，导入 Security依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置点对点发送的请求路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WebSocket的配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//开启对WebSocket的支持</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketMessageBrokerConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置消息代理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//配置一个广播式的消息代理  前缀是&quot;/topic&quot;  点对点消息路径  前缀是/queue</span></span><br><span class="line">        registry.enableSimpleBroker(<span class="string">&quot;/topic&quot;</span>,<span class="string">&quot;/queue&quot;</span>);</span><br><span class="line">        <span class="comment">//上面的是通过代理类处理消息  而这里是配置使用方法处理消息 凡是前缀为/app开头的就是通过方法处理消息</span></span><br><span class="line">        registry.setApplicationDestinationPrefixes(<span class="string">&quot;/app&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置连接点  注册STOMP协议的节点，并映射到指定的URL</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//注册一个STOMP协议的endpoint,并指定使用SockJS协议</span></span><br><span class="line">        registry.addEndpoint(<span class="string">&quot;/chat&quot;</span>).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点对点的Controller类</p><p>这里使用了SpringBoot的自动配置类 ，SimpMessagingTemplate消息模板，它可以指定用户发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Spring自带的消息模板</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SimpMessagingTemplate messagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当浏览器向服务器发送STOMP请求时，通过@MessageMapping注解来映射/hello地址</span></span><br><span class="line">    <span class="meta">@MessageMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="comment">//当服务器有消息时，会对订阅了@SenfTo的路径的客户端发送消息</span></span><br><span class="line">    <span class="meta">@SendTo(&quot;/topic/greetings&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">greeting</span><span class="params">(Message message)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping(&quot;/one&quot;)</span></span><br><span class="line">    <span class="comment">//点对点聊天</span></span><br><span class="line">    <span class="comment">//Principal当前用户</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">one</span><span class="params">(Principal principal, Chat chat)</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置当前用户的名字</span></span><br><span class="line">        chat.setFrom(principal.getName());</span><br><span class="line">        <span class="comment">//通过convertAndSendToUser方法将消息发送给指定用户名字  接收人的名字   发送的请求  发送的请求体</span></span><br><span class="line">        messagingTemplate.convertAndSendToUser(chat.getTo(),<span class="string">&quot;/queue/greetings&quot;</span>,chat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端页面</p><p><font color="red">注意一旦使用点对点  就要在指定的发送路径上加上/user前缀!!!</font></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/webjars/jquery/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/webjars/sockjs-client/sockjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/webjars/stomp-websocket/stomp.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;connect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;连接&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span> <span class="attr">id</span>=<span class="string">&quot;disconnect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;断开连接&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>接送人<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;toname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;chat&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>请输入聊天内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;send&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;conversation&quot;</span>&gt;</span>群聊进行中....<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#connect&quot;</span>).click(</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">/*开启连接方法*/</span></span></span><br><span class="line"><span class="javascript">                    connect()</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            )</span></span><br><span class="line"><span class="javascript">            <span class="comment">//断开连接点击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#disconnect&quot;</span>).click(</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (stompClient != <span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">//断开连接</span></span></span><br><span class="line"><span class="javascript">                        stompClient.disconnect();</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//设置连接和断开连接按钮的状态</span></span></span><br><span class="line"><span class="javascript">                    setConnected(<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            )</span></span><br><span class="line"><span class="javascript">            <span class="comment">//发送按钮点击事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#send&quot;</span>).click(</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//接收人未指定直接返回</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (!$(<span class="string">&quot;#toname&quot;</span>).val())&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//连接点代理类 发送连接          将JSON解析成字符串</span></span></span><br><span class="line"><span class="javascript">                    stompClient.send(<span class="string">&quot;/app/one&quot;</span>,&#123;&#125;,<span class="built_in">JSON</span>.stringify(&#123;<span class="string">&quot;to&quot;</span>:$(<span class="string">&quot;#toname&quot;</span>).val(),<span class="string">&quot;content&quot;</span>:$(<span class="string">&quot;#content&quot;</span>).val()&#125;))</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            )</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        )</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> stompClient =<span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建SockJS 并连接 连接点（/chat）</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> socket=<span class="keyword">new</span> SockJS(<span class="string">&quot;/chat&quot;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//创建STOMP客户端代理 地址为chat的代理</span></span></span><br><span class="line"><span class="javascript">            stompClient=Stomp.over(socket);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//开启连接</span></span></span><br><span class="line"><span class="javascript">            stompClient.connect(&#123;&#125;,<span class="function"><span class="keyword">function</span> (<span class="params">success</span>)</span>&#123;<span class="comment">//成功的回调函数</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//调整连接按钮和断开连接按钮</span></span></span><br><span class="line"><span class="javascript">                setConnected(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                <span class="comment">//订阅广播地址   当该地址发送消息时 回调函数 msg</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">//注意一旦使用点对点  就要在指定的发送路径上加上/user前缀!!!!!!!!</span></span></span><br><span class="line"><span class="javascript">                stompClient.subscribe(<span class="string">&quot;/user/queue/greetings&quot;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">//将msg的body的信息解析成JSON</span></span></span><br><span class="line"><span class="javascript">                    <span class="comment">//showGreeting方法 将接收的信息设置到页面上</span></span></span><br><span class="line"><span class="javascript">                    showGreeting(<span class="built_in">JSON</span>.parse(msg.body));</span></span><br><span class="line"><span class="javascript">                &#125;);</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//连接和断开连接按钮的状态</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">setConnected</span>(<span class="params">flag</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#connect&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,flag);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#disconnect&quot;</span>).prop(<span class="string">&quot;disabled&quot;</span>,!flag);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//消息列表的隐藏和显示</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (flag)&#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#chat&quot;</span>).show();</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">&quot;#chat&quot;</span>).hide();</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">//将消息添加到末尾</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showGreeting</span>(<span class="params">msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">&quot;#conversation&quot;</span>).append(<span class="string">&quot;&lt;div&gt;&quot;</span>+msg.from+<span class="string">&quot;:&quot;</span>+msg.content+<span class="string">&quot;&lt;/div&gt;&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="报错">报错</h2><h3 id="There-is-no-PasswordEncoder-mapped-for-the-id-“null”">There is no PasswordEncoder mapped for the id “null”</h3><p>该报错是因为我们在往数据库写入密码是没有加上<code>BCryptPasswordEncoder</code><font color="red">特有的ID加密方式</font></p><p>在每一个经过<code>BCryptPasswordEncoder</code>加密的字符串都会有{id}</p><p>我们来看一下官方文档:</p><p>The general format for a password is:</p><p>{id}encodedPassword</p><p>这样，id是一个标识符，用于查找应该使用哪个PasswordEncoder，而encodedPassword是所选PasswordEncoder的原始编码密码。id必须在密码的开头，以{开头，密码}结尾。如果找不到id, 密码将为空。例如，下面可能是使用不同id编码的密码列表。所有原始密码都是“password”</p><p>{bcrypt}$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG</p><p>{noop}password</p><p>{pbkdf2}5d923b44a6d129f3ddf3e3c8d29412723dcbde72445e8ef6bf3b508fbf17fa4ed4d6b99ca763d8dc</p><p>{scrypt}$e0801$8bWJaSu2IKSn9Z9kM+TPXfOc/9bdYSrN1oD9qfVThWEwdRTnO7re7Ei+fUZRJ68k9lTyuTeUp4of4g24hHnazw==$OAOec05+bXxvuu/1qZ6NUR+xQYvYv7BeL1QxwRpY5Pc=</p><p>{sha256}97cde38028ad898ebc02e690819fa220e88c62e0699403e94fff291cfffaf8410849f27605abcbc0</p><p><font color="red">解决方法</font></p><p>在数据库的密码字段上{id}的方式</p><p>尝试{bcrypt},{pbkdf2},{scrypt}</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="/2021/11/06/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/06/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1>Spring</h1><h2 id="1，简介">1，简介</h2><p>Spring框架是由于<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/3448966">软件开发</a>的复杂性而创建的。Spring使用的是基本的JavaBean来完成以前只可能由<a href="https://baike.baidu.com/item/EJB/144195">EJB</a>完成的事情。然而，Spring的用途不仅仅限于服务器端的开发。从简单性、可测试性和松耦合性角度而言，绝大部分Java应用都可以从Spring中受益。</p><h3 id="起源">起源</h3><ul><li>2002年首次推出了Spring的雏形 interface21</li><li>2004年，Spring基于interface21框架为基础，不断地丰富其内涵，于3月24号推出了1.0正式版本</li><li>Spring缔造者<strong>Rod Johnson</strong>，毕业于悉尼大学计算机系但是他还有另一个身份，音乐学的博士</li></ul><p><strong>SSH:</strong>   Struck2+Spring+Hibernate</p><p><strong>SSM:</strong>  SpringMVC+Spring+Mybatis</p><p>注释：</p><ul><li><strong>Struck2</strong>：<em>Struts2</em>是一个基于MVC设计模式的Web应用框架，它本质上相当于一个servlet，在MVC设计模式中，<em>Struts2</em>作为控制器(Controller)来建立模型与视图的数据交互。</li><li><strong>Hibernate</strong>：<em>Hibernate</em>是一个开放源代码的对象关系映射框架，是一个全自动的orm框架，<em>hibernate</em>可以自动生成SQL语句，自动执行，使得Java程序员可以随心所欲的使用对象编程思维来操纵数据库。（但是自由性不高，无法对SQL定制）</li></ul><h3 id="下载">下载</h3><p>GitHub：<a href="https://github.com/spring-projects/spring-framework/releases/tag/v5.3.5">https://github.com/spring-projects/spring-framework/releases/tag/v5.3.5</a></p><p>Maven：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc的一个驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="优点">优点</h3><ul><li>Spring是一个免费的开源的框架（容器）</li><li>Spring是一个轻量级的，非入侵式（加入框架对之前的代码不会有影响）的框架</li><li>Spring是一个控制反转<font color="red">（IOC）</font>，面向切面编程<font color="red">（AOP）</font>的框架</li><li>支持事务的处理，对其他框架的整合</li></ul><h2 id="2，组成">2，组成</h2><p><img src="https://images2017.cnblogs.com/blog/1219227/201709/1219227-20170930225010356-45057485.gif" alt="img"></p><p><strong>1，核心容器（Spring Core）</strong></p><p>核心容器提供Spring框架的基本功能。Spring以bean的方式组织和管理Java应用中的各个组件及其关系。Spring使用BeanFactory来产生和管理Bean，它是工厂模式的实现。BeanFactory使用控制反转(IoC)模式将应用的配置和依赖性规范与实际的应用程序代码分开。</p><p><strong>2，应用上下文（Spring Context）</strong></p><p>Spring上下文是一个配置文件，向Spring框架提供上下文信息。Spring上下文包括企业服务，如JNDI、EJB、电子邮件、国际化、校验和调度功能。</p><p><strong>3，Spring面向切面编程（Spring AOP）</strong></p><p>通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring框架中。所以，可以很容易地使 Spring框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。</p><p><strong>4，JDBC和DAO模块（Spring DAO）</strong></p><p>JDBC、DAO的抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理，和不同数据库供应商所抛出的错误信息。异常层次结构简化了错误处理，并且极大的降低了需要编写的代码数量，比如打开和关闭链接。</p><p><strong>5，对象实体映射（Spring ORM）</strong></p><p>Spring框架插入了若干个ORM框架，从而提供了ORM对象的关系工具，其中包括了Hibernate、JDO和 IBatis SQL Map等，所有这些都遵从Spring的通用事物和DAO异常层次结构。</p><p><strong>6，Web模块（Spring Web）</strong></p><p>Web上下文模块建立在应用程序上下文模块之上，为基于web的应用程序提供了上下文。所以Spring框架支持与Struts集成，web模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</p><p><strong>7，MVC模块（Spring Web MVC）</strong></p><p>MVC框架是一个全功能的构建Web应用程序的MVC实现。通过策略接口，MVC框架变成为高度可配置的。MVC容纳了大量视图技术，其中包括JSP、POI等，模型来有JavaBean来构成，存放于m当中，而视图是一个接口，负责实现模型，控制器表示逻辑代码，由c的事情。Spring框架的功能可以用在任何J2EE服务器当中，大多数功能也适用于不受管理的环境。Spring的核心要点就是支持不绑定到特定J2EE服务的可重用业务和数据的访问的对象，毫无疑问这样的对象可以在不同的J2EE环境，独立应用程序和测试环境之间重用。</p><h2 id="3，IOC理论推导">3，IOC理论推导</h2><h3 id="Web">Web</h3><p>在之前学习JavaWeb时，如果我们想要调用SQL需要Servlice层调用Dao层</p><p>代码如下：</p><p><strong>Dao</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xpp011.dao.Role;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.xpp011.dao.DBCPTool;</span><br><span class="line"><span class="keyword">import</span> cn.xpp011.pojo.Role;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleDaoImpl</span> <span class="keyword">implements</span> <span class="title">RoleDao</span></span>&#123;</span><br><span class="line">    <span class="comment">//获取角色列表</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getrolelist</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection con= DBCPTool.getConnection();</span><br><span class="line">        PreparedStatement ps=<span class="keyword">null</span>;</span><br><span class="line">        ResultSet res=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Role&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        String sql=<span class="string">&quot;select * from smbms_role&quot;</span>;</span><br><span class="line">        Object[] objects=&#123;&#125;;</span><br><span class="line">        res = DBCPTool.execute(con, ps, res, objects, sql);</span><br><span class="line">        <span class="keyword">while</span> (res.next())&#123;</span><br><span class="line">            Role role=<span class="keyword">new</span> Role();</span><br><span class="line">            role.setId(res.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">            role.setRoleCode(res.getString(<span class="string">&quot;roleCode&quot;</span>));</span><br><span class="line">            role.setRoleName(res.getString(<span class="string">&quot;roleName&quot;</span>));</span><br><span class="line">            list.add(role);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DBCPTool.close(con,ps,res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>Servlice</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xpp011.servlice.Role;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.xpp011.dao.DBCPTool;</span><br><span class="line"><span class="keyword">import</span> cn.xpp011.dao.Role.RoleDaoImpl;</span><br><span class="line"><span class="keyword">import</span> cn.xpp011.pojo.Role;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RoleServliceImpl</span> <span class="keyword">implements</span> <span class="title">RoleServlice</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RoleDaoImpl roleDao=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RoleServliceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roleDao=<span class="keyword">new</span> RoleDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取角色列表</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Role&gt; <span class="title">getrolelist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Role&gt; roleList=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            roleList = roleDao.getrolelist();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException throwables) &#123;</span><br><span class="line">            throwables.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> roleList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testgetrolelist</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RoleServliceImpl roleServlice=<span class="keyword">new</span> RoleServliceImpl();</span><br><span class="line">        List&lt;Role&gt; roleList = roleServlice.getrolelist();</span><br><span class="line">        <span class="keyword">for</span> (Role role : roleList) &#123;</span><br><span class="line">            System.out.println(role.getRoleName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时如果我们想要添加其他类型的业务sql,需要在Dao层加入新的类，调用时需要修改Servlice层来创建对应的Dao层类。</p><p>这样我们的代码掌握了控制权，如果添加新的Dao层，就需要修改Servlice层的代码，这样显然是不好的，如果在业务代码量十分大的时候，修改源代码的成本就十分昂贵了。</p><p>那么我们的目标是，当我们添加Dao层时，无需修改其他代码，<font color="red">让代码被动的接受需求</font>，就能调用对应的dao层代码，这样我们就只需要专注于横向的添加dao层代码，其他地方我们无需管理修改，那么这样的代码是健康的，这也就是控制反转（IOC），将代码的控制权，从程序员（手动创建dao对应的Servlice），转交给客户（只需要被动的接受参数，就可以完成对应的dao）。</p><h3 id="IOC">IOC</h3><p>代码如下：</p><p><strong>Dao</strong></p><p><img src="/.cn//C:%5CUsers%5C25001%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210404145940670.png" alt="image-20210404145940670"></p><p><strong>Servlice</strong>  （Set注入）</p><p><img src="/.cn//C:%5CUsers%5C25001%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210404150130468.png" alt="image-20210404150130468"></p><p>最后测试时：我们的客户也就是MyTest，只需去传入参数，就可以执行对应的Dao</p><p><img src="/.cn//C:%5CUsers%5C25001%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210404150158529.png" alt="image-20210404150158529"></p><h3 id="总结：">总结：</h3><p>两种情况之间的区别是巨大的，很多地方都不一样了，仔细思考，之前的所有东西但是由程序去创建的，需要程序员自行创建控制对象，而IOC这是把主动权交给了调用者，我们不再去管对象是怎么创建，怎么控制的了，它只负责一个接口。</p><p><strong>这种思想，从本质上解决了问题，我们程序员不在去管具体对象的创建，而是更多的专注业务层的实现，耦合性大大降低，这也就是IOC的原型！</strong></p><p>注：什么是耦合性：<a href="https://www.zhihu.com/question/21019721">https://www.zhihu.com/question/21019721</a></p><p><img src="/.cn//C:%5CUsers%5C25001%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210404152621192.png" alt="image-20210404152621192"></p><h2 id="4，IOC本质">4，IOC本质</h2><p>oc—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好Ioc呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来深入分析一下：</p><p>●谁控制谁，控制什么：传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IoC是有专门一个容器来创建这些对象，即由Ioc容器来控制对 象的创建；谁控制谁？当然是IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</p><p>●为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</p><p>用图例说明一下，传统程序设计如图，都是主动去创建相关对象然后再组合起来：</p><p><img src="https://pic3.zhimg.com/80/v2-8b4946aa38929d2b7cf05cd7a7a753d8_720w.jpg?source=1940ef5c" alt="img"></p><p>​当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如图所示:</p><p><img src="https://pic4.zhimg.com/80/v2-89e9e078c7705f5db3bbd64356301cac_720w.jpg?source=1940ef5c" alt="img"></p><p><strong>IoC能做什么</strong></p><p>IoC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；<font color="red">有了IoC容器后，把创建和查找依赖对象的控制权交给了容器</font>，由容器进行注入组合对象，所以对象与对象之间是 松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>其实IoC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IoC/DI思想中，应用程序就变成被动的了，被动的等待IoC容器来创建并注入它所需要的资源了。</p><p>IoC很好的体现了面向对象设计法则之一      —— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p><h2 id="5，HelloSpring">5，HelloSpring</h2><p>hello类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>容器配置文件（Beans.xml）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试:实例化容器</p><p>提供给<code>ApplicationContext</code>构造函数的一个或多个位置路径是资源字符串，这些资源字符串使容器可以从各种外部资源（例如本地文件系统，Java等）中加载配置元数据<code>CLASSPATH</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：Hello类中必须有set方法，容器其实终究还是以new创建对象的形式，需要通过set方法修改值</p><h2 id="6，IOC创建对象的原理">6，IOC创建对象的原理</h2><ol><li><p>IOC容器创建对象的方式，是通过类的无参构造器创建出来的，默认！</p></li><li><p>那当我们书写了有参构造时，Java默认就不再提供无参构造时，那么IOC容器怎么实现有参构造器创建对象呢<constructor-arg>标签可以帮助我们实现，name为类属性的名字</constructor-arg></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>总结：</strong></p><ul><li>当我们实例化IOC容器时<code>ApplicationContext context = new ClassPathXmlApplicationContext(&quot;beans.xml&quot;);</code>不管我们是否调用<code>getBean</code>方法，<strong>容器都已经将它管理的类全部示例化</strong></li><li>value和ref的区别 ：value适用于基本类型，而当属性为类时，届时要使用ref</li></ul><h2 id="7，Spring配置">7，Spring配置</h2><h3 id="别名">别名</h3><p>name： bean的id</p><p>alias ：别名名称</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;mytest&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;my&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bean配置">Bean配置</h3><p>id：bean的唯一标识符</p><p>class：指定对象的全限命名</p><p>name：别名 可以去多个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userdao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.dao.UserDaoImpl&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dao,ud&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="import">import</h3><p>import常见于团队开发，主要应用是将其他人开发的IOC配置文件整合到applicationContext.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans2.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8，依赖注入">8，依赖注入</h2><h3 id="基于构造函数注入">基于构造函数注入</h3><p><constructor-arg>标签</constructor-arg></p><p>基本类型使用value属性</p><p>引用类型使用ref属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基于Set注入">基于Set注入</h3><p><img src="/.cn//C:%5CUsers%5C25001%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210404223054540.png" alt="image-20210404223054540"></p><p><strong>属性列表</strong></p><p><code>bean | ref | idref | list | set | map | props | value | null</code></p><p>基本类型注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>引用类型注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;addent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>数组注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nums&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>集合注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;result&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>5<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>6<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>7<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Map注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;addent&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Set注入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>盗贼之海<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>盗贼之海<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注入空值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Properties配置类注入</p><p><strong>注意</strong>：xml文件中<code>&lt;</code>和<code>&amp;</code>是被严格禁止的需要通过<code>&lt;![CDATA[内容]]&gt;</code>来转义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;driver&quot;</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/smbms?serverTimezone=UTC&lt;![CDATA[&amp;]]&gt;characterEncoding=utf8&lt;![CDATA[&amp;]]&gt;useSSl=true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="扩展方式注入">扩展方式注入</h3><h4 id="c命名空间注入">c命名空间注入</h4><p>简化版的<constructor-arg>标签</constructor-arg></p><p>首先在IOC容器配置文件中加入</p><p><code>xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;沈仁雨&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="p命名空间注入">p命名空间注入</h4><p>简化版的<property>标签</property></p><p>首先在IOC容器配置文件中加入</p><p><code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;小癖癖&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>使用c/p命名空间时<strong>必须在配置文件中导入xml约束</strong></li><li>p命名空间无法对复杂类型注入如数组，集合等</li></ul><h3 id="Bean作用域">Bean作用域</h3><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpring.assets%5Cimage-20210405122640743.png" alt="image-20210405122640743"></p><h4 id="单例模式（Spring默认）">单例模式（Spring默认）</h4><p>scope标签值设置为singleton（单例模式）</p><p>单例模式即每一次从IOC容器拿去的对象都是同一个，单例模式避免了一个对象频繁的被创建和销毁</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;小癖癖&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;20&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpring.assets%5Cimage-20210405151945252.png" alt="image-20210405151945252"></p><h4 id="原型模式">原型模式</h4><p>scope标签值设置为prototype（原型模式）</p><p>原型模式和单例模式相反，每一次从IOC容器拿去对象时，都是新new出来的，<strong>单例模式适用于单线程</strong>，多线程的单例，会有脏读，幻读，不可重复读等情况，<strong>所以原型模式适用于多线程</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.pojo.User&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;沈仁雨&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;20&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpring.assets%5Cimage-20210405152003248.png" alt="image-20210405152003248"></p><h2 id="9，Bean自动装配">9，Bean自动装配</h2><h4 id="byName自动装配">byName自动装配</h4><p>根据其他Bean的id名来自动装配</p><p><strong>注意：</strong><font color="red">byName是通过set注入方法后面的名字来进行自动查找上下文的。</font></p><p>也就是<code>public void setDag(Dag dag) &#123;&#125;</code> setDag的Dag，然后将它的<font color="red">首字母转化小写</font>为dag，然后根据这个dag这个名字在上下文中查找</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dag&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.pojo.Dag&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;沈仁雨&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缺点：</strong></p><ul><li>byName时必须保证其他Bean的id，一定是set注入后面名字的首字母小写</li></ul><h4 id="byType自动装配">byType自动装配</h4><p>根据类的类型来自动装配</p><p>由于是根据类型自动装配，所以其他Bean的id可以省略不写</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.pojo.Dag&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;沈仁雨&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>缺点：</strong></p><ul><li>byType时，必须保证其他bean的class类型唯一。</li></ul><h4 id="注解自动装配【重点】">注解自动装配【重点】</h4><p>注释在配置Spring方面比XML更好吗？</p><p>基于注释的配置的引入提出了一个问题，即这种方法是否比XML“更好”。简短的答案是“取决于情况”。长的答案是每种方法都有其优缺点，通常，由开发人员决定哪种策略更适合他们。由于定义方式的不同，注释在声明中提供了很多上下文，从而使配置更短，更简洁。但是，XML擅长连接组件而不接触其源代码或重新编译它们。一些开发人员更喜欢将布线放置在靠近源的位置，而另一些开发人员则认为带注释的类不再是POJO，而且，配置变得分散并且难以控制。</p><p>如果我们需要使用Spring的注解装配，那么我们要先在IOC配置文件中添加注解支持</p><p><strong>注意</strong><code>&lt;context:annotation-config/&gt;</code>标签一定要加上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注解：</strong></p><ul><li>@Autowired注解<ul><li>@Autowired可以加在set方法和属性上</li><li>@Autowired<font color="red">自动装配的步骤</font>是先使用ByType寻找属性对应的类型，如果存在多个相同的类型那么会使用ByName去寻找属性字段名对应的Bean的id</li><li>@Autowired(required = false):@Autowired注解有一个属性required <strong>默认值为true</strong>，表示该属性不能为空，那么required = false时表示该属性可以为空，与注解@Nullable相同</li></ul></li><li>@Qualifier(“XXX”)注解<ul><li>@Qualifier()注解可以和@Autowired注解搭配使用，该注解可以指定一个Bean的id</li></ul></li><li>@Resource注解<ul><li>@Resource注解是Java自带的注解和@Autowired注解类似，不过它实现去找ByName，再去找ByType</li></ul></li></ul><p><strong>案例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> Dag dag;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dag <span class="title">getDag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDag</span><span class="params">(Dag dag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dag = dag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;dag=&quot;</span> + dag +</span><br><span class="line">                <span class="string">&quot;, cat=&quot;</span> + cat +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dag&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.pojo.Dag&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;v&quot;</span> <span class="attr">value</span>=<span class="string">&quot;汪汪汪&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.pojo.Cat&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;v&quot;</span> <span class="attr">value</span>=<span class="string">&quot;喵喵喵&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.pojo.People&quot;</span>  &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;沈仁雨&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10，Spring注解开发">10，Spring注解开发</h2><p>注释在配置Spring方面比XML更好吗？</p><p>基于注释的配置的引入提出了一个问题，即这种方法是否比XML“更好”。简短的答案是“取决于情况”。长的答案是每种方法都有其优缺点，通常，由开发人员决定哪种策略更适合他们。由于定义方式的不同，注释在声明中提供了很多上下文，从而使配置更短，更简洁。但是，XML擅长连接组件而不接触其源代码或重新编译它们。一些开发人员更喜欢将布线放置在靠近源的位置，而另一些开发人员则认为带注释的类不再是POJO，而且，配置变得分散并且难以控制。</p><h3 id="bean">bean</h3><p><strong>如何使用注解来代替bean：</strong><font color="purple">@Component</font>注解</p><p>使用@Component注解的一个前提是在IOC容器配置文件中加入扫描包的标签<code>&lt;context:component-scan base-package=&quot;&quot;/&gt;</code>，该标签会将该包下的@Component标签全部注册到配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;cn.xpp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>该类的名字是类名的小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//相当于是在IOC容器配置文件中&lt;bean id=&quot;people&quot; class=&quot;cn.xpp.pojo.People&quot;/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String v;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作用域">作用域</h3><p>如何使用注解来代替作用域（Scope）：<font color="purple">@Scope（value=“XXX”）</font>注解</p><p>使用@Scope可以声明该类的作用域，当value值为singleton，则为单例模式，当value值为prototype，则为原型模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//相当于是在IOC容器配置文件中&lt;bean id=&quot;people&quot; class=&quot;cn.xpp.pojo.People&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Scope(value = &quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String v;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性注入">属性注入</h3><p>如何使用注解来代替属性注入：<font color="purple">@Value（“”）</font>注解</p><p>该注解适用于基本类型的注入，引用类型需要使用@Autowired自动装配，或者IOC配置文件中注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span><span class="comment">//相当于是在IOC容器配置文件中&lt;bean id=&quot;people&quot; class=&quot;cn.xpp.pojo.People&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Scope(value = &quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;喵喵喵喵&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String v;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="衍生注解">衍生注解</h3><p>@Component有几个衍生注解，在我们的MVC三层架构中不会全部使用@Component注解，那样难以区分</p><ul><li>dao层【@Repository】</li><li>service层【@Service】</li><li>controller层【@Controller】</li></ul><p>这四个注解的作用都一样的，都是代表将某个类注册到IOC容器中，装配Bean</p><h3 id="自动装配注解">自动装配注解</h3><ul><li>@Autowired注解<ul><li>@Autowired可以加在set方法和属性上</li><li>@Autowired<font color="red">自动装配的步骤</font>是先使用ByType寻找属性对应的类型，如果存在多个相同的类型那么会使用ByName去寻找属性字段名对应的Bean的id</li><li>@Autowired(required = false):@Autowired注解有一个属性required <strong>默认值为true</strong>，表示该属性不能为空，那么required = false时表示该属性可以为空，与注解@Nullable相同</li></ul></li><li>@Qualifier(“XXX”)注解<ul><li>@Qualifier()注解可以和@Autowired注解搭配使用，该注解可以指定一个Bean的id</li></ul></li><li>@Resource注解<ul><li>@Resource注解是Java自带的注解和@Autowired注解类似，不过它实现去找ByName，再去找ByType</li></ul></li></ul><h3 id="小结">小结</h3><p>xml与注解</p><ul><li>xml更加万能，适用于任何场合！，维护方便简单</li><li>注解不是自己类使用狐狸哦啊。维护相对复杂！</li></ul><p>xml与注解最佳实践</p><ul><li>xml用来管理bean</li><li>注解只负责属性的注入</li><li>在我们使用过程中，只需要注意一个问题，必须让注解生效，就需要开启注解的支持<code>&lt;context:component-scan base-package=&quot;cn.xpp&quot;/&gt;</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        &quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="11，Java配置Spring">11，Java配置Spring</h2><p>现在我们完全不需要使用Spring的IOC容器xml配置文件了，全权交给Java来做！</p><p>JavaConfig是Spring的一个子项目，在Spring4之后，它成为了一个核心项目</p><p><strong>类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;沈仁雨&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String naem;</span><br><span class="line">    <span class="meta">@Value(&quot;20&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNaem</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> naem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNaem</span><span class="params">(String naem)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.naem = naem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;naem=&#x27;&quot;</span> + naem + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用java类配置IOC容器</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xpp.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.xpp.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//该注解声明了这个类是一个Spring的配置类，等价于之前的beans.xml配置文件</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;cn.xpp.pojo&quot;)</span><span class="comment">//该注解相当于IOC容器的&lt;context:component-scan base-package/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XppConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Bean注解相当于是书写一个&lt;bean&gt;标签</span></span><br><span class="line"><span class="comment">    id属性为该方法的名字getUser</span></span><br><span class="line"><span class="comment">    class属性为方法内返回的类</span></span><br><span class="line"><span class="comment">    返回类的属性可以通过方法设置或者@Value注解注入</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tes</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(XppConfig.class);</span><br><span class="line">        User user = context.getBean(<span class="string">&quot;getUser&quot;</span>, User.class);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注解：</strong></p><ul><li>@Configuration注解<ul><li>该注解声明了这个类是一个Spring的配置类，等价于之前的beans.xml配置文件</li><li>分析源码发现@Configuration注解本身也会被注册到IOC容器中，因为该注解的本身是一个@Component<img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpring.assets%5Cimage-20210405173106312.png" alt="image-20210405173106312"></li></ul></li><li>@Bean注解<ul><li>@Bean注解相当于是书写一个<bean>标签</bean></li><li>id属性为该方法的名字</li><li>class属性为方法内返回的类</li></ul></li><li>@ComponentScan<code>注解</code><ul><li>@ComponentScan注解相当于IOC容器的&lt;context:component-scan base-package/&gt;标签</li><li>它可以帮助我们去寻找指定包下的@Component标签注册到IOC容器当中</li></ul></li></ul><p><strong>注意：</strong></p><ul><li><p>如果我们使用了Java类负责IOC容器，那当我们读取配置文件时（配置类）需要使用到<strong>AnnotationConfigApplicationContext类读取配置类的class对象</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(XppConfig.class);</span><br></pre></td></tr></table></figure></li></ul><h2 id="12，代理模式">12，代理模式</h2><h3 id="12-1代理模式">12.1代理模式</h3><p>**代理模式的定义：**代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpring.assets%5Cimage-20210406134132704.png" alt="image-20210406134132704"></p><p><strong>为什么要用代理模式？</strong></p><ul><li>**中介隔离作用：**在某些情况下，一个客户类不想或者不能直接引用一个委托对象，而代理类对象可以在客户类和委托对象之间起到中介的作用，<strong>其特征是代理类和委托类实现相同的接口</strong>。</li><li>**开闭原则，增加功能：**代理类除了是客户类和委托类的中介之外，我们还可以通过给代理类增加额外的功能来扩展委托类的功能，这样做我们只需要修改代理类而不需要再修改委托类，符合代码设计的开闭原则。</li></ul><h3 id="12-2静态代理模式">12.2静态代理模式</h3><p><strong>角色分析：</strong></p><ul><li>抽象角色：一般会使用接口或者抽象类来解决，用来约束</li><li>真实角色：被代理的角色</li><li>代理角色：代理真实的角色，代理角色之后，我们一般会做一些附属操作</li><li>客户：访问代理角色，来达成需求</li></ul><p>抽象角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//租房接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line">    <span class="comment">//租房方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>真实角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我要租房了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中介类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lanfang();</span><br><span class="line">        System.out.println(<span class="string">&quot;租房&quot;</span>);</span><br><span class="line">        qianhetong();</span><br><span class="line">        shoqian();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lanfang</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;看房源&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qianhetong</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shoqian</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收取中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(<span class="keyword">new</span> Host());</span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpring.assets%5Cimage-20210406135936906.png" alt="image-20210406135936906"></p><p><strong>总结：</strong></p><p>​在这个案例中我们发现我们的真实角色（房东）只实现了租房的接口，向其他的业务它都没有，而当我们的客户去租房时，去找了代理类（中介），代理类帮助我们干了很多事情（看房，签合同，收取房东费）</p><ul><li>使我们的真实角色更加纯粹，不用去关注一些扩展业务，专注于自己</li><li>扩展业务交给了我们的代理类，实现了业务分工</li><li>当我们的扩展业务需要扩充时，只需管理代理类，集中管理（改别人的源码等同于刨人家祖坟）</li></ul><p>缺点：</p><ul><li>每一个真实角色就产生一个代理类，代码量翻倍（动态代理可以解决）</li></ul><p><strong>组合与聚合的区别</strong></p><p>简单来讲，组合是一种较为紧密的关系，从生命周期上看，部分和整体是共存亡的关系。<br>聚合则是一种较为松散的关系，部分和整体的生命周期未必一致。</p><p>**组合：**当我们的代理模式去代理真实对象时，代理类和真实类的生命周期会同时消亡</p><p>**聚合：**当我们的代理模式去代理真实对象时，真实类不会和代理类一起消亡，如图所示</p><p><font color="red">Host类不是代理类内部产生的</font></p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpring.assets%5Cimage-20210406141535912.png" alt="image-20210406141535912"></p><h3 id="12-3动态代理模式">12.3动态代理模式</h3><ul><li>动态代理模式和静态代理模式的角色时一样的</li><li>动态代理的代理类是动态生成的，并不是固定写好的</li><li>动态代理分为两大类：基于接口的动态代理/基于类的动态代理<ul><li>基于接口——JDK的动态代理</li><li>基于类的——cglib</li><li>Java字节码实现：<strong>Javassist:</strong>   (Javassist是一个<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90/20720669">开源</a>的分析、编辑和创建<a href="https://baike.baidu.com/item/Java%E5%AD%97%E8%8A%82%E7%A0%81/13025120">Java字节码</a>的类库。是由<a href="https://baike.baidu.com/item/%E4%B8%9C%E4%BA%AC%E5%B7%A5%E4%B8%9A%E5%A4%A7%E5%AD%A6/2567295">东京工业大学</a>的数学和计算机科学系的 Shigeru Chiba （千叶 滋）所创建的。它已加入了开放源代码<a href="https://baike.baidu.com/item/JBoss/5611767">JBoss</a> <a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8/4971773">应用服务器</a>项目，通过使用Javassist对字节码操作为JBoss实现动态&quot;AOP&quot;框架。)</li></ul></li></ul><p><strong>常用类</strong></p><p><strong>Proxy</strong>（代理）：生成代理实例</p><p><strong>invocationHandler</strong>（调用处理）:每一个代理实例都有一个调用处理程序，也就是代理实例需要实现invocationHandler这个接口</p><p><strong>案例：</strong></p><p>被代理对象，和代理类实现的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.xpp.demo3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Married</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">married</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>被代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">She</span> <span class="keyword">implements</span> <span class="title">Married</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">married</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我结婚了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成动态代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyinvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被代理的类</span></span><br><span class="line">    <span class="keyword">private</span> Married married;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMarried</span><span class="params">(Married married)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.married = married;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到生成的代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        newProxyInstance 生成一个代理类</span></span><br><span class="line"><span class="comment">        this.getClass().getClassLoader() 代理的加载器</span></span><br><span class="line"><span class="comment">        married.getClass() 被代理的类的接口</span></span><br><span class="line"><span class="comment">        this InvocationHandler 每一个代理实例的调用处理程序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), married.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        buzhi();</span><br><span class="line">        Object invoke = method.invoke(married, args);</span><br><span class="line">        shoqian();</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buzhi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;布置场地&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shoqian</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收钱&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>客户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">My</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//被代理对象</span></span><br><span class="line">        She she = <span class="keyword">new</span> She();</span><br><span class="line">        <span class="comment">//实例化动态代理</span></span><br><span class="line">        ProxyinvocationHandler pih = <span class="keyword">new</span> ProxyinvocationHandler();</span><br><span class="line">        <span class="comment">//在动态代理类中设置被代理对象</span></span><br><span class="line">        pih.setMarried(she);</span><br><span class="line">        <span class="comment">//得到代理类</span></span><br><span class="line">        Married proxy = (Married) pih.getProxy();</span><br><span class="line">        <span class="comment">//执行代理类方法</span></span><br><span class="line">        proxy.married();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>理解：</strong></p><p>这里可以和静态代理结合起来理解，我们书写的生成代理类对象必须是实现InvocationHandler接口，通过newProxyInstance生成一个代理实例,当我们去调用代理类的方法时，我们实现接口InvocationHendler的invoke方法来帮我们去执行（通过反射）,所以InvocationHendler在JDK中被解释为调用处理程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    newProxyInstance 生成一个代理类</span></span><br><span class="line"><span class="comment">    this.getClass().getClassLoader() 代理的加载器</span></span><br><span class="line"><span class="comment">    married.getClass().getInterfaces() 被代理的类的接口</span></span><br><span class="line"><span class="comment">    this InvocationHandler 每一个代理实例的调用处理程序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), married.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关键点：</strong></p><p><code>Object invoke = method.invoke(married, args);</code></p><p>通过反射的invoke方法执行被代理类married的方法</p><p>method是代理类married的方法</p><p>args数组存放了需要使用的参数</p><p><strong>那上面那串代码的意思既是对married类将meatod方法执行，参数是args</strong></p><p><strong>一个可以代理任何类的动态代理实例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(<span class="keyword">this</span>.getClass().getClassLoader(), target.getClass().getInterfaces(),<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Object invoke = method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> invoke;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="13，AOP">13，AOP</h2><h3 id="13-1-简介：">13.1  <strong>简介：</strong></h3><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：<a href="https://baike.baidu.com/item/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/6016335">面向切面编程</a>，通过<a href="https://baike.baidu.com/item/%E9%A2%84%E7%BC%96%E8%AF%91/3191547">预编译</a>方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/4035031">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/%E8%80%A6%E5%90%88%E5%BA%A6/2603938">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p><h3 id="13-2-什么时候要用到面向切面AOP呢？">13.2  <strong>什么时候要用到面向切面AOP呢？</strong></h3><p>举个例子，你想给你的网站加上鉴权，</p><p>对某些url，你认为不需要鉴权就可以访问，</p><p>对于某些url，你认为需要有特定权限的用户才能访问</p><p><strong>如果你依然使用OOP，面向对象，</strong></p><p><strong>那你只能在那些url对应的Controller代码里面，一个一个写上鉴权的代码</strong></p><p>而如果你使用了AOP呢？</p><p>那就像使用Spring Security进行安全管理一样简单（更新：Spring Security的拦截是基于Servlet的Filter的，不是aop，不过两者在使用方式上类似）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      http</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">           .antMatchers(<span class="string">&quot;/static&quot;</span>,<span class="string">&quot;/register&quot;</span>).permitAll()</span><br><span class="line">           .antMatchers(<span class="string">&quot;/user/**&quot;</span>).hasRoles(<span class="string">&quot;USER&quot;</span>, <span class="string">&quot;ADMIN&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>这样的做法，对原有代码毫无入侵性，这就是AOP的好处了，把和主业务无关的事情，放到代码外面去做。</strong></p><p>所以当你下次发现某一行代码经常在你的Controller里出现，比如方法入口日志打印，那就要考虑使用AOP来精简你的代码了。</p><h3 id="13-3-使用Spring实现AOP">13.3  使用Spring实现AOP</h3><p>在实现Spring-AOP之前我们需要先导入AOP织入包（因为SpringAOP是在程序运行时通过织入的方式执行）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>AOP 领域中的特性术语：</strong></p><ul><li>通知（Advice）: AOP 框架中的增强处理。通知描述了切面何时执行以及如何执行增强处理。</li><li>连接点（join point）: 连接点表示应用执行过程中能够插入切面的一个点，这个点可以是方法的调用、异常的抛出。在 Spring AOP 中，连接点总是方法的调用。</li><li>切点（PointCut）: 可以插入增强处理的连接点。</li><li>切面（Aspect）: 切面是通知和切点的结合。</li><li>引入（Introduction）：引入允许我们向现有的类添加新的方法或者属性。</li><li>织入（Weaving）: 将增强处理添加到目标对象中，并创建一个被增强的对象，这个过程就是织入。</li></ul><p>代理对象和被代理对象实现的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserImpl</span> <span class="keyword">implements</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询了一个用户&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>扩展业务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//MethodBeforeAdvice 在方法执行前打印</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Method 方法</span></span><br><span class="line"><span class="comment"> * Before 之前</span></span><br><span class="line"><span class="comment"> * Advice  建议（日志）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span>+<span class="keyword">new</span> Date().toLocaleString()+<span class="string">&quot;]&quot;</span>+target.getClass().getName()+<span class="string">&quot;执行了&quot;</span>+method.getName()+<span class="string">&quot;方法。&quot;</span>+<span class="string">&quot;参数：&quot;</span>+args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//AfterReturningAdvice 在方法执行之后打印</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * After之后</span></span><br><span class="line"><span class="comment"> * Returning 返回值</span></span><br><span class="line"><span class="comment"> * Advice 建议（日志）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span>+<span class="keyword">new</span> Date().toLocaleString() +<span class="string">&quot;]&quot;</span>+target.getClass().getName()+<span class="string">&quot;执行了&quot;</span>+method.getName()+<span class="string">&quot;方法 &quot;</span></span><br><span class="line">        +<span class="string">&quot;参数是：&quot;</span>+args+<span class="string">&quot; 返回值：&quot;</span>+returnValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color="red">IOC配置文件</font></p><p><strong>注意一定要添加aop支持</strong><code>xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</code></p><p><code>http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop.xsd</code></p><p>**方式一：**使用Spring的API实现（Log,AfterLog实现的接口）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        &quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userimpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.service.UserImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.Log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterlog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.Log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--pointcut切入点 ：需要在哪里切入</span></span><br><span class="line"><span class="comment">        id 切入点的名字</span></span><br><span class="line"><span class="comment">        execution表达式：* * * * * 任何返回类型  任何包下的任何类 的任何方法 ..随意参数</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;logproxy&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* cn.xpp.service.UserImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--advisor 将需要的扩展业务加入到切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;log&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;logproxy&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;afterlog&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;logproxy&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**方式二：**配置自定义的扩展类</p><p>自定义的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyLog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============执行方法前=================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============执行方法后=================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        &quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userimpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.service.UserImpl&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;log&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.Log.Log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;afterlog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.Log.AfterLog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册自定义的类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;diy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.diy.DiyLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置aop--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切入点pointcut--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* cn.xpp.service.UserImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--设置自定义类的方法--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;diy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--在方法执行之前调用before方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--在方法执行之后调用after方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**方式三：**注解实现AOP</p><p>注意先使用注解AOP时要现在IOC配置文件中加入<code>&lt;aop:aspectj-autoproxy/&gt;</code>开启切面自动装配</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpring.assets%5Cimage-20210409145432188.png" alt="image-20210409145432188"></p><p>被AOP注解描述的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//相当于在beans.xml文件中配置了一个Aspect切面</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyLog</span> </span>&#123;</span><br><span class="line">    <span class="comment">//相当于在切面中写了&lt;aop:before/&gt;标签</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* cn.xpp.service.UserImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============执行方法前=================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于在切面中写了&lt;aop:after/&gt;标签</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(* cn.xpp.service.UserImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=============执行方法后=================&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//相当于在切面中写了&lt;aop:around/&gt;标签</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* cn.xpp.service.UserImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        jp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpring%5C%E7%AC%94%E8%AE%B0%5CSpring.assets%5Cimage-20210409130102895.png" alt="image-20210409130102895"></p><h2 id="14，整合Mybatis">14，整合Mybatis</h2><p>添加Spring-Mybaitis的一些jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Spring-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.xpp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Spring-Mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 以下是资源过滤器 可以在生成项目target时将.XML/.properties配置文件保留 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/test/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>创建IOC容器配置文件，书写数据源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据源  配置数据库的那些东西 现在使用spring提供的类DriverManagerDataSource进行配置注册--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置jdbc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据连接地址--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?serverTimezone=UTC<span class="symbol">&amp;amp;</span>characterEncoding=utf8<span class="symbol">&amp;amp;</span>useSSl=true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置用户--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>书写SqlSessionFactoryBean（相当于原Mybatis的配置文件）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注册SqlSessionFactoryBean相当于通过Spring内置的SqlSessionFactoryBean对象来代替了Mybatis的mybatis-config.xml文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将数据源注入到SqlSessionFactoryBean中--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将Spring的SqlSessionFactoryBean和Mybatis的配置文件关联起来，一起用方便，互通--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--将Mybatis的xml文件注册--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:cn/xpp/dao/*Mapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>书写SqlSessionTemplate（相当于原Mybatis的SqlSession）<font color="red">注意：SqlSessionTemplate是线程安全的和Mybatis的SqlSession不同，它可以进行复用</font></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SqlSessionTemplate相当于Mybatis的SqlSession，可以通过她执行数据库操作--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过构造器将配置文件注入，读取配置文件生成SqlSessionTemplate--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实现*Mapper接口的实现类（服务层）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl</span> <span class="keyword">implements</span> <span class="title">UserMapper</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意这里敢使用同一个sqlSession而不像Mybatis每一次使用new新的sqlSession是因为Spring的SqlSessionTemplate是线程安全的，</span></span><br><span class="line">    <span class="comment">// 可以多次复用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">return</span> mapper.getUserList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将实现类注册到IOC配置文件中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--编写服务层，也就是接口的实现类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.dao.UserMapperImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set注入sqlSession--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSession&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>方式二：</strong></p><p>我们可以将实现类继承一个SqlSessionDaoSupport的类</p><p>通过SqlSessionDaoSupport类的<font color="red">getSqlSession方法</font>会帮助我们生成SqlSessionTemplate（进一步简化代码）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperImpl2</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getSqlSession().getMapper(UserMapper.class).getUserList();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**注意：**在IOC容器注册时只需注入sqlSessionFactory即可（<font color="red">不是sqlSession</font>）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userMapper2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.xpp.dao.UserMapperImpl2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="15，Spring声明式事务">15，Spring声明式事务</h2><p>事务的ACID原则</p><ul><li>原子性</li><li>一致性</li><li>持久性</li><li>隔离性</li></ul><p>事务的重要性不言而喻，在项目中我们一定需要保证数据库的安全，维持ACID原则</p><p>那么如果我们在Spring中配置事务需要做些什么</p><h3 id="Spring开启事务流程">Spring开启事务流程</h3><ol><li><p>要开启 Spring 的事务处理功能，在 Spring 的配置文件中创建一个 <code>DataSourceTransactionManager</code> 对象：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--dataSource配置的数据源--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在Spring配置文件中声明事务的命名空间</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br></pre></td></tr></table></figure></li><li><p>通过AOP织入的方式声明事务</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--通过AOP织入的方式声明事务</span></span><br><span class="line"><span class="comment">advice通知--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;interceptor&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--method方法（支持通配符） propagation事务传播--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将声明式事务注册到AOP中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--pointcut切面 选择从哪里织入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;point&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* cn.xpp.dao.UserMapperImpl3.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;interceptor&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;point&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="事务传播"><strong>事务传播</strong></h3><p>关键字：<code>propagation</code> ，除了第一个REQUIRED，需要记住事务传播有七种</p><ul><li><p>REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 （也是Spring的默认事务）</p></li><li><p>SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。</p></li><li><p>MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。</p></li><li><p>REQUIRES_NEW：新建事务，如果当前存在事务，把当前事务挂起。</p></li><li><p>NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</p></li><li><p>NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。</p></li><li><p>NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。</p></li></ul><h3 id="声明式事务"><strong>声明式事务</strong></h3><p>声明式事务是通过Spring的AOP实现的所以，<strong>它有着不入侵源代码，横向扩展业务的好处</strong></p><h3 id="font-color-red-注意-font"><font color="red">注意</font></h3><p>Spring一次事务只包含实现类的一个方法如：add()方法就是一次事务，而add()和delete()方法是两次事务</p><h2 id="16，重点总结">16，重点总结</h2><ul><li>IOC【重点】</li><li>Bean自动装配【重点】</li><li>Spring注解开发【重点】</li><li>代理模式和AOP【重点】</li><li>声明式事务【重点】</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HelloWord</title>
      <link href="/2021/11/04/hello-world/"/>
      <url>/2021/11/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>目前是把我学习过程中记录的笔记放上来了，后续会更新一些我遇到的问题以及我觉得需要记录的事件又或者是一些有趣的玩意儿。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud学习笔记</title>
      <link href="/2021/11/04/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/04/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>SpringCloud</p><p>各大网站收录的不安全端口列表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>,    <span class="comment">// tcpmux</span></span><br><span class="line"><span class="number">7</span>,    <span class="comment">// echo</span></span><br><span class="line"><span class="number">9</span>,    <span class="comment">// discard</span></span><br><span class="line"><span class="number">11</span>,   <span class="comment">// systat</span></span><br><span class="line"><span class="number">13</span>,   <span class="comment">// daytime</span></span><br><span class="line"><span class="number">15</span>,   <span class="comment">// netstat</span></span><br><span class="line"><span class="number">17</span>,   <span class="comment">// qotd</span></span><br><span class="line"><span class="number">19</span>,   <span class="comment">// chargen</span></span><br><span class="line"><span class="number">20</span>,   <span class="comment">// ftp data</span></span><br><span class="line"><span class="number">21</span>,   <span class="comment">// ftp access</span></span><br><span class="line"><span class="number">22</span>,   <span class="comment">// ssh</span></span><br><span class="line"><span class="number">23</span>,   <span class="comment">// telnet</span></span><br><span class="line"><span class="number">25</span>,   <span class="comment">// smtp</span></span><br><span class="line"><span class="number">37</span>,   <span class="comment">// time</span></span><br><span class="line"><span class="number">42</span>,   <span class="comment">// name</span></span><br><span class="line"><span class="number">43</span>,   <span class="comment">// nicname</span></span><br><span class="line"><span class="number">53</span>,   <span class="comment">// domain</span></span><br><span class="line"><span class="number">77</span>,   <span class="comment">// priv-rjs</span></span><br><span class="line"><span class="number">79</span>,   <span class="comment">// finger</span></span><br><span class="line"><span class="number">87</span>,   <span class="comment">// ttylink</span></span><br><span class="line"><span class="number">95</span>,   <span class="comment">// supdup</span></span><br><span class="line"><span class="number">101</span>,  <span class="comment">// hostriame</span></span><br><span class="line"><span class="number">102</span>,  <span class="comment">// iso-tsap</span></span><br><span class="line"><span class="number">103</span>,  <span class="comment">// gppitnp</span></span><br><span class="line"><span class="number">104</span>,  <span class="comment">// acr-nema</span></span><br><span class="line"><span class="number">109</span>,  <span class="comment">// pop2</span></span><br><span class="line"><span class="number">110</span>,  <span class="comment">// pop3</span></span><br><span class="line"><span class="number">111</span>,  <span class="comment">// sunrpc</span></span><br><span class="line"><span class="number">113</span>,  <span class="comment">// auth</span></span><br><span class="line"><span class="number">115</span>,  <span class="comment">// sftp</span></span><br><span class="line"><span class="number">117</span>,  <span class="comment">// uucp-path</span></span><br><span class="line"><span class="number">119</span>,  <span class="comment">// nntp</span></span><br><span class="line"><span class="number">123</span>,  <span class="comment">// NTP</span></span><br><span class="line"><span class="number">135</span>,  <span class="comment">// loc-srv /epmap</span></span><br><span class="line"><span class="number">139</span>,  <span class="comment">// netbios</span></span><br><span class="line"><span class="number">143</span>,  <span class="comment">// imap2</span></span><br><span class="line"><span class="number">179</span>,  <span class="comment">// BGP</span></span><br><span class="line"><span class="number">389</span>,  <span class="comment">// ldap</span></span><br><span class="line"><span class="number">465</span>,  <span class="comment">// smtp+ssl</span></span><br><span class="line"><span class="number">512</span>,  <span class="comment">// print / exec</span></span><br><span class="line"><span class="number">513</span>,  <span class="comment">// login</span></span><br><span class="line"><span class="number">514</span>,  <span class="comment">// shell</span></span><br><span class="line"><span class="number">515</span>,  <span class="comment">// printer</span></span><br><span class="line"><span class="number">526</span>,  <span class="comment">// tempo</span></span><br><span class="line"><span class="number">530</span>,  <span class="comment">// courier</span></span><br><span class="line"><span class="number">531</span>,  <span class="comment">// chat</span></span><br><span class="line"><span class="number">532</span>,  <span class="comment">// netnews</span></span><br><span class="line"><span class="number">540</span>,  <span class="comment">// uucp</span></span><br><span class="line"><span class="number">556</span>,  <span class="comment">// remotefs</span></span><br><span class="line"><span class="number">563</span>,  <span class="comment">// nntp+ssl</span></span><br><span class="line"><span class="number">587</span>,  <span class="comment">// stmp?</span></span><br><span class="line"><span class="number">601</span>,  <span class="comment">// ??</span></span><br><span class="line"><span class="number">636</span>,  <span class="comment">// ldap+ssl</span></span><br><span class="line"><span class="number">993</span>,  <span class="comment">// ldap+ssl</span></span><br><span class="line"><span class="number">995</span>,  <span class="comment">// pop3+ssl</span></span><br><span class="line"><span class="number">2049</span>, <span class="comment">// nfs</span></span><br><span class="line"><span class="number">3659</span>, <span class="comment">// apple-sasl / PasswordServer</span></span><br><span class="line"><span class="number">4045</span>, <span class="comment">// lockd</span></span><br><span class="line"><span class="number">6000</span>, <span class="comment">// X11</span></span><br><span class="line"><span class="number">6665</span>, <span class="comment">// Alternate IRC</span></span><br><span class="line"><span class="number">6666</span>, <span class="comment">// Alternate IRC</span></span><br><span class="line"><span class="number">6667</span>, <span class="comment">// Standard IRC</span></span><br><span class="line"><span class="number">6668</span>, <span class="comment">// Alternate IRC</span></span><br><span class="line"><span class="number">6669</span>, <span class="comment">// Alternate IRC</span></span><br></pre></td></tr></table></figure><h2 id="CAP-原则与-BASE-理论">CAP 原则与 BASE 理论</h2><p></p><h3 id="CAP-原则">CAP 原则</h3><p></p><p><a href="https://mrhelloworld.com/resources/articles/spring/spring-cloud/nacos/cap.jpg"><img src="https://mrhelloworld.com/resources/articles/spring/spring-cloud/nacos/cap.jpg" alt="/resources/articles/spring/spring-cloud/nacos/cap.jpg"></a></p><p></p><p>CAP 原则又称 CAP 定理，指的是在一个分布式系统中， Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。</p><p>CAP 由 Eric Brewer 在 2000 年 PODC 会议上提出。该猜想在提出两年后被证明成立，成为我们熟知的 CAP 定理。CAP 三者不可兼得。</p><table><thead><tr><th>特性</th><th>定理</th></tr></thead><tbody><tr><td>Consistency</td><td>也叫做数据原子性，系统在执行某项操作后仍然处于一致的状态。在分布式系统中，更新操作执行成功后所有的用户都应该读到最新的值，这样的系统被认为是具有强一致性的。等同于所有节点访问同一份最新的数据副本。</td></tr><tr><td>Availability</td><td>每一个操作总是能够在一定的时间内返回结果，这里需要注意的是&quot;一定时间内&quot;和&quot;返回结果”。一定时间内指的是，在可以容忍的范围内返回结果，结果可以是成功或者是失败。</td></tr><tr><td>Partition tolerance</td><td>在网络分区的情况下，被分隔的节点仍能正常对外提供服务(分布式集群，数据被分布存储在不同的服务器上，无论什么情况，服务器都能正常被访问)。</td></tr></tbody></table><p></p><h4 id="CAP的证明">CAP的证明</h4><p><img src="http://www.hollischuang.com/wp-content/uploads/2016/03/intro_thumb.png" alt="intro_thumb"></p><p>如上图，是我们证明CAP的基本场景，网络中有两个节点N1和N2，可以简单的理解N1和N2分别是两台计算机，他们之间网络可以连通，N1中有一个应用程序A，和一个数据库V，N2也有一个应用程序B2和一个数据库V。现在，A和B是分布式系统的两个部分，V是分布式系统的数据存储的两个子数据库。</p><p>在满足一致性的时候，N1和N2中的数据是一样的，V0=V0。在满足可用性的时候，用户不管是请求N1或者N2，都会得到立即响应。在满足分区容错性的情况下，N1和N2有任何一方宕机，或者网络不通的时候，都不会影响N1和N2彼此之间的正常运作。</p><p><img src="http://www.hollischuang.com/wp-content/uploads/2016/03/scenario1_thumb.png" alt="scenario1_thumb"></p><p>如上图，是分布式系统正常运转的流程，用户向N1机器请求数据更新，程序A更新数据库Vo为V1，分布式系统将数据进行同步操作M，将V1同步的N2中V0，使得N2中的数据V0也更新为V1，N2中的数据再响应N2的请求。</p><p>这里，可以定义N1和N2的数据库V之间的数据是否一样为一致性；外部对N1和N2的请求响应为可用行；N1和N2之间的网络环境为分区容错性。这是正常运作的场景，也是理想的场景，然而现实是残酷的，当错误发生的时候，一致性和可用性还有分区容错性，是否能同时满足，还是说要进行取舍呢？</p><p>作为一个分布式系统，它和单机系统的最大区别，就在于网络，现在假设一种极端情况，N1和N2之间的网络断开了，我们要支持这种网络异常，相当于要满足分区容错性，能不能同时满足一致性和响应性呢？还是说要对他们进行取舍。</p><p><img src="http://www.hollischuang.com/wp-content/uploads/2016/03/scenario2_thumb.png" alt="scenario2_thumb"></p><p>假设在N1和N2之间网络断开的时候，有用户向N1发送数据更新请求，那N1中的数据V0将被更新为V1，由于网络是断开的，所以分布式系统同步操作M，所以N2中的数据依旧是V0；这个时候，有用户向N2发送数据读取请求，由于数据还没有进行同步，应用程序没办法立即给用户返回最新的数据V1，怎么办呢？</p><p>有二种选择，第一，牺牲数据一致性，保证可用性。响应旧的数据V0给用户；</p><p>第二，牺牲可用性，保证数据一致性。阻塞等待，直到网络连接恢复，数据更新操作M完成之后，再给用户响应最新的数据V1。</p><p>这个过程，证明了要满足分区容错性的分布式系统，只能在一致性和可用性两者中，选择其中一个。</p><h4 id="取舍策略">取舍策略</h4><p></p><p>CAP 三个特性只能满足其中两个，那么取舍的策略就共有三种：</p><ul><li><strong>CA without P</strong>：如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但放弃 P 的同时也就意味着放弃了系统的扩展性，也就是分布式节点受限，没办法部署子节点，这是违背分布式系统设计的初衷的。</li><li><strong>CP without A</strong>：如果不要求A（可用），相当于每个请求都需要在服务器之间保持强一致，而P（分区）会导致同步时间无限延长（也就是等待数据同步完才能正常访问服务），一旦发生网络故障或者消息丢失等情况，就要牺牲用户的体验，等待所有数据全部一致了之后再让用户访问系统。设计成 CP 的系统其实不少，最典型的就是分布式数据库，如 Redis、HBase 等。对于这些分布式数据库来说，数据的一致性是最基本的要求，因为如果连这个标准都达不到，那么直接采用关系型数据库就好，没必要再浪费资源来部署分布式数据库。</li><li><strong>AP without C</strong>：要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。典型的应用就如某米的抢购手机场景，可能前几秒你浏览商品的时候页面提示是有库存的，当你选择完商品准备下单的时候，系统提示你下单失败，商品已售完。这其实就是先在 A（可用性）方面保证系统可以正常的服务，然后在数据的一致性方面做了些牺牲，虽然多少会影响一些用户体验，但也不至于造成用户购物流程的严重阻塞。</li></ul><p></p><h4 id="总结">总结</h4><p></p><p>现如今，对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，节点只会越来越多，所以节点故障、网络故障是常态，因此分区容错性也就成为了一个分布式系统必然要面对的问题。那么就只能在 C 和 A 之间进行取舍。但对于传统的项目就可能有所不同，拿银行的转账系统来说，涉及到金钱的对于数据一致性不能做出一丝的让步，C 必须保证，出现网络故障的话，宁可停止服务，可以在 A 和 P 之间做取舍。</p><p>总而言之，没有最好的策略，好的系统应该是根据业务场景来进行架构设计的，只有适合的才是最好的。</p><p></p><h3 id="BASE-理论">BASE 理论</h3><p></p><p>CAP 理论已经提出好多年了，难道真的没有办法解决这个问题吗？也许可以做些改变。比如 C 不必使用那么强的一致性，可以先将数据存起来，稍后再更新，实现所谓的 “最终一致性”。</p><p>这个思路又是一个庞大的问题，同时也引出了第二个理论 BASE 理论。</p><blockquote><p>BASE：全称 Basically Available（基本可用），Soft state（软状态），和 Eventually consistent（最终一致性）三个短语的缩写，来自 ebay 的架构师提出。</p></blockquote><p>BASE 理论是对 CAP 中一致性和可用性权衡的结果，其来源于对大型互联网分布式实践的总结，是基于 CAP 定理逐步演化而来的。其核心思想是：</p><blockquote><p>既然无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。</p></blockquote><p></p><h4 id="Basically-Available（基本可用）">Basically Available（基本可用）</h4><p></p><p>基本可用是指分布式系统在出现故障的时候，允许损失部分可用性（例如响应时间、功能上的可用性）。需要注意的是，基本可用绝不等价于系统不可用。</p><ul><li>响应时间上的损失：正常情况下搜索引擎需要在 0.5 秒之内返回给用户相应的查询结果，但由于出现故障（比如系统部分机房发生断电或断网故障），查询结果的响应时间增加到了 1~2 秒。</li><li>功能上的损失：购物网站在购物高峰（如双十一）时，为了保护系统的稳定性，部分消费者可能会被引导到一个降级页面。</li></ul><p></p><h4 id="Soft-state（软状态）">Soft state（软状态）</h4><p></p><p>什么是软状态呢？相对于原子性而言，要求多个节点的数据副本都是一致的，这是一种 “硬状态”。</p><p>软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布式存储中一般一份数据会有多个副本，允许不同副本数据同步的延时就是软状态的体现。</p><p></p><h4 id="Eventually-consistent（最终一致性）">Eventually consistent（最终一致性）</h4><p></p><p>系统不可能一直是软状态，必须有个时间期限。在期限过后，应当保证所有副本保持数据一致性。从而达到数据的最终一致性。这个时间期限取决于网络延时，系统负载，数据复制方案设计等等因素。</p><p>实际上，不只是分布式系统使用最终一致性，关系型数据库在某个功能上，也是使用最终一致性的，比如备份，数据库的复制都是需要时间的，这个复制过程中，业务读取到的值就是旧值。当然，最终还是达成了数据一致性。这也算是一个最终一致性的经典案例。</p><p></p><h4 id="总结-2">总结</h4><p></p><p>总的来说，BASE 理论面向的是大型高可用可扩展的分布式系统，和传统事务的 ACID 是相反的，它完全不同于 ACID 的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间是不一致的。</p><p></p><h2 id="一，微服务介绍">一，微服务介绍</h2><p><img src="https://spring.io/images/cloud-diagram-1a4cad7294b4452864b5ff57175dd983.svg" alt="Spring Cloud diagram"></p><p>刚开始进入软件行业时还是单体应用的时代，前后端分离的概念都还没普及，开发的时候需要花大量的时间在“强大”的JSP上面，那时候SOA已经算是新技术了。现在，微服务已经大行其道，有哪个互联网产品不说自己是微服务架构呢？</p><p>但是，对于微服务的理解每个人都不太一样，这篇文章主要是聊一聊我对微服务的理解以及如何搭建经典的微服务架构，目的是梳理一下自己的一些想法，如果存在不同看法的欢迎指正！</p><h3 id="什么是微服务">什么是微服务</h3><p>首先，什么是微服务呢？</p><h3 id="单体应用">单体应用</h3><p>相对的，要理解什么是微服务，那么可以先理解什么是单体应用，在没有提出微服务的概念的“远古”年代，一个软件应用，往往会将应用所有功能都开发和打包在一起，那时候的一个B/S应用架构往往是这样的：</p><p><img src="https:////upload-images.jianshu.io/upload_images/7584230-15823c00f06065e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/805/format/webp" alt="img"></p><p>​ <a href>B/S</a></p><p>但是，当用户访问量变大导致一台服务器无法支撑时怎么办呢？加服务器加负载均衡，架构就变成这样了：</p><p><img src="https:////upload-images.jianshu.io/upload_images/7584230-86a2f52455c26c42.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/883/format/webp" alt="img"></p><p>​<a href>B/S+负载均衡</a></p><p>后面发现把静态文件独立出来，通过CDN等手段进行加速，可以提升应用的整体相应，单体应用的架构就变成：</p><p><img src="https:////upload-images.jianshu.io/upload_images/7584230-52d4cbf05f0694c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/928/format/webp" alt="img"></p><p>​<a href>B/S+前后端分离</a></p><p>上面3中架构都还是单体应用，只是在部署方面进行了优化，所以避免不了单体应用的根本的缺点：</p><ul><li>代码臃肿，应用启动时间长；（代码超过1G的项目都有！）</li><li>回归测试周期长，修复一个小小bug可能都需要对所有关键业务进行回归测试。</li><li>应用容错性差，某个小小功能的程序错误可能导致整个系统宕机；</li><li>伸缩困难，单体应用扩展性能时只能整个应用进行扩展，造成计算资源浪费。</li><li>开发协作困难，一个大型应用系统，可能几十个甚至上百个开发人员，大家都在维护一套代码的话，代码merge复杂度急剧增加。</li></ul><h3 id="微服务">微服务</h3><p>我认为任何技术的演进都是有迹可循的，任何新技术的出现都是为了解决原有技术无法解决的需求，所以，微服务的出现就是因为原来单体应用架构已经无法满足当前互联网产品的技术需求。</p><p>在微服务架构之前还有一个概念：SOA（Service-Oriented Architecture）-面向服务的体系架构。我认为的SOA只是一个架构模型的方法论，并不是一个明确而严谨的架构标准，只是后面很多人将SOA与The Open Group的SOA参考模型等同了，认为严格按照TOG-SOA标准的才算真正的SOA架构。SOA就已经提出的面向服务的架构思想，所以微服务应该算是SOA的一种演进吧。</p><p>撇开架构先不说，什么样的服务才算微服务呢？</p><ul><li>单一职责的。一个微服务应该都是单一职责的，这才是“微”的体现，一个微服务解决一个业务问题（注意是一个业务问题而不是一个接口）。</li><li>面向服务的。将自己的业务能力封装并对外提供服务，这是继承SOA的核心思想，一个微服务本身也可能使用到其它微服务的能力。<br><strong>我觉得满足以上两点就可以认为典型的微服务。</strong></li></ul><h3 id="微服务典型架构">微服务典型架构</h3><p>微服务架构，核心是为了解决应用微服务化之后的服务治理问题。</p><p>应用微服务化之后，首先遇到的第一个问题就是服务发现问题，一个微服务如何发现其他微服务呢？最简单的方式就是每个微服务里面配置其他微服务的地址，但是当微服务数量众多的时候，这样做明显不现实。所以需要使用到微服务架构中的一个最重要的组件：<strong>服务注册中心</strong>，所有服务都注册到服务注册中心，同时也可以从服务注册中心获取当前可用的服务清单：</p><p><img src="https:////upload-images.jianshu.io/upload_images/7584230-878e10904e206df0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/750/format/webp" alt="img"></p><p>​ <a href>服务注册中心</a></p><p>解决服务发现问题后，接着需要解决微服务分布式部署带来的第二个问题：服务配置管理的问题。当服务数量超过一定程度之后，如果需要在每个服务里面分别维护每一个服务的配置文件，运维人员估计要哭了。那么，就需要用到微服务架构里面第二个重要的组件：<strong>配置中心</strong>，微服务架构就变成下面这样了：</p><p><img src="https:////upload-images.jianshu.io/upload_images/7584230-9ec9d0d62f548d00.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/753/format/webp" alt="img"></p><p>​<a href>配置中心</a></p><p>以上应用内部的服务治理，当客户端或外部应用调用服务的时候怎么处理呢？服务A可能有多个节点，服务A、服务B和服务C的服务地址都不同，服务授权验证在哪里做？这时，就需要使用到服务网关提供统一的服务入口，最终形成典型微服务架构：</p><p><img src="https:////upload-images.jianshu.io/upload_images/7584230-186f38bae8b64850.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/661/format/webp" alt="img"></p><p>​<a href>典型微服务架构</a></p><p>上面是一个典型的微服务架构，当然微服务的服务治理还涉及很多内容，比如：</p><ul><li>通过熔断、限流等机制保证高可用；</li><li>微服务之间调用的负载均衡；</li><li>分布式事务（2PC、3PC、TCC、LCN等）；</li><li>服务调用链跟踪等等。</li></ul><h3 id="微服务框架">微服务框架</h3><p>目前国内企业使用的微服务框架主要是Spring Cloud和Dubbo（或者DubboX），但是Dubbo那两年的停更严重打击了开发人员对它的信心，Spring Cloud已经逐渐成为主流，比较两个框架的优劣势的文章在网上有很多，这里就不重复了，选择什么框架还是按业务需求来吧，业务框架决定技术框架。<br>Spring Cloud全家桶提供了各种各样的组件，基本可以覆盖微服务的服务治理的方方面面，以下列出了Spring Cloud一些常用组件：</p><p><img src="https:////upload-images.jianshu.io/upload_images/7584230-16df8f7fbee37f37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>​<a href>Spring Cloud常用组件</a></p><h2 id="二，SpringCloud介绍">二，SpringCloud介绍</h2><p>​<img src="/.cn//C:%5CUsers%5C25001%5CDownloads%5CSpringCloud%E6%9E%B6%E6%9E%84.png" alt="SpringCloud架构">  <a href="https://www.processon.com/view/link/612a0d2e637689579630c761">总体架构</a></p><h3 id="什么是Spring-cloud">什么是Spring cloud</h3><blockquote><p>构建分布式系统不需要复杂和容易出错。Spring Cloud 为最常见的分布式系统模式提供了一种简单且易于接受的编程模型，帮助开发人员构建有弹性的、可靠的、协调的应用程序。Spring Cloud 构建于 Spring Boot 之上，使得开发者很容易入手并快速应用于生产中。</p></blockquote><p>官方果然官方，介绍都这么有板有眼的。</p><p>我所理解的 <code>Spring Cloud</code> 就是微服务系统架构的一站式解决方案，在平时我们构建微服务的过程中需要做如 <strong>服务发现注册</strong> 、<strong>配置中心</strong> 、<strong>消息总线</strong> 、<strong>负载均衡</strong> 、<strong>断路器</strong> 、<strong>数据监控</strong> 等操作，而 Spring Cloud 为我们提供了一套简易的编程模型，使我们能在 Spring Boot 的基础上轻松地实现微服务项目的构建。</p><h4 id="Spring-Cloud-的版本">Spring Cloud 的版本</h4><p>当然这个只是个题外话。</p><p>Spring Cloud 的版本号并不是我们通常见的数字版本号，而是一些很奇怪的单词。这些单词均为英国伦敦地铁站的站名。同时根据字母表的顺序来对应版本时间顺序，比如：最早 的 Release 版本 Angel，第二个 Release 版本 Brixton（英国地名），然后是 Camden、 Dalston、Edgware、Finchley、Greenwich、Hoxton。</p><h2 id="三，Eureka">三，Eureka</h2><h3 id="Spring-Cloud-的服务发现框架——Eureka">Spring Cloud 的服务发现框架——Eureka</h3><blockquote><p>Eureka是基于REST（代表性状态转移）的服务，主要在AWS云中用于定位服务，以实现负载均衡和中间层服务器的故障转移。我们称此服务为Eureka服务器。Eureka还带有一个基于Java的客户端组件Eureka Client，它使与服务的交互变得更加容易。客户端还具有一个内置的负载平衡器，可以执行基本的循环负载平衡。在Netflix，更复杂的负载均衡器将Eureka包装起来，以基于流量，资源使用，错误条件等多种因素提供加权负载均衡，以提供出色的弹性。</p></blockquote><p>总的来说，<code>Eureka</code> 就是一个服务发现框架。何为服务，何又为发现呢？</p><p>举一个生活中的例子，就比如我们平时租房子找中介的事情。</p><p>在没有中介的时候我们需要一个一个去寻找是否有房屋要出租的房东，这显然会非常的费力，一你找凭一个人的能力是找不到很多房源供你选择，再者你也懒得这么找下去(找了这么久，没有合适的只能将就)。<strong>这里的我们就相当于微服务中的</strong> <strong><code>Consumer</code></strong> <strong>，而那些房东就相当于微服务中的</strong> **<code>Provider</code> **。<strong>消费者 <code>Consumer</code></strong> <strong>需要调用提供者</strong> <strong><code>Provider</code></strong> <strong>提供的一些服务，就像我们现在需要租他们的房子一样。</strong></p><h4 id="角色">角色</h4><p><strong>服务提供者</strong>： 就是提供一些自己能够执行的一些服务给外界。</p><p><strong>服务消费者</strong>： 就是需要使用一些服务的“用户”。</p><p><strong>服务中介</strong>： 其实就是服务提供者和服务消费者之间的“桥梁”，服务提供者可以把自己注册到服务中介那里，而服务消费者如需要消费一些服务(使用一些功能)就可以在服务中介中寻找注册在服务中介的服务提供者。</p><p>可以充当服务发现的组件有很多：<code>Zookeeper</code> ，<code>Consul</code> ， <code>Eureka</code> 等。</p><h4 id="基础概念">基础概念</h4><ul><li><p><strong>服务注册 Register</strong>：当 <code>Eureka</code> 客户端向 <code>Eureka Server</code> 注册时，它提供自身的元数据，比如IP地址、端口，运行状况指示符URL，主页等。</p></li><li><p><strong>服务续约 Renew</strong>：<code>Eureka</code> 客户会每隔30秒(默认情况下)发送一次心跳来续约。 通过续约来告知 <code>Eureka Server</code> 该 <code>Eureka</code> 客户仍然存在，没有出现问题。 正常情况下，如果 <code>Eureka Server</code> 在90秒没有收到 <code>Eureka</code> 客户的续约，它会将实例从其注册表中删除。</p></li><li><p><strong>获取注册列表信息 Fetch Registries</strong>： <code>Eureka</code> 客户端从服务器获取注册表信息，并将其缓存在本地。客户端会使用该信息查找其他服务，从而进行远程调用。该注册列表信息定期（每30秒钟）更新一次。每次返回注册列表信息可能与 <code>Eureka</code> 客户端的缓存信息不同, <code>Eureka</code> 客户端自动处理。如果由于某种原因导致注册列表信息不能及时匹配，<code>Eureka</code> 客户端则会重新获取整个注册表信息。 <code>Eureka</code> 服务器缓存注册列表信息，整个注册表以及每个应用程序的信息进行了压缩，压缩内容和没有压缩的内容完全相同。<code>Eureka</code> 客户端和 <code>Eureka</code> 服务器可以使用JSON / XML格式进行通讯。在默认的情况下 <code>Eureka</code> 客户端使用压缩 <code>JSON</code> 格式来获取注册列表的信息。</p></li><li><p><strong>服务下线 Cancel</strong>：Eureka客户端在程序关闭时向Eureka服务器发送取消请求。 发送请求后，该客户端实例信息将从服务器的实例注册表中删除。该下线请求不会自动完成，它需要调用以下内容：<code>DiscoveryManager.getInstance().shutdownComponent();</code></p></li><li><p><strong>服务剔除 Eviction</strong>： 在默认的情况下，当Eureka客户端连续90秒(3个续约周期)没有向Eureka服务器发送服务续约，即心跳，Eureka服务器会将该服务实例从服务注册列表删除，即服务剔除。</p></li></ul><h4 id="Eureka架构">Eureka架构</h4><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/11/20/16e86737ea057126~tplv-t2oaga2asx-watermark.awebp" alt="Eureka架构图"></p><p>蓝色的 <code>Eureka Server</code> 是 <code>Eureka</code> 服务器，这三个代表的是集群，而且他们是去中心化的。</p><p>绿色的 <code>Application Client</code> 是 <code>Eureka</code> 客户端，其中可以是<strong>消费者</strong>和<strong>提供者</strong>，最左边的就是典型的提供者，它需要向 <code>Eureka</code> 服务器注册自己和发送心跳包进行续约，而其他消费者则通过 <code>Eureka</code> 服务器来获取提供者的信息以调用他们</p><h4 id="Eureka-与-Zookeeper-对比">Eureka 与 Zookeeper 对比</h4><ul><li>Eureka： <strong>符合AP原则</strong>  为了保证了可用性，<code>Eureka</code> 不会等待集群所有节点都已同步信息完成，它会无时无刻提供服务。</li><li>Zookeeper： <strong>符合CP原则</strong> 为了保证一致性，在所有节点同步完成之前是阻塞状态的。</li></ul><h3 id="创建EurekaServer">创建EurekaServer</h3><p>首先创建一个Maven工程，我们之后所有的SpringCloud组件都将在这个Maven中创建和完善</p><p>在Maven工程中新建一个SpringBoot项目，其中我们勾选<code>Spring Cloud DisCovery</code>中的<code>Eureka</code>依赖</p><p><img src="http://typora.xpp011.cn/typora/img/image-20210828215534455.png" alt="image-20210828215534455"></p><p>我们在SpringBoot启动类上加上注解<code>@EnableEurekaServer</code>，表示启动Eureka服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;SpringApplication.run(EurekaApplication.class, args);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在配置文件中配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#单机版</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">1111</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#应用名称  如果不配置 instance-id 那么此项为客户端在注册中心的名称默认值</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">eureka-server</span></span><br><span class="line"></span><br><span class="line"><span class="meta">eureka.instance.hostname</span>=<span class="string">eureka</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#由于是单机版，eureka现在两重身份——注册中心，微服务应用  所有我们需要不让当前的服务在注册中心注册</span></span><br><span class="line"><span class="comment">#register-with-eureka=false  为取消在注册中心注册</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#由于是注册中心所以不需要从注册中心拉取注册服务信息</span></span><br><span class="line"><span class="comment">#eureka.client.fetch-registry=false 取消获取注册列表信息</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#单机版时需要修改defalutZone默认属性http://localhost:8761</span></span><br><span class="line"><span class="comment">#修改为当前地址端口后，才不会反复注册到localhost:8761</span></span><br><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:1111/eureka</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#猜测主机名时，应该优先使用服务器的IP地址而不是操作系统报告的主机名。</span></span><br><span class="line"><span class="meta">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#开启自我保护</span></span><br><span class="line"><span class="meta">eureka.server.enable-self-preservation</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#自我保护的续约百分比   即15分钟内续约的服务低于百分之85则开启自我保护，暂停剔除服务，并不将数据同步到其他注册中心上</span></span><br><span class="line"><span class="meta">eureka.server.renewal-percent-threshold</span>=<span class="string">0.85</span></span><br></pre></td></tr></table></figure><p>完成配置后我们只需启动服务即可，访问端口1111，就会看到eureka的首页</p><p>首页信息如下</p><p><img src="http://typora.xpp011.cn/typora/img/image-20210828225616988.png" alt="image-20210828225616988"></p><h3 id="Eureka集群">Eureka集群</h3><p>使用了注册中心之后，所有的服务都要通过服务注册中心来进行信息交换。服务注册中心的稳定性就非常重要了，一旦服务注册中心掉线，会影响到整个系统的稳定性。所以，在实际开发中，Eureka 一般都是以集群的形式出现的。</p><p>Eureka 集群，实际上就是启动多个 Eureka 实例，多个 Eureka 实例之间，互相注册，互相同步数据，共同组成一个 Eureka 集群。</p><p>前面单机的时候 eureka注册中心实例名称 是localhost，现在是集群，不能三个实例都是localhost，这里复杂的办法是搞三个虚拟机，麻烦，这里有简单办法，直接配置本机hosts，来实现本机域名映射；</p><p>找到 <strong>C:\Windows\System32\drivers\etc</strong> 打开hosts，加配置</p><p><img src="/.cn//C:%5CUsers%5C25001%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210828233330338.png" alt="image-20210828233330338"></p><p>我们修改一下配置文件</p><p>application-a.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#集群版</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">1111</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#spring服务名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">eureka-a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#当前实例的主机名称</span></span><br><span class="line"><span class="meta">eureka.instance.hostname</span>=<span class="string">eurekaA</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#eureka实例名称</span></span><br><span class="line"><span class="meta">eureka.instance.instance-id</span>=<span class="string">eurekaA</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#集群模式   将注册中心A注册到注册到注册中心B上去</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#集群模式   拉取注册中心B的注册列表信息  确保注册中心的数据一致</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#注册中心的URL  端口1112为注册中心B</span></span><br><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://eurekaB:1112/eureka</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#猜测主机名时，应该优先使用服务器的IP地址而不是操作系统报告的主机名。</span></span><br><span class="line"><span class="meta">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#开启自我保护</span></span><br><span class="line"><span class="meta">eureka.server.enable-self-preservation</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#自我保护的续约百分比   即15分钟内续约的服务低于百分之85则开启自我保护，暂停剔除服务，并不将数据同步到其他注册中心上</span></span><br><span class="line"><span class="meta">eureka.server.renewal-percent-threshold</span>=<span class="string">0.85</span></span><br></pre></td></tr></table></figure><p>application-b.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#集群版</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">1112</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#spring服务名称  如果不配置 instance-id 那么此项为客户端在注册中心的名称默认值</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">eureka-b</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#当前实例的主机名称</span></span><br><span class="line"><span class="meta">eureka.instance.hostname</span>=<span class="string">eurekaB</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#eureka实例名称</span></span><br><span class="line"><span class="meta">eureka.instance.instance-id</span>=<span class="string">eurekaB</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#集群模式   将注册中心B注册到注册到注册中心A上去</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#集群模式   拉取注册中心A的注册列表信息 确保注册中心的数据一致</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#注册中心的URL  端口1111为注册中心A</span></span><br><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://eurekaA:1111/eureka</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#猜测主机名时，应该优先使用服务器的IP地址而不是操作系统报告的主机名。</span></span><br><span class="line"><span class="meta">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#开启自我保护</span></span><br><span class="line"><span class="meta">eureka.server.enable-self-preservation</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#自我保护的续约百分比   即15分钟内续约的服务低于百分之85则开启自我保护，暂停剔除服务，并不将数据同步到其他注册中心上</span></span><br><span class="line"><span class="meta">eureka.server.renewal-percent-threshold</span>=<span class="string">0.85</span></span><br></pre></td></tr></table></figure><p>我们将服务打成jar包分别启动注册中心A和注册中心B</p><p>然后我们分别访问1111和1112即可</p><p><img src="http://typora.xpp011.cn/typora/img/image-20210828233602228.png" alt="image-20210828233602228"></p><h3 id="创建EurekaClient">创建EurekaClient</h3><h4 id="Provider">Provider</h4><p>Proivder供应者</p><p>创建SpringBoot项目时，勾选<code>Web</code>依赖和一个<code>Eureka Discovery Client</code>依赖</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210829162245744.png" alt="image-20210829162245744"></p><ol><li><p>在启动类上加上<code>@EnableEurekaClient</code><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210829185008406.png" alt="image-20210829185008406"></p></li><li><p>书写配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#消费者服务</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#服务名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">provider-application</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#实例名称</span></span><br><span class="line"><span class="meta">eureka.instance.instance-id</span>=<span class="string">provider</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#注册到eureka</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#从eureka拉取服务列表信息</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#注册中心</span></span><br><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:1111/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="meta">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li><li><p>书写一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    Integer port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/provider/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello,Consumer&quot;</span>+name+<span class="string">&quot;,来自Provider:&quot;</span>+port+<span class="string">&quot;的问候&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Consumer">Consumer</h4><p>Consumer消费者</p><p>创建SpringBoot项目时，勾选<code>Web</code>依赖和一个<code>Eureka Discovery Client</code>依赖</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210829165523568.png" alt="image-20210829165523568"></p><ol><li><p>在启动类上加上<code>@EnableEurekaClient</code><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210829185235783.png" alt="image-20210829185235783"></p></li><li><p>书写配置文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#消费者服务</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8081</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#服务名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">consumer-application</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#实例名称</span></span><br><span class="line"><span class="meta">eureka.instance.instance-id</span>=<span class="string">consumer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#注册到eureka</span></span><br><span class="line"><span class="meta">eureka.client.register-with-eureka</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#从eureka拉取服务列表信息</span></span><br><span class="line"><span class="meta">eureka.client.fetch-registry</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#注册中心</span></span><br><span class="line"><span class="meta">eureka.client.service-url.defaultZone</span>=<span class="string">http://localhost:1111/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="meta">eureka.instance.prefer-ip-address</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li><li><p>接口一</p><blockquote><p>​使用固定ip形式，充分体现了，注册中心的重要性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xpp011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2021-08-29 17:09</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不使用eureka提供的服务列表信息,主要先凸显一下注册中心的好处</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello1/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello1</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        HttpURLConnection con=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//注意这里的url是写死的，也就意味着一旦提供服务的服务ip或者端口发生变化，就会波及到当前服务</span></span><br><span class="line">            <span class="comment">//需要修改这里的ip或者端口</span></span><br><span class="line">            URL url=<span class="keyword">new</span> URL(<span class="string">&quot;http://localhost:8080/provider/&quot;</span>+name);</span><br><span class="line">            con = (HttpURLConnection) url.openConnection();</span><br><span class="line">            <span class="keyword">if</span> (con.getResponseCode()==<span class="number">200</span>) &#123;</span><br><span class="line">                BufferedReader stream=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(con.getInputStream()));</span><br><span class="line">                <span class="keyword">return</span> stream.readLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口二</p><blockquote><p>实现了从注册中心拉取服务信息列表</p><p>动态的修改供应者服务ip以及端口号</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xpp011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2021-08-29 17:09</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用eureka提供的discoveryClient来获取服务列表信息</span></span><br><span class="line"><span class="comment">     * 从而动态的获取服务的ip和端口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello2/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//根据服务名称获取服务的实例列表</span></span><br><span class="line">        <span class="comment">//由于同一个服务模块有个服务，也即是集群部署  所以返回值为list</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;PROVIDER-APPLICATION&quot;</span>);</span><br><span class="line">        ServiceInstance serviceInstance = instances.get(<span class="number">0</span>);</span><br><span class="line">        URI uri = serviceInstance.getUri();</span><br><span class="line"></span><br><span class="line">        HttpURLConnection con=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url=<span class="keyword">new</span> URL(uri+<span class="string">&quot;/provider/&quot;</span>+name);</span><br><span class="line">            con = (HttpURLConnection) url.openConnection();</span><br><span class="line">            <span class="keyword">if</span> (con.getResponseCode()==<span class="number">200</span>) &#123;</span><br><span class="line">                BufferedReader stream=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(con.getInputStream()));</span><br><span class="line">                <span class="keyword">return</span> stream.readLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口三</p><ol><li><p>将Provider的jar包启动两个，注意修改第二个Provider的实例名称，不然两个重名在eureka上不显示</p><blockquote><p>$  java -jar Provider-0.0.1-SNAPSHOT.jar --server.por<br>t=8082 --eureka.instance.instance-id=provider2</p></blockquote><blockquote><p>简单实现负载均衡</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xpp011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2021-08-29 17:09</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单实现线性负载均衡</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello3/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello3</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取服务的实例列表</span></span><br><span class="line">        <span class="comment">//由于同一个服务模块有个服务，也即是集群部署  所以返回值为list</span></span><br><span class="line">        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;PROVIDER-APPLICATION&quot;</span>);</span><br><span class="line">        ServiceInstance serviceInstance = instances.get(count++%instances.size());</span><br><span class="line">        URI uri = serviceInstance.getUri();</span><br><span class="line"></span><br><span class="line">        HttpURLConnection con=<span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url=<span class="keyword">new</span> URL(uri+<span class="string">&quot;/provider/&quot;</span>+name);</span><br><span class="line">            con = (HttpURLConnection) url.openConnection();</span><br><span class="line">            <span class="keyword">if</span> (con.getResponseCode()==<span class="number">200</span>) &#123;</span><br><span class="line">                BufferedReader stream=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(con.getInputStream()));</span><br><span class="line">                <span class="keyword">return</span> stream.readLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口四</p><blockquote><p>通过一个支持<code>Ribbon</code>功能的<code>RestTemplate</code>调用请求</p></blockquote><p><strong>Ribbon简介</strong></p><p>Spring Cloud Ribbon是一个基于HTTP和TCP的客户端负载均衡工具，它基于Netflix Ribbon实现。通过Spring Cloud的封装，可以让我们轻松地将面向服务的REST模版请求自动转换成客户端负载均衡的服务调用。Spring Cloud Ribbon虽然只是一个工具类框架，它不像服务注册中心、配置中心、API网关那样需要独立部署，但是它几乎存在于每一个Spring Cloud构建的微服务和基础设施中。因为微服务间的调用，API网关的请求转发等内容，实际上都是通过Ribbon来实现的，包括后续我们将要介绍的Feign，它也是基于Ribbon实现的工具。所以，对Spring Cloud Ribbon的理解和使用，对于我们使用Spring Cloud来构建微服务非常重要。</p><p>我们可以通过注解<code>@LoadBalanced</code>获取一个具有Ribbon功能的RestTemplate</p><blockquote><p>RestTemplate使用手册</p><p><a href="https://www.jianshu.com/p/1bd66db5dc46">https://www.jianshu.com/p/1bd66db5dc46</a></p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​然后我们就可以极其方便的调用其他服务请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello4/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello4</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://PROVIDER-APPLICATION/provider/hello/&quot;</span>+name,String.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>最后我们看一下eureka所展示的页面</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210829190509879.png" alt="image-20210829190509879"></p><h4 id="客户端负载均衡Ribbon">客户端负载均衡Ribbon</h4><ul><li><h5 id="什么是-RestTemplate">什么是 RestTemplate?</h5></li></ul><p>不是讲 <code>Ribbon</code> 么？怎么扯到了 <code>RestTemplate</code> 了？你先别急，听我慢慢道来。</p><p>我不听我不听我不听 。</p><p>我就说一句！<strong><code>RestTemplate</code>是<code>Spring</code>提供的一个访问Http服务的客户端类</strong>，怎么说呢？就是微服务之间的调用是使用的 <code>RestTemplate</code> 。比如这个时候我们 消费者B 需要调用 提供者A 所提供的服务我们就需要这么写。如我下面的伪代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"><span class="comment">// 这里是提供者A的ip地址，但是如果使用了 Eureka 那么就应该是提供者A的名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SERVICE_PROVIDER_A = <span class="string">&quot;http://localhost:8081&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@PostMapping(&quot;/judge&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judge</span><span class="params">(<span class="meta">@RequestBody</span> Request request)</span> </span>&#123;</span><br><span class="line">    String url = SERVICE_PROVIDER_A + <span class="string">&quot;/service1&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> restTemplate.postForObject(url, request, Boolean.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你对源码感兴趣的话，你会发现上面我们所讲的 <code>Eureka</code> 框架中的 <strong>注册</strong>、<strong>续约</strong> 等，底层都是使用的 <code>RestTemplate</code> 。</p><ul><li><h5 id="为什么需要-Ribbon？">为什么需要 Ribbon？</h5></li></ul><p><code>Ribbon</code> 是 <code>Netflix</code> 公司的一个开源的负载均衡 项目，是一个客户端/进程内负载均衡器，<strong>运行在消费者端</strong>。</p><p>我们再举个 ，比如我们设计了一个秒杀系统，但是为了整个系统的 <strong>高可用</strong> ，我们需要将这个系统做一个集群，而这个时候我们消费者就可以拥有多个秒杀系统的调用途径了，如下图。</p><p><img src="https://pic2.zhimg.com/80/v2-658f17773d4ec949a32affb2a7476779_720w.jpg" alt="img"></p><p>如果这个时候我们没有进行一些 <strong>均衡操作</strong> ，如果我们对 <code>秒杀系统1</code> 进行大量的调用，而另外两个基本不请求，就会导致 <code>秒杀系统1</code> 崩溃，而另外两个就变成了傀儡，那么我们为什么还要做集群，我们高可用体现的意义又在哪呢？</p><p>所以 <code>Ribbon</code> 出现了，注意我们上面加粗的几个字——<strong>运行在消费者端</strong>。指的是，<code>Ribbon</code> 是运行在消费者端的负载均衡器，如下图。</p><p><img src="https://pic3.zhimg.com/80/v2-0104febb658f8eeaa626654f5be980d2_720w.jpg" alt="img"></p><p>其工作原理就是 <code>Consumer</code> 端获取到了所有的服务列表之后，在其<strong>内部</strong>使用<strong>负载均衡算法</strong>，进行对多个系统的调用。</p><ul><li><h5 id="Nginx-和-Ribbon-的对比">Nginx 和 Ribbon 的对比</h5></li></ul><p>提到 <strong>负载均衡</strong> 就不得不提到大名鼎鼎的 <code>Nignx</code> 了，而和 <code>Ribbon</code> 不同的是，它是一种<strong>集中式</strong>的负载均衡器。</p><p>何为集中式呢？简单理解就是 <strong>将所有请求都集中起来，然后再进行负载均衡</strong>。如下图。</p><p><img src="https://pic1.zhimg.com/80/v2-4fb6c809e868f2a897f87580f2786d4c_720w.jpg" alt="img"></p><p>我们可以看到 <code>Nginx</code> 是接收了所有的请求进行负载均衡的，而对于 <code>Ribbon</code> 来说它是在消费者端进行的负载均衡。如下图。</p><p><img src="https://pic3.zhimg.com/80/v2-8f08b87f73a9707c9b25a7d711e4b74e_720w.jpg" alt="img"></p><blockquote><p>请注意 <code>Request</code> 的位置，在 <code>Nginx</code> 中请求是先进入负载均衡器，而在 <code>Ribbon</code> 中是先在客户端进行负载均衡才进行请求的。</p></blockquote><ul><li><h5 id="Ribbon-的几种负载均衡算法">Ribbon 的几种负载均衡算法</h5></li></ul><p>负载均衡，不管 <code>Nginx</code> 还是 <code>Ribbon</code> 都需要其算法的支持，如果我没记错的话 <code>Nginx</code> 使用的是 轮询和加权轮询算法。而在 <code>Ribbon</code> 中有更多的负载均衡调度算法，其默认是使用的 <code>RoundRobinRule</code> 轮询策略。</p><ul><li><strong>RoundRobinRule</strong>：轮询策略。<code>Ribbon</code> 默认采用的策略。若经过一轮轮询没有找到可用的 <code>provider</code>，其最多轮询 10 轮。若最终还没有找到，则返回 null。</li><li><strong>RandomRule</strong>: 随机策略，从所有可用的 provider 中随机选择一个。</li><li><strong>RetryRule</strong>: 重试策略。先按照 RoundRobinRule 策略获取 provider，若获取失败，则在指定的时限内重试。默认的时限为 500 毫秒。</li></ul><p>还有很多，这里不一一举 了，你最需要知道的是默认轮询算法，并且可以更换默认的负载均衡算法，只需要在配置文件中做出修改就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">providerName:</span><br><span class="line">  ribbon:</span><br><span class="line">    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule</span><br></pre></td></tr></table></figure><p>当然，在 <code>Ribbon</code> 中你还可以<strong>自定义负载均衡算法</strong>，你只需要实现 <code>IRule</code> 接口，然后修改配置文件或者自定义 <code>Java Config</code> 类。</p><ul><li><p><strong>Ribbon原理概述(背下来)</strong></p><p><font color="red">通过源码分析，个人认为可以拆解为如下部分：</font></p></li></ul><ol><li><strong>获取<code>@LoadBalanced</code>注解标记的<code>RestTemplate</code>。</strong></li><li><strong><code>RestTemplate</code>添加一个拦截器(filter)，当使用<code>RestTemplate</code>发起http调用时进行拦截。</strong></li><li><strong>在filter拦截到该请求时，获取该次请求服务集群的全部列表信息。</strong></li><li><strong>根据规则从集群中选取一个服务作为此次请求访问的目标。</strong></li><li><strong>将<code>originalURI</code>的服务名称通过<code>reconstructURI()</code>方法解析为可访问的<code>IP</code>和端口</strong></li><li><strong>访问该目标，并获取返回结果。</strong></li></ol><p><font color="red">Ribbon现在以及是SpringCloud自带的负载均衡服务了</font></p><h2 id="a-name-ribbon-四，Ribbon源码解析-a"><strong><a name="ribbon">四，Ribbon源码解析</a></strong></h2><p><a href="https://zhuanlan.zhihu.com/p/31744266">Ribbon源码解析参考链接</a> (版本有些老了，和新版代码有些冲突)</p><h3 id="简介"><strong>简介</strong></h3><p>Spring cloud ribbon在spring cloud微服务体系中充当着负载均衡的角色。这个负载均衡指的是客户端的负载均衡。本文是ribbon源码分析系列的第一篇，主要内容如下：</p><ul><li>怎样使用spring cloud ribbon</li><li>ribbon原理概览</li></ul><h3 id="怎样使用Spring-cloud-ribbon"><strong>怎样使用Spring cloud ribbon</strong></h3><p>我们知道ribbon是客户端负载均衡，也就是说在相同的服务集群中选择一个，然后进行访问，并从该服务获取到结果。这里面会引申出一个问题，就是相同服务集群的来源。ribbon有两种方式获取，第一种是通过<code>Eureka</code>(注册中心)，这种方式需要使用ribbon的工程是一个Eureka Client也就是说需要在工程的主函数上使用(<code>@EnableDiscoveryClient</code>),第二种方式是通过<code>properties</code>进行配置。<br>本文主要介绍的是第二种。<br>下面结合一个例子来说明：</p><h3 id="添加对应依赖"><strong>添加对应依赖</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="定义配置类"><strong>定义配置类</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上图所示在该配置类中创建<code>RestTemplate</code>，并且使用<code>@LoadBalanced</code>注解。该注解使得<code>RestTemplate</code>具有了客户端负载均衡的能力。</p><h3 id="properties文件"><strong>properties文件</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=ribbon-client</span><br><span class="line">users.ribbon.listOfServers=http:<span class="comment">//localhost:8081,http://localhost:8082</span></span><br><span class="line">users.ribbon.listOfServers`这个参数很关键，它的含义是指定服务(集群)的地址，其中`users`是自定义的Key。本文中有两个相同的服务，它们的地址分别为`http:<span class="comment">//localhost:8081`以及`http://localhost:8082</span></span><br></pre></td></tr></table></figure><h3 id="定义一个Controller-Ribbon-Client端"><strong>定义一个Controller(Ribbon-Client端)</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;http://users/hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/ribbon&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ribbon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForObject(DemoController.URL, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后端Server代码-8081、8082"><strong>后端Server代码(8081、8082)</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;demo&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;this is 8081 server...&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;demo&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;this is 8082 server...&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时当我们访问[<a href="http://localhost:8080/ribbon%E5%B9%B6%E4%B8%94%E4%B8%8D%E6%96%AD%E5%88%B7%E6%96%B0%E6%B5%8F%E8%A7%88%E5%99%A8(%E5%A4%9A%E6%AC%A1%E8%AE%BF%E9%97%AE%E8%AF%A5%E6%8E%A5%E5%8F%A3)%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0">http://localhost:8080/ribbon并且不断刷新浏览器(多次访问该接口)，我们可以看到</a><code>http://localhost:8081/hello</code>、<code>http://localhost:8082/hello</code>这两个接口反复被调用。(交替返回)<br>至此通过这个例子我们完成了使用ribbon来完成客户端负载均衡的功能，接下来通过源码了解下其中的原理。</p><h3 id="Ribbon原理概览"><strong>Ribbon原理概览</strong></h3><p><font color="red">通过源码分析，个人认为可以拆解为如下部分：</font></p><ol><li><strong>获取<code>@LoadBalanced</code>注解标记的<code>RestTemplate</code>。</strong></li><li><strong><code>RestTemplate</code>添加一个拦截器(filter)，当使用<code>RestTemplate</code>发起http调用时进行拦截。</strong></li><li><strong>在filter拦截到该请求时，获取该次请求服务集群的全部列表信息。</strong></li><li><strong>根据规则从集群中选取一个服务作为此次请求访问的目标。</strong></li><li><strong>将<code>originalURI</code>的服务名称通过<code>reconstructURI()</code>方法解析为可访问的<code>IP</code>和端口</strong></li><li><strong>访问该目标，并获取返回结果。</strong></li></ol><h3 id="获取-LoadBalanced注解标记的RestTemplate。"><strong>获取<a href="https://link.zhihu.com/?target=https%3A//github.com/LoadBalanced">@LoadBalanced</a>注解标记的RestTemplate。</strong></h3><p>Ribbon将所有标记<code>@LoadBalanced</code>注解的<code>RestTemplate</code>保存到一个List集合当中，具体源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> List&lt;RestTemplate&gt; restTemplates = Collections.emptyList();</span><br></pre></td></tr></table></figure><p>具体源码位置是在<code>LoadBalancerAutoConfiguration</code>中。</p><h3 id="RestTemplate添加一个拦截器-filter"><strong>RestTemplate添加一个拦截器(filter)</strong></h3><p>RestTemplate添加拦截器需要有两个步骤，首先是定义一个拦截器，其次是将定义的拦截器添加到RestTemplate中。</p><h3 id="定义一个拦截器"><strong>定义一个拦截器</strong></h3><p>实现<code>ClientHttpRequestInterceptor</code>接口就具备了拦截请求的功能，该接口源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ClientHttpRequestInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *实现该方法，在该方法内完成拦截请求后的逻辑内容。</span></span><br><span class="line"><span class="comment">     *对于ribbon而言，在该方法内完成了根据具体规则从</span></span><br><span class="line"><span class="comment">     *服务集群中选取一个服务，并向该服务发起请求的操作。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="function">ClientHttpResponse <span class="title">intercept</span><span class="params">(HttpRequest request, <span class="keyword">byte</span>[] body, ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ribbon中对应的实现类是<code>LoadBalancerInterceptor</code>(不使用<code>spring-retry</code>的情况下)具体源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalancerInterceptor</span> <span class="keyword">implements</span> <span class="title">ClientHttpRequestInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> LoadBalancerClient loadBalancer;</span><br><span class="line">   <span class="keyword">private</span> LoadBalancerRequestFactory requestFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略构造器代码...</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">intercept</span><span class="params">(<span class="keyword">final</span> HttpRequest request, <span class="keyword">final</span> <span class="keyword">byte</span>[] body,</span></span></span><br><span class="line"><span class="params"><span class="function">         <span class="keyword">final</span> ClientHttpRequestExecution execution)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="keyword">final</span> URI originalUri = request.getURI();</span><br><span class="line">      String serviceName = originalUri.getHost();</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       *拦截请求，并调用loadBalancer.execute()方法</span></span><br><span class="line"><span class="comment">       *在该方法内部完成server的选取。向选取的server</span></span><br><span class="line"><span class="comment">       *发起请求，并获得返回结果。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.loadBalancer.execute(serviceName, requestFactory.createRequest(request, body, execution));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将拦截器添加到RestTemplate中"><strong>将拦截器添加到RestTemplate中</strong></h3><p><code>RestTemplate</code>继承了<code>InterceptingHttpAccessor</code>，在<code>InterceptingHttpAccessor</code>中提供了获取以及添加拦截器的方法，具体源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptingHttpAccessor</span> <span class="keyword">extends</span> <span class="title">HttpAccessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有的拦截器是以一个List集合形式进行保存。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;ClientHttpRequestInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;ClientHttpRequestInterceptor&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 设置拦截器。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInterceptors</span><span class="params">(List&lt;ClientHttpRequestInterceptor&gt; interceptors)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.interceptors = interceptors;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取当前的拦截器。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;ClientHttpRequestInterceptor&gt; <span class="title">getInterceptors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> interceptors;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//省略部分代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这两个方法我们就可以将刚才定义的<code>LoadBalancerInterceptor</code>添加到有<code>@LoadBalanced</code>注解标识的<code>RestTemplate</code>中。具体的源码如下(LoadBalancerAutoConfiguration)省略部分代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalancerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 获取所有带有<span class="doctag">@LoadBalanced</span>注解的restTemplate</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="meta">@LoadBalanced</span></span><br><span class="line">   <span class="meta">@Autowired(required = false)</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;RestTemplate&gt; restTemplates = Collections.emptyList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建SmartInitializingSingleton接口的实现类。Spring会在所有</span></span><br><span class="line"><span class="comment">     * 单例Bean初始化完成后回调该实现类的afterSingletonsInstantiated()</span></span><br><span class="line"><span class="comment">     * 方法。在这个方法中会为所有被<span class="doctag">@LoadBalanced</span>注解标识的</span></span><br><span class="line"><span class="comment">     * RestTemplate添加ribbon的自定义拦截器LoadBalancerInterceptor。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> SmartInitializingSingleton <span class="title">loadBalancedRestTemplateInitializer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">         <span class="keyword">final</span> List&lt;RestTemplateCustomizer&gt; customizers)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> SmartInitializingSingleton() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterSingletonsInstantiated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (RestTemplate restTemplate : LoadBalancerAutoConfiguration.<span class="keyword">this</span>.restTemplates) &#123;</span><br><span class="line">               <span class="keyword">for</span> (RestTemplateCustomizer customizer : customizers) &#123;</span><br><span class="line">                  customizer.customize(restTemplate);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Ribbon自定义拦截器LoadBalancerInterceptor</span></span><br><span class="line"><span class="comment">     * 创建前提是当前classpath下不存在spring-retry。</span></span><br><span class="line"><span class="comment">     * 所以LoadBalancerInterceptor是默认的Ribbon拦截</span></span><br><span class="line"><span class="comment">     * 请求的拦截器。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingClass(&quot;org.springframework.retry.support.RetryTemplate&quot;)</span></span><br><span class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalancerInterceptorConfig</span> </span>&#123;</span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> LoadBalancerInterceptor <span class="title">ribbonInterceptor</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            LoadBalancerClient loadBalancerClient,</span></span></span><br><span class="line"><span class="params"><span class="function">            LoadBalancerRequestFactory requestFactory)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> LoadBalancerInterceptor(loadBalancerClient, requestFactory);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 添加拦截器具体方法。首先获取当前拦截器集合(List)</span></span><br><span class="line"><span class="comment">       * 然后将loadBalancerInterceptor添加到当前集合中</span></span><br><span class="line"><span class="comment">       * 最后将新的集合放回到restTemplate中。</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> RestTemplateCustomizer <span class="title">restTemplateCustomizer</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">final</span> LoadBalancerInterceptor loadBalancerInterceptor)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> RestTemplateCustomizer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(RestTemplate restTemplate)</span> </span>&#123;</span><br><span class="line">               List&lt;ClientHttpRequestInterceptor&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(</span><br><span class="line">                     restTemplate.getInterceptors());</span><br><span class="line">               list.add(loadBalancerInterceptor);</span><br><span class="line">               restTemplate.setInterceptors(list);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此知道了ribbon拦截请求的基本原理，接下来我们看看Ribbon是怎样选取server的。</p><h3 id="Ribbon选取server原理概览"><strong>Ribbon选取server原理概览</strong></h3><p>通过上面的介绍我们知道了当发起请求时ribbon会用<code>LoadBalancerInterceptor</code>这个拦截器进行拦截。并在接口<code>LoadBalancerClient</code>的实现类<code>BlockingLoadBalancerClient.execute()</code>该方法具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(String serviceId, LoadBalancerRequest&lt;T&gt; request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    String hint = getHint(serviceId);</span><br><span class="line">    LoadBalancerRequestAdapter&lt;T, DefaultRequestContext&gt; lbRequest = <span class="keyword">new</span> LoadBalancerRequestAdapter&lt;&gt;(request,</span><br><span class="line">            <span class="keyword">new</span> DefaultRequestContext(request, hint));</span><br><span class="line">    Set&lt;LoadBalancerLifecycle&gt; supportedLifecycleProcessors = getSupportedLifecycleProcessors(serviceId);</span><br><span class="line">    supportedLifecycleProcessors.forEach(lifecycle -&gt; lifecycle.onStart(lbRequest));</span><br><span class="line">    <span class="comment">//根据规则选择一个服务实例</span></span><br><span class="line">    ServiceInstance serviceInstance = choose(serviceId, lbRequest);</span><br><span class="line">    <span class="keyword">if</span> (serviceInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        supportedLifecycleProcessors.forEach(lifecycle -&gt; lifecycle.onComplete(</span><br><span class="line">                <span class="keyword">new</span> CompletionContext&lt;&gt;(CompletionContext.Status.DISCARD, lbRequest, <span class="keyword">new</span> EmptyResponse())));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;No instances available for &quot;</span> + serviceId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> execute(serviceId, serviceInstance, lbRequest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(String serviceId, ServiceInstance serviceInstance, LoadBalancerRequest&lt;T&gt; request)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    DefaultResponse defaultResponse = <span class="keyword">new</span> DefaultResponse(serviceInstance);</span><br><span class="line">    Set&lt;LoadBalancerLifecycle&gt; supportedLifecycleProcessors = getSupportedLifecycleProcessors(serviceId);</span><br><span class="line">    Request lbRequest = request <span class="keyword">instanceof</span> Request ? (Request) request : <span class="keyword">new</span> DefaultRequest&lt;&gt;();</span><br><span class="line">    supportedLifecycleProcessors</span><br><span class="line">            .forEach(lifecycle -&gt; lifecycle.onStartRequest(lbRequest, <span class="keyword">new</span> DefaultResponse(serviceInstance)));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//将URi的服务名称替换为服务实例可访问的ip和端口</span></span><br><span class="line">        T response = request.apply(serviceInstance);</span><br><span class="line">        Object clientResponse = getClientResponse(response);</span><br><span class="line">        supportedLifecycleProcessors</span><br><span class="line">                .forEach(lifecycle -&gt; lifecycle.onComplete(<span class="keyword">new</span> CompletionContext&lt;&gt;(CompletionContext.Status.SUCCESS,</span><br><span class="line">                        lbRequest, defaultResponse, clientResponse)));</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException iOException) &#123;</span><br><span class="line">        supportedLifecycleProcessors.forEach(lifecycle -&gt; lifecycle.onComplete(</span><br><span class="line">                <span class="keyword">new</span> CompletionContext&lt;&gt;(CompletionContext.Status.FAILED, iOException, lbRequest, defaultResponse)));</span><br><span class="line">        <span class="keyword">throw</span> iOException;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        supportedLifecycleProcessors.forEach(lifecycle -&gt; lifecycle.onComplete(</span><br><span class="line">                <span class="keyword">new</span> CompletionContext&lt;&gt;(CompletionContext.Status.FAILED, exception, lbRequest, defaultResponse)));</span><br><span class="line">        ReflectionUtils.rethrowRuntimeException(exception);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过代码我们可知，首先创建一个<code>ILoadBalancer</code>，这个<code>ILoadBalancer</code>是Ribbon的核心类。可以理解成它包含了选取服务的规则(<code>IRule</code>)、服务集群的列表(<code>ServerList</code>)、检验服务是否存活(<code>IPing</code>)等特性，同时它也具有了根据这些特性从服务集群中选取具体一个服务的能力。</p><p><code>Server server = getServer(loadBalancer);</code>这行代码就是选取举一个具体server。</p><p>最终调用了内部的<code>execute</code>方法，该方法代码如下(只保留了核心代码)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(String serviceId, ServiceInstance serviceInstance, LoadBalancerRequest&lt;T&gt; request)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//发起调用</span></span><br><span class="line">      T returnVal = request.apply(serviceInstance);</span><br><span class="line">      statsRecorder.recordStats(returnVal);</span><br><span class="line">      <span class="keyword">return</span> returnVal;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">      statsRecorder.recordStats(ex);</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      statsRecorder.recordStats(ex);</span><br><span class="line">      ReflectionUtils.rethrowRuntimeException(ex);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来看下<code>request.apply(serviceInstance)</code>方法的具体做了那些事情(LoadBalancerRequestFactory中)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">apply</span><span class="params">(<span class="keyword">final</span> ServiceInstance instance)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   HttpRequest serviceRequest = <span class="keyword">new</span> ServiceRequestWrapper(request, instance, loadBalancer);</span><br><span class="line">   <span class="comment">//省略部分代码...</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 发起真正请求。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">return</span> execution.execute(serviceRequest, body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里整体流程的原理就说完了，接下来我们结合一张图来回顾下整个过程：</p><p><img src="https://pic3.zhimg.com/80/v2-05b0cfff0ccb3fc5093b4581d3d7399a_720w.jpg" alt="img"></p><p>首先获取所有标识<code>@LoadBalanced</code>注解的<code>RestTemplate</code>(可以理解成获取那些开启了Ribbon负载均衡功能的<code>RestTemplate</code>)，然后将Ribbon默认的拦截器<code>LoadBalancerInterceptor</code>添加到<code>RestTemplate</code>中，这样当使用<code>RestTemplate</code>发起http请求时就会起到拦截的作用。当有请求发起时，ribbon默认的拦截器首先会创建<code>ILoadBalancer</code>(里面包含了选取服务的规则(<code>IRule</code>)、服务集群的列表(<code>ServerList</code>)、检验服务是否存活(<code>IPing</code>)等特性)。在代码层面的含义是加载<code>RibbonClientConfiguration</code>配置类)。然后使用<code>ILoadBalancer</code>从服务集群中选择一个服务，最后向这个服务发送请求。</p><h2 id="五，Consul">五，Consul</h2><h3 id="简介-2">简介</h3><p>Consul 是 HashiCorp 公司推出的开源产品，用于实现分布式系统的服务发现、服务隔离、服务配置，这些功能中的每一个都可以根据需要单独使用，也可以同时使用所有功能。Consul 官网目前主要推 Consul 在服务网格中的使用。</p><p>与其它分布式服务注册与发现的方案相比，Consul 的方案更“一站式”——内置了<strong>服务注册与发现框架</strong>、<strong>分布一致性协议实现</strong>、<strong>健康检查</strong>、<strong>Key/Value 存储</strong>、多数据中心方案，不再需要依赖其它工具。Consul 本身使用 go 语言开发，具有跨平台、运行高效等特点，也非常方便和 Docker 配合使用。</p><p>Consul 的主要特点有：</p><ul><li><p><strong>Service Discovery :</strong></p><blockquote><p>服务注册与发现，Consul 的客户端可以做为一个服务注册到 Consul，也可以通过 Consul 来查找特定的服务提供者，并且根据提供的信息进行调用。</p></blockquote></li><li><p><strong>Health Checking</strong>:</p><blockquote><p>Consul 客户端会定期发送一些健康检查数据和服务端进行通讯，判断客户端的状态、内存使用情况是否正常，用来监控整个集群的状态，防止服务转发到故障的服务上面。</p></blockquote></li><li><p><strong>KV Store</strong>:</p><blockquote><p>Consul 还提供了一个容易使用的键值存储。这可以用来保持动态配置，协助服务协调、建立 Leader 选举，以及开发者想构造的其它一些事务。</p></blockquote></li><li><p><strong>Secure Service Communication</strong>:</p><blockquote><p>Consul 可以为服务生成分布式的 TLS 证书，以建立相互的 TLS 连接。 可以使用 intentions 定义允许哪些服务进行通信。 可以使用 intentions 轻松管理服务隔离，而不是使用复杂的网络拓扑和静态防火墙规则。</p></blockquote></li><li><p><strong>Multi Datacenter</strong>:</p><blockquote><p>Consul 支持开箱即用的多数据中心，这意味着用户不需要担心需要建立额外的抽象层让业务扩展到多个区域。</p></blockquote></li></ul><p><strong>Consul 角色:</strong></p><ul><li><p>Server: 服务端, 保存配置信息, 高可用集群, 在局域网内与本地客户端通讯, 通过广域网与其它数据中心通讯。 每个数据中心的 Server 数量推荐为 3 个或是 5 个。</p></li><li><p>Client: 客户端, 无状态, 将 HTTP 和 DNS 接口请求转发给局域网内的服务端集群。</p></li></ul><p>Consul 旨在对 DevOps 社区和应用程序开发人员友好，使其成为现代、弹性基础架构的理想选择。</p><h3 id="使用Consul-的优势">使用Consul 的优势</h3><p>使用 Raft 算法来保证一致性, 比复杂的 Paxos 算法更直接。相比较而言, zookeeper 采用的是 Paxos, 而 etcd 使用的则是 Raft。</p><p>支持多数据中心，内外网的服务采用不同的端口进行监听。多数据中心集群可以避免单数据中心的单点故障，而其部署则需要考虑网络延迟, 分片等情况等。 zookeeper 和 etcd 均不提供多数据中心功能的支持。</p><p>支持健康检查。 etcd 不提供此功能。</p><p>支持 http 和 dns 协议接口。 zookeeper 的集成较为复杂, etcd 只支持 http 协议。</p><p>官方提供 Web 管理界面, etcd 无此功能。</p><p>Consul 保持了 CAP 中的 CP，保持了强一致性和分区容错性。</p><p>Consul 支持 Http\gRPC\DNS 多种访问方式。</p><h3 id="Consul-的调用过程">Consul 的调用过程</h3><p>首先我们根据一张图来了解一下 Consul 服务调用过程：</p><p><img src="https://img-blog.csdnimg.cn/20190708203002230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3F3ZTg2MzE0,size_16,color_FFFFFF,t_70" alt></p><p>1、当 Producer 启动的时候，会向 Consul 发送一个 post 请求，告诉 Consul 自己的 IP 和 Port；</p><p>2、Consul 接收到 Producer 的注册后，每隔 10s（默认）会向 Producer 发送一个健康检查的请求，检验 Producer 是否健康；</p><p>3、当 Consumer 发送 GET 方式请求 /api/address 到 Producer 时，会先从 Consul 中拿到一个存储服务 IP 和 Port 的临时表，从表中拿到 Producer 的 IP 和 Port 后再发送 GET 方式请求 /api/address；</p><p>4、该临时表每隔 10s 会更新，只包含有通过了健康检查的 Producer。</p><p>Spring Cloud Consul 项目是针对 Consul 的服务治理实现。Consul 是一个分布式高可用的系统，它包含多个组件，但是作为一个整体，在微服务架构中，为我们的基础设施提供服务发现和服务配置的工具。</p><h3 id="Consul-和-eureka的对比">Consul 和 eureka的对比</h3><p>我们先来通过一个表格做简单对比</p><table><thead><tr><th>Feature</th><th>Euerka</th><th>Consul</th></tr></thead><tbody><tr><td>服务健康检查</td><td>可配支持</td><td>服务状态，内存，硬盘等</td></tr><tr><td>多数据中心</td><td>—</td><td>支持</td></tr><tr><td>kv 存储服务</td><td>—</td><td>支持</td></tr><tr><td>一致性</td><td>—</td><td>raft</td></tr><tr><td>cap</td><td>ap</td><td>cp</td></tr><tr><td>使用接口(多语言能力)</td><td>http（sidecar）</td><td>支持 http 和 dns</td></tr><tr><td>watch 支持</td><td>支持 long polling/大部分增量</td><td>全量/支持long polling</td></tr><tr><td>自身监控</td><td>metrics</td><td>metrics</td></tr><tr><td>安全</td><td>—</td><td>acl /https</td></tr><tr><td>编程语言</td><td>Java</td><td>go</td></tr><tr><td>Spring Cloud 集成</td><td>已支持</td><td>已支持</td></tr></tbody></table><p>通过对比可以得知， Consul 功能更强大，Euerka 更容易使用。</p><p><strong>Consul 强一致性©带来的是：</strong></p><p>服务注册相比 Eureka 会稍慢一些。因为 Consul 的 raft 协议要求必须过半数的节点都写入成功才认为注册成功,。Leader 挂掉时，重新选举期间整个 Consul 不可用。保证了强一致性但牺牲了可用性。</p><p>Consul 强烈的一致性意味着它可以作为领导选举和集群协调的锁定服务。</p><p><strong>Eureka 保证高可用(A)和最终一致性：</strong></p><p>服务注册相对要快，因为不需要等注册信息 replicate 到其它节点，也不保证注册信息是否 replicate 成功。当数据出现不一致时，虽然 A, B 上的注册信息不完全相同，但每个 Eureka 节点依然能够正常对外提供服务，这会出现查询服务信息时如果请求 A 查不到，但请求 B 就能查到。如此保证了可用性但牺牲了一致性。</p><h3 id="安装">安装</h3><h3 id="windows安装">windows安装</h3><p>Consul 不同于 Eureka 是由 go 语言开发而成，因此需要我们单独来安装。</p><p>打开 <a href="https://www.consul.io/">Consul</a>官网根据不同的操作系统选择最新的 Consul 版本，我们这里以 Windows 64 操作系统为例，可以看出 Consul 目前的最新版本为 1.10.2</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210905175006524.png" alt="image-20210905175006524"></p><p>下载下来是一个 consul_1.4.4_windows_amd64.zip 的压缩包，解压是一个 consul.exe 的执行文件。</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210905180346665.png" alt="image-20210905180346665"></p><p>cd 到对应的目录下，使用 cmd 启动 Consul：</p><blockquote><p>cd D:\Common Files\consul</p></blockquote><p>#cmd启动： consul agent -dev # -dev表示开发模式运行，另外还有-server表示服务模式运行</p><p>为了方便启动，可以在同级目录下创建一个 run.bat 脚本来启动，脚本内容如下：</p><blockquote><p>@echo off</p><p>rem -dev开发模式启动   -server服务器启动<br>consul agent -dev</p></blockquote><p>下次启动的时候直接双击 run.bat 文件即可；当然也可以把 consul 的 exe 文件路径加入到本机的 path 路径下，这样后期只需要在 cmd 命令行下运行</p><p>执行命令后，命令行会输出如下信息：</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210905180405626.png" alt="image-20210905180405626"></p><p>启动成功之后访问：localhost:8500,就可以看到Consul的管理界面</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210905180419978.png" alt="image-20210905180419978"></p><p>Consul 的 Web 管理界面有一些菜单，我们这里做一下简单的介绍：</p><ul><li><p><strong>Services</strong></p><blockquote><p>管理界面的默认页面，用来展示注册到 Consul 的服务，启动后默认会有一个 consul 服务，也就是它本身。</p></blockquote></li><li><p><strong>Nodes</strong></p><blockquote><p>在 Services 界面双击服务名就会来到 Services 对于的 Nodes 界面，Services 是按照服务的抽象来展示的，Nodes 展示的是此服务的具体节点信息。比如启动了两个订单服务实例，Services 界面会出现一个订单服务，Nodes 界面会展示两个订单服务的节点。</p></blockquote></li><li><p><strong>Key/Value</strong></p><blockquote><p>如果有用到 Key/Value 存储，可以在界面进行配置、查询。</p></blockquote></li><li><p><strong>Intentions</strong></p><blockquote><p>可以在页面配置请求权限。</p></blockquote></li></ul><p>当我们看到这个页面后，也就意味着 Consul 已经安装成功了。</p><h3 id="Linux安装">Linux安装</h3><p>下载Consul</p><blockquote><p>sudo  wget <a href="https://releases.hashicorp.com/consul/1.10.2/consul_1.10.2_linux_amd64.zip">https://releases.hashicorp.com/consul/1.10.2/consul_1.10.2_linux_amd64.zip</a></p></blockquote><p>解压Consul.zip文件</p><blockquote><p>sudo   unzip consul_1.10.2_linux_amd64.zip</p></blockquote><p>启动</p><p>-dev表示开发环境允许     -node后面则是consul的名称</p><blockquote><p>./consul agent -dev -ui -node=consul-dev -client=192.168.32.131</p></blockquote><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210905215249994.png" alt="image-20210905215249994"></p><p>此时我们的注册中心就创建好了(Consul是一个独立的服务)</p><h3 id="注册服务">注册服务</h3><p>创建一个SpringBoot工程</p><p>加入以下依赖</p><ul><li>Spring Web</li><li>Consul Discovery</li><li>Spring Boot Actuator</li></ul><p>由于Consul具有服务健康检查功能，所以我们需要加入<code>Spring Boot Actuator</code>依赖，将该服务的健康信息加载到<code>Consul</code>中</p><p><strong>Spring boot actuator介绍</strong><br>Spring Boot包含许多其他功能，可帮助您在将应用程序推送到生产环境时监视和管理应用程序。</p><p>您可以选择使用HTTP端点或JMX来管理和监视应用程序。</p><p>审核，运行状况和指标收集也可以自动应用于您的应用程序。</p><p>总之Spring Boot Actuator就是一款可以帮助你监控系统数据的框架,其可以监控很多很多的系统数据,它有对应用系统的自省和监控的集成功能，可以查看应用配置的详细信息,如:</p><ul><li><p>显示应用程序员的Health健康信息</p></li><li><p>显示Info应用信息</p></li><li><p>显示HTTP Request跟踪信息</p></li><li><p>显示当前应用程序的“Metrics”信息</p></li><li><p>显示所有的@RequestMapping的路径信息</p></li><li><p>显示应用程序的各种配置信息</p></li><li><p>显示你的程序请求的次数 时间 等各种信息</p></li></ul><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210905220859704.png" alt="image-20210905220859704"></p><p>properties配置信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#服务名称</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">Consul-Provider</span></span><br><span class="line"><span class="comment">#端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">5555</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#consul注册中心的ip</span></span><br><span class="line"><span class="meta">spring.cloud.consul.host</span>=<span class="string">192.168.32.131</span></span><br><span class="line"><span class="comment">#注册中心端口</span></span><br><span class="line"><span class="meta">spring.cloud.consul.port</span>=<span class="string">8500</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#服务名称和spring.application.name效果相同，不过会覆盖spring.application.name的值</span></span><br><span class="line"><span class="meta">spring.cloud.consul.discovery.service-name</span>=<span class="string">consul-provider-1</span></span><br><span class="line"><span class="comment">#服务实例名称</span></span><br><span class="line"><span class="meta">spring.cloud.consul.discovery.instance-id</span>=<span class="string">provider1</span></span><br></pre></td></tr></table></figure><p>在启动类中加入<code>@EnableDiscoveryClient</code>注解</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210905222855447.png" alt="image-20210905222855447"></p><h4 id="集群版"><strong>集群版</strong></h4><p><strong>Provider</strong></p><p>只需启动两个provider即可</p><blockquote><p>java -jar Consul-Provider-0.0.1-SNAPSHOT.ja<br>r --server.port=6666 --spring.cloud.consul.discovery.instance-id=provider2</p></blockquote><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210905224409054.png" alt="image-20210905224409054"></p><p><strong>Consumer</strong></p><p>Consumer的创建方式和Provider方式一样</p><p>不做过多赘述</p><p>我们来直接看负载均衡调用</p><p>创建一个带负载均衡<code>RestTemplat</code>的Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发起调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    LoadBalancerClient loadBalancerClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//发起调用</span></span><br><span class="line">        String vale = restTemplate.getForObject(<span class="string">&quot;http://consul-provider&quot;</span> + <span class="string">&quot;/hello&quot;</span>, String.class);</span><br><span class="line">        <span class="keyword">return</span> vale;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">Ribbon现在以及是SpringCloud自带的负载均衡服务了</font></p><p>Ribbon的负载均衡原理请看<a href="#ribbon">四，Ribbon源码解析</a></p><h2 id="六，Hystrix">六，Hystrix</h2><h3 id="Hystrix是什么">Hystrix是什么</h3><p>在分布式环境中，许多服务依赖项中的一些必然会失败。Hystrix是一个库，通过添加延迟容忍和容错逻辑，帮助你控制这些分布式服务之间的交互。Hystrix通过隔离服务之间的访问点、停止级联失败和提供回退选项来实现这一点，所有这些都可以提高系统的整体弹性。</p><h3 id="Hystrix为了什么">Hystrix为了什么</h3><p>Hystrix被设计的目标是：</p><ol><li>对通过第三方客户端库访问的依赖项（通常是通过网络）的延迟和故障进行保护和控制。</li><li>在复杂的分布式系统中阻止级联故障。</li><li>快速失败，快速恢复。</li><li>回退，尽可能优雅地降级。</li><li>启用近实时监控、警报和操作控制。</li></ol><h3 id="Hystrix解决了什么问题">Hystrix解决了什么问题</h3><p>复杂分布式体系结构中的应用程序有许多依赖项，每个依赖项在某些时候都不可避免地会失败。如果主机应用程序没有与这些外部故障隔离，那么它有可能被他们拖垮。</p><p>例如，对于一个依赖于30个服务的应用程序，每个服务都有99.99%的正常运行时间，你可以期望如下：</p><p><strong>99.9930 = 99.7%</strong> 可用</p><p>也就是说一亿个请求的<strong>0.03% = 3000000</strong> 会失败</p><p>如果一切正常，那么<strong>每个月有2个小时服务是不可用的</strong></p><p>现实通常是更糟糕</p><hr><p>当一切正常时，请求看起来是这样的：</p><p><img src="https://images2018.cnblogs.com/blog/874963/201807/874963-20180730172725624-245631738.png" alt="img"></p><p>当其中有一个系统有延迟时，它可能阻塞整个用户请求：</p><p><img src="https://images2018.cnblogs.com/blog/874963/201807/874963-20180730172821821-960520983.png" alt="img"></p><p>在高流量的情况下，一个后端依赖项的延迟可能导致所有服务器上的所有资源在数秒内饱和（PS：意味着后续再有请求将无法立即提供服务）</p><p><img src="https://images2018.cnblogs.com/blog/874963/201807/874963-20180730172949326-29467411.png" alt="img"></p><h3 id="Hystrix设计原则是什么">Hystrix设计原则是什么</h3><ul><li>防止任何单个依赖项耗尽所有容器（如Tomcat）用户线程。</li><li>甩掉包袱，快速失败而不是排队。</li><li>在任何可行的地方提供回退，以保护用户不受失败的影响。</li><li>使用隔离技术（如隔离板、泳道和断路器模式）来限制任何一个依赖项的影响。</li><li>通过近实时的度量、监视和警报来优化发现时间。</li><li>通过配置的低延迟传播来优化恢复时间。</li><li>支持对Hystrix的大多数方面的动态属性更改，允许使用低延迟反馈循环进行实时操作修改。</li><li>避免在整个依赖客户端执行中出现故障，而不仅仅是在网络流量中。</li></ul><h3 id="Hystrix是如何实现它的目标的">Hystrix是如何实现它的目标的</h3><ol><li>用一个HystrixCommand 或者 HystrixObservableCommand （这是命令模式的一个例子）包装所有的对外部系统（或者依赖）的调用，典型地它们在一个单独的线程中执行</li><li>调用超时时间比你自己定义的阈值要长。有一个默认值，对于大多数的依赖项你是可以自定义超时时间的。</li><li>为每个依赖项维护一个小的线程池(或信号量)；如果线程池满了，那么该依赖性将会立即拒绝请求，而不是排队。</li><li>调用的结果有这么几种：成功、失败（客户端抛出异常）、超时、拒绝。</li><li>在一段时间内，如果服务的错误百分比超过了一个阈值，就会触发一个断路器来停止对特定服务的所有请求，无论是手动的还是自动的。</li><li>当请求失败、被拒绝、超时或短路时，执行回退逻辑。</li><li>近实时监控指标和配置变化。</li></ol><p>当你使用Hystrix来包装每个依赖项时，上图中所示的架构会发生变化，如下图所示：</p><p>每个依赖项相互隔离，当延迟发生时，它会被限制在资源中，并包含回退逻辑，该逻辑决定在依赖项中发生任何类型的故障时应作出何种响应：</p><p><img src="https://images2018.cnblogs.com/blog/874963/201807/874963-20180730173442729-1485668320.png" alt="img"></p><h2 id="八，OpenFeign">八，OpenFeign</h2><h3 id="简介-3">简介</h3><p>OpenFeign是一种声明式、模板化的HTTP客户端。在Spring Cloud中使用OpenFeign，可以做到使用HTTP请求访问远程服务，就像调用本地方法一样的，开发者完全感知不到这是在调用远程方法，更感知不到在访问HTTP请求</p><h3 id="构建OpenFigen应用">构建OpenFigen应用</h3><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210914221535525.png" alt="image-20210914221535525"></p><p>配置文件</p><p>主要配置Eureka信息</p><p>注意<code>eurekaA</code>已在本地host文件中映射到<code>1270.0.1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=OpenFeignServer</span><br><span class="line"></span><br><span class="line">server.port=<span class="number">7777</span></span><br><span class="line"></span><br><span class="line">eureka.instance.instance-id=OpenFeign</span><br><span class="line"></span><br><span class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//eurekaA:1111/eureka</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>在启动类中加入<code>@EnableEurekaClient</code>和<code>@EnableFeignClients</code></p><ul><li><code>@EnableFeignClients</code>申明该项目是Feign客户端，扫描对应的feign client。</li><li><code>@EnableEurekaClient</code>申明该项目是Eureka客户端，将注册到Eureka和拉取注册中心信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpenFeignApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(OpenFeignApplication.class, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>}</p></li><li><p>书写API接口</p><p>我们需要集中化管理API，就可以通过接口统一管理，需要新增提供者(Provdier)服务的接口，并添加<code>@FeignClient(name=&quot;PROVIDER-APPLICATION&quot;)</code>注解，其中name就是我们要访问的微服务的名称。比如hello方法中<code>@GetMapping(&quot;/hello&quot;)</code>和服务提供者的<code>hello</code>的接口路径是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和注册中心的服务绑定</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;PROVIDER-APPLICATION&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//服务的接口名称以及请求方式</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="comment">//接口返回类型</span></span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210914225806424.png" alt="image-20210914225806424"></p><p>不难发现使用OpenFegin调用接口更加方便，相较于使用RestTemplate，更加水到渠成，符合条理</p></li></ol><p>​最后我们在Controller层调用OpenFeign的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConreoller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helloService.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><p><strong>所有请求方式的案例</strong></p><ul><li>Controller(Consumer)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConreoller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        String hello = helloService.hello();</span><br><span class="line">        System.out.println(<span class="string">&quot;hello()==========&gt;&quot;</span>+hello);</span><br><span class="line"></span><br><span class="line">        hello = helloService.hello(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hello(\&quot;张三\&quot;)==========&gt;&quot;</span>+hello);</span><br><span class="line"></span><br><span class="line">        String name = helloService.name(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name(\&quot;李四\&quot;)=============&gt;&quot;</span>+name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//请求头传递参数请将参数转码</span></span><br><span class="line">        String enable = URLEncoder.encode(<span class="string">&quot;你好请求头&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        String s = helloService.nameHeader(enable);</span><br><span class="line">        System.out.println(<span class="string">&quot;nameHeader(enable)=============&gt;&quot;</span>+s);</span><br><span class="line"></span><br><span class="line">        User user=<span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;没写密码&quot;</span>);</span><br><span class="line">        User addUser = helloService.addUser(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;addUser(user)=============&gt;&quot;</span>+addUser);</span><br><span class="line"></span><br><span class="line">        user.setId(<span class="number">2</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;他骗你的，写密码了&quot;</span>);</span><br><span class="line">        User updateUser = helloService.updateUser(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;updateUser(user)=============&gt;&quot;</span>+updateUser);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; ages = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">        Integer age = helloService.getAge(ages);</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge(ages)=============&gt;&quot;</span>+age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>OpenFeign接口(Consumer)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和注册中心的服务绑定</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;PROVIDER-APPLICATION&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务的接口名称以及请求方式</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="comment">//接口返回类型</span></span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/name&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/nameHeader&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">nameHeader</span><span class="params">(<span class="meta">@RequestHeader(&quot;nameHeader&quot;)</span> String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getAge&quot;)</span></span><br><span class="line">    <span class="function">Integer <span class="title">getAge</span><span class="params">(<span class="meta">@RequestParam(&quot;age&quot;)</span> List&lt;Integer&gt; age)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>API接口(Provider)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConreoller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/name&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">&quot;哈哈哈哈&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/nameHeader&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">nameHeader</span><span class="params">(<span class="meta">@RequestHeader(&quot;nameHeader&quot;)</span> String nameHeader)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        String decode = URLDecoder.decode(nameHeader, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> decode+<span class="string">&quot;Header&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getAge&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">(<span class="meta">@RequestParam(&quot;age&quot;)</span> List&lt;Integer&gt; age)</span></span>&#123;</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        <span class="keyword">return</span> age.get(<span class="number">0</span>)+<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color="red">值得注意的是OpenFeign接口</font></p><p><font color="red">凡是</font><code>key/value</code><font color="red">形式的参数全部需要加上</font><code>@RequestParam(&quot;参数名称&quot;) || @PathVariable(&quot;参数名称&quot;)</code></p><p><font color="red">JSON数据加上</font><code>@RequestBody</code><font color="red">注解</font></p><h3 id="继承特性">继承特性</h3><p>继承特性主体思想就是将接口提取成为一个模块，并在Provider模块和Consumer模块中继承接口模块，这样方便了接口的统一，在修改过程中不需要在去Provider模块和Consumer模块的接口，而是修改接口模块</p><p>缺点也显而易见，在分布式服务中，我们致力于将服务之间的耦合度降到最低，而实现继承特性，无疑增加了耦合度。</p><p>创建接口模块</p><ul><li>创建Maven模块(方引用)</li></ul><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210919232336198.png" alt="image-20210919232336198"></p><ul><li>在pom.xml文件中引入<font color="red">Web依赖</font>(需要<code>@XXXMapping</code>接口)和Commons依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.xpp011<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>OpenFeign-API<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.xpp011<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Commons<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>在API模块中书写接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//服务的接口名称以及请求方式</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="comment">//接口返回类型</span></span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/name&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/nameHeader&quot;)</span></span><br><span class="line">    <span class="function">String <span class="title">nameHeader</span><span class="params">(<span class="meta">@RequestHeader(&quot;nameHeader&quot;)</span> String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/updateUser&quot;)</span></span><br><span class="line">    <span class="function">User <span class="title">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getAge&quot;)</span></span><br><span class="line">    <span class="function">Integer <span class="title">getAge</span><span class="params">(<span class="meta">@RequestParam(&quot;age&quot;)</span> List&lt;Integer&gt; age)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>Provider</code>模块<code>Consumer</code>模块中引入API模块</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.xpp011<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>OpenFeign-API<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Provider</code>模块的Controller实现API接口</p><p><font color="red">注意，由于接口中以及写了</font><code>@XXXMapping</code><font color="red">接口</font>，所以Controller类中只需实现接口方法，不需要再写注解了</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloConreoller</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">&quot;哈哈哈哈&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">nameHeader</span><span class="params">(<span class="meta">@RequestHeader(&quot;nameHeader&quot;)</span> String nameHeader)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        String decode = URLDecoder.decode(nameHeader, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> decode+<span class="string">&quot;Header&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">(<span class="meta">@RequestParam(&quot;age&quot;)</span> List&lt;Integer&gt; age)</span></span>&#123;</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        <span class="keyword">return</span> age.get(<span class="number">0</span>)+<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Consumer</code>模块的OpenFeign接口只需继承API模块的接口即可</li></ul><p><font color="red">注意加上</font><code>@FeignClient</code><font color="red">注解</font>，于服务绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和注册中心的服务绑定</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;PROVIDER-APPLICATION&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloService</span> <span class="keyword">extends</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日志">日志</h3><p>OpenFeign中，我们可以使用日志来查看整个调用过程</p><p>级别</p><ol><li><code>NONE</code>:不开启日志</li><li><code>BASIC</code>:记录请求方法，URL，状态码，执行时间</li><li><code>HEADERS</code>:在<code>BASIC</code>基础上加上，响应头</li><li><code>FULL</code>:在<code>HEADERS</code>基础上，再增加body和请求元数据</li></ol><p>首先我们需要再Bean中配置日志级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OpenFeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启OpenFeign的日志功能</span></span><br><span class="line"><span class="comment">     * 级别</span></span><br><span class="line"><span class="comment">     * 1. `NONE`:不开启日志</span></span><br><span class="line"><span class="comment">     * 2. `BASIC`:记录请求方法，URL，状态码，执行时间</span></span><br><span class="line"><span class="comment">     * 3. `HEADERS`:在`BASIC`基础上加上，响应头</span></span><br><span class="line"><span class="comment">     * 4. `FULL`:在`HEADERS`基础上，再增加body和请求元数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Logger.<span class="function">Level <span class="title">loggerLevel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Logger.Level.FULL;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后在application.properties配置文件中指定包下的打印日志级别</p><blockquote><p>logging.level.cn.xpp011=debug</p></blockquote><p>以下就是<code>OpenFeign</code>打印的请求日志信息</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210920093306269.png" alt="image-20210920093306269"></p><h3 id="数据压缩">数据压缩</h3><p>数据压缩主要是将一些请求数据和响应数据过大时，进行数据压缩来提升传输效率</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#开启请求数据压缩</span></span><br><span class="line"><span class="meta">feign.compression.request.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#需要压缩的请求数据的类型</span></span><br><span class="line"><span class="meta">feign.compression.request.mime-types</span>=<span class="string">text/xml,application/json,application/xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#请求数据开始压缩的最小阈值(默认2048B)</span></span><br><span class="line"><span class="meta">feign.compression.request.min-request-size</span>=<span class="string">2048</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#开启响应数据压缩</span></span><br><span class="line"><span class="meta">feign.compression.response.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h2 id="九，Resilience4j">九，Resilience4j</h2><p>官方文档:  <a href="https://resilience4j.readme.io/">https://resilience4j.readme.io/</a></p><p>推荐文档:<a href="https://www.jianshu.com/p/5531b66b777a">https://www.jianshu.com/p/5531b66b777a</a></p><h3 id="简介-4">简介</h3><p><strong>Resilience4j</strong>是一款轻量级，易于使用的容错库，其灵感来自于<strong>Netflix Hystrix</strong>，但是专为<strong>Java</strong> <strong>8</strong>和函数式编程而设计。轻量级，因为库只使用了<strong>Vavr</strong>，它没有任何其他外部依赖下。相比之下，<strong>Netflix Hystrix</strong>对<strong>Archaius</strong>具有编译依赖性，<strong>Archaius</strong>具有更多的外部库依赖性，例如<strong>Guava</strong>和<strong>Apache Commons Configuration</strong>。</p><p>要使用<strong>Resilience4j</strong>，不需要引入所有依赖，只需要选择你需要的。</p><p><strong>Resilience4j</strong>提供了以下的核心模块和拓展模块:</p><p><strong>核心模块：</strong></p><ul><li><strong>resilience4j-circuitbreaker: Circuit breaking</strong>——<strong>断路器</strong></li><li><strong>resilience4j-ratelimiter: Rate limiting</strong>——<strong>限流器</strong></li><li><strong>resilience4j-bulkhead: Bulkheading</strong></li><li><strong>resilience4j-retry: Automatic retrying (sync and async)</strong>——<strong>请求重试</strong></li><li><strong>resilience4j-cache: Result caching</strong></li><li><strong>resilience4j-timelimiter: Timeout handling</strong></li></ul><h3 id="CircuitBreaker">CircuitBreaker</h3><h4 id="简介-5">简介</h4><p><strong>CircuitBreaker</strong>通过具有三种正常状态的有限状态机实现：<strong>CLOSED</strong>，<strong>OPEN</strong>和<strong>HALF_OPEN</strong>以及两个特殊状态<strong>DISABLED</strong>和<strong>FORCED_OPEN</strong>。当熔断器关闭时，所有的请求都会通过熔断器。如果失败率超过设定的阈值，熔断器就会从关闭状态转换到打开状态，这时所有的请求都会被拒绝。当经过一段时间后，熔断器会从打开状态转换到半开状态，这时仅有一定数量的请求会被放入，并重新计算失败率，如果失败率超过阈值，则变为打开状态，如果失败率低于阈值，则变为关闭状态。</p><p><img src="https:////upload-images.jianshu.io/upload_images/17742950-f8db8dc0ceb552d0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/426/format/webp" alt="img"></p><p>Circuitbreaker状态机</p><p><strong>Resilience4j</strong>记录请求状态的数据结构和<strong>Hystrix</strong>不同，<strong>Hystrix</strong>是使用滑动窗口来进行存储的，而<strong>Resilience4j</strong>采用的是<em>Ring Bit Buffer</em>(环形缓冲区)<font color="red">现CircuitBreajer继续使用了滑动窗口作为缓存器</font>。<strong>Ring Bit Buffer</strong>在内部使用<strong>BitSet</strong>这样的数据结构来进行存储，<strong>BitSet</strong>的结构如下图所示：</p><p><img src="https:////upload-images.jianshu.io/upload_images/17742950-9cedc9cd8d8d650f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/222/format/webp" alt="img"></p><p>环形缓冲区</p><p>每一次请求的成功或失败状态只占用一个<strong>bit</strong>位，与<strong>boolean</strong>数组相比更节省内存。<strong>BitSet</strong>使用<strong>long[]<strong>数组来存储这些数据，意味着</strong>16</strong>个值(<strong>64bit</strong>)的数组可以存储<strong>1024</strong>个调用状态。</p><p>计算失败率需要填满环形缓冲区。例如，如果环形缓冲区的大小为<strong>10</strong>，则必须至少请求满<strong>10</strong>次，才会进行故障率的计算，如果仅仅请求了<strong>9</strong>次，即使<strong>9</strong>个请求都失败，熔断器也不会打开。但是<em><strong>CLOSE*<strong>状态下的缓冲区大小设置为</strong>10</strong>并不意味着只会进入</em><em>10</em>*个 请求，在熔断器打开之前的所有请求都会被放入。</p><p>当故障率高于设定的阈值时，熔断器状态会从由<strong>CLOSE</strong>变为<strong>OPEN</strong>。这时所有的请求都会抛出<strong>CallNotPermittedException</strong>异常。当经过一段时间后，熔断器的状态会从<strong>OPEN</strong>变为<strong>HALF_OPEN</strong>，<strong>HALF_OPEN</strong>状态下同样会有一个<strong>Ring Bit Buffer</strong>，用来计算<strong>HALF_OPEN</strong>状态下的故障率，如果高于配置的阈值，会转换为<strong>OPEN</strong>，低于阈值则装换为<strong>CLOSE</strong>。与<strong>CLOSE</strong>状态下的缓冲区不同的地方在于，<strong>HALF_OPEN</strong>状态下的缓冲区大小会限制请求数，只有缓冲区大小的请求数会被放入。</p><p>除此以外，熔断器还会有两种特殊状态：<strong>DISABLED</strong>（始终允许访问）和<strong>FORCED_OPEN</strong>（始终拒绝访问）。这两个状态不会生成熔断器事件（除状态装换外），并且不会记录事件的成功或者失败。退出这两个状态的唯一方法是触发状态转换或者重置熔断器。</p><p>熔断器关于线程安全的保证措施有以下几个部分：</p><ul><li>熔断器的状态使用<strong>AtomicReference</strong>保存的</li><li>更新熔断器状态是通过无状态的函数或者原子操作进行的</li><li>更新事件的状态用<strong>synchronized</strong>关键字保护</li></ul><p>意味着同一时间只有一个线程能够修改熔断器状态或者记录事件的状态。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9mUm1lRHh6TWwwY29CbDhpY1dRYWlhUzkxMjBlb3NMeFBJcmpSOHJVanVibWR0ZGljNjVZOFpscFNwS0E4VVNaMm5WeXppY0lzak9pY0x0aHk0Zkh5aWNGNlVZdy82NDA?x-oss-process=image/format,png" alt="img"></p><h4 id="创建和配置断路器">创建和配置断路器</h4><p>您可以提供自己的自定义 断路器. 为了创建自定义全局 CircuitBreakerConfig，您可以使用 CircuitBreakerConfig 构建器。您可以使用构建器配置以下属性。<code>CircuitBreakerConfig</code>‘</p><table><thead><tr><th style="text-align:left">配置属性</th><th style="text-align:left">默认值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">failureRateThreshold</td><td style="text-align:left">50</td><td style="text-align:left">配置失败率阈值百分比。当故障率等于或大于阈值时，断路器切换到开路并开始短路呼叫。</td></tr><tr><td style="text-align:left">slowCallRateThreshold</td><td style="text-align:left">100</td><td style="text-align:left">配置百分比阈值。当呼叫时长大于“slowCallDurationThreshold”时，CircuitBreaker认为该呼叫为慢速呼叫。当慢速呼叫的百分比大于等于该阈值时，CircuitBreaker会切换到开路，并开始短路呼叫。</td></tr><tr><td style="text-align:left">slowCallDurationThreshold</td><td style="text-align:left">60000 [ms]</td><td style="text-align:left">配置时长阈值，超过该阈值呼叫将被视为慢速呼叫，并提高慢速呼叫的速率。</td></tr><tr><td style="text-align:left">permittedNumberOfCalls InHalfOpenState</td><td style="text-align:left">10</td><td style="text-align:left">当断路器半打开时,配置允许调用的数量。</td></tr><tr><td style="text-align:left">maxWaitDurationInHalfOpenState</td><td style="text-align:left">0 [ms]</td><td style="text-align:left">值0表示断路器将在半开状态无限等待，直到所有允许的调用完成。</td></tr><tr><td style="text-align:left">slidingWindowType</td><td style="text-align:left">COUNT_BASED</td><td style="text-align:left">滑动窗口可以是基于计数的，也可以是基于时间的。如果滑动窗口是COUNT_BASED，则记录并聚合最后的’ slidingWindowSize ‘调用。如果滑动窗口是TIME_BASED，则记录并聚合最后一个’ slidingWindowSize '秒的调用。</td></tr><tr><td style="text-align:left">slidingWindowSize</td><td style="text-align:left">100</td><td style="text-align:left">设置断路器关闭时记录通话结果的滑动窗口的大小。</td></tr><tr><td style="text-align:left">minimumNumberOfCalls</td><td style="text-align:left">100</td><td style="text-align:left">配置CircuitBreaker在计算错误率或慢速呼叫率之前所需的最小呼叫数(每个滑动窗口周期)。例如，如果minimumNumberOfCalls为10，则必须至少记录10个呼叫，才能计算失败率。如果只有9个呼叫被记录，即使9个呼叫都失败了，断路器也不会切换到打开。</td></tr><tr><td style="text-align:left">waitDurationInOpenState</td><td style="text-align:left">60000 [ms]</td><td style="text-align:left">断路器从开路过渡到半开路所需的时间。</td></tr><tr><td style="text-align:left">automaticTransition FromOpenToHalfOpenEnabled</td><td style="text-align:left">false</td><td style="text-align:left">如果设置为true，则意味着CircuitBreaker将自动从开状态过渡到半开状态，不需要调用来触发过渡。创建一个线程来监视CircuitBreakers的所有实例，一旦waitDurationInOpenState通过，就将它们转换到HALF_OPEN。然而，如果设置为false，则转换到HALF_OPEN只在调用时发生，即使在waitDurationInOpenState被传递之后。这样做的好处是没有线程监视所有断路器的状态。</td></tr><tr><td style="text-align:left">recordExceptions</td><td style="text-align:left">empty</td><td style="text-align:left">记录为失败的异常列表，从而增加失败率。任何从列表中匹配或继承的异常都被视为失败，除非通过’ ignoreExceptions ‘显式忽略。<font color="red">如果你指定了一个异常列表，所有其他异常都算成功，除非它们被’ ignoreExceptions '显式忽略。</font></td></tr><tr><td style="text-align:left">ignoreExceptions</td><td style="text-align:left">empty</td><td style="text-align:left">一列被忽略的例外，既不能算作失败也不能算作成功。任何从列表中匹配或继承的异常都不会被视为失败或成功，即使异常是’ recordexception '的一部分。</td></tr><tr><td style="text-align:left">recordFailurePredicate</td><td style="text-align:left">throwable -&gt; true 默认情况下，所有异常都记录为失败。</td><td style="text-align:left">如果异常应该被记录为失败的定义谓词。如果异常应该被视为失败,则谓词必须返回true。谓词必须返回false,如果异常应该被视为成功,除非异常被“无知异常”显式地忽略。</td></tr><tr><td style="text-align:left">ignoreException</td><td style="text-align:left">throwable -&gt; false 默认情况下不忽略任何异常</td><td style="text-align:left">一个定义谓词,如果一个异常应该被忽略,而不是被视为失败或成功。如果异常应该被忽略,则谓词必须返回true。如果异常应该被视为失败,则谓词必须返回false。</td></tr></tbody></table><h4 id="依赖">依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.github.resilience4j/resilience4j-circuitbreaker --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.resilience4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>resilience4j-circuitbreaker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="java配置断路器">java配置断路器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//默认配置</span></span><br><span class="line">    CircuitBreakerRegistry breakerRegistry = CircuitBreakerRegistry.ofDefaults();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义配置</span></span><br><span class="line">    CircuitBreakerConfig build = CircuitBreakerConfig.custom()</span><br><span class="line">            <span class="comment">//熔断器关闭状态和半开状态使用的同一个失败率阈值</span></span><br><span class="line">            .failureRateThreshold(<span class="number">50</span>)</span><br><span class="line">            <span class="comment">//超时请求阈值</span></span><br><span class="line">            .slowCallRateThreshold(<span class="number">100</span>)</span><br><span class="line">            <span class="comment">//请求超时的阈值 超过一秒视为超时请求</span></span><br><span class="line">            .slowCallDurationThreshold(Duration.ofMillis(<span class="number">1000</span>))</span><br><span class="line">            <span class="comment">//如果置为true，当等待时间结束会自动由打开变为半开，若置为false，则需要一个请求进入来触发熔断器状态转换</span></span><br><span class="line">            .automaticTransitionFromOpenToHalfOpenEnabled(<span class="keyword">false</span>)</span><br><span class="line">            <span class="comment">//熔断器从打开状态转变为半开状态等待的时间</span></span><br><span class="line">            .waitDurationInOpenState(Duration.ofMillis(<span class="number">1000</span>))</span><br><span class="line">            <span class="comment">//【过时】熔断器关闭状态的缓冲区大小，不会限制线程的并发量，在熔断器发生状态转换前所有请求都会调用后端服务</span></span><br><span class="line">            <span class="comment">//.ringBufferSizeInClosedState(2)</span></span><br><span class="line">            <span class="comment">//【过时】熔断器半开状态的缓冲区大小，会限制线程的并发量，例如缓冲区为10则每次只会允许10个请求调用后端服务</span></span><br><span class="line">            <span class="comment">//.ringBufferSizeInHalfOpenState(2)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//滑动窗口的类型</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 如果滑动窗口为 COUNT_BASED，则记录并汇总最后一次调用。</span></span><br><span class="line"><span class="comment">             * 如果滑动窗口是 TIME_BASED，则记录和聚合最后几秒的调用。*/</span></span><br><span class="line">            .slidingWindowType(CircuitBreakerConfig.SlidingWindowType.COUNT_BASED)</span><br><span class="line">            <span class="comment">//最少调用次数  表示滑动窗口的周期大小，只有请求次数到达最少调用次数才满足开启断路器的第一要求</span></span><br><span class="line">            .minimumNumberOfCalls(<span class="number">2</span>)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="comment">//装饰器模式</span></span><br><span class="line">    CircuitBreakerRegistry custom = CircuitBreakerRegistry.of(build);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为生成的配置起一个名字    可以生成多个CircuitBreaker共享一个配置实例</span></span><br><span class="line">    CircuitBreaker breaker = custom.circuitBreaker(<span class="string">&quot;nmae1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//装饰器模式 意为使用断路器breaker装饰第二个方法</span></span><br><span class="line">    CheckedFunction0&lt;String&gt; decorateCheckedSupplier = CircuitBreaker.decorateCheckedSupplier(breaker, () -&gt; <span class="string">&quot;hello Resilience4J&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行结果  map方法内的v为执行后的结果，可对结果二次操作</span></span><br><span class="line">    Try&lt;String&gt; result = Try.of(decorateCheckedSupplier).map(v -&gt; v + <span class="string">&quot;  hello CircuitBreaker&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;=========第一次调用=========&quot;</span>);</span><br><span class="line">    CircuitBreakerUtil.getCircuitBreakerStatus(<span class="string">&quot;第一次调用&quot;</span>,breaker);</span><br><span class="line">    System.out.println(<span class="string">&quot;result是否成功==========&gt;&quot;</span>+result.isSuccess());</span><br><span class="line">    System.out.println(<span class="string">&quot;result结果==========&gt;&quot;</span>+result.get());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//展示断路器效果</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行失败一次</span></span><br><span class="line">    breaker.onError(<span class="number">0L</span>,TimeUnit.MINUTES,<span class="keyword">new</span> RuntimeException());</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;=========第二次失败调用=========&quot;</span>);</span><br><span class="line">    CircuitBreakerUtil.getCircuitBreakerStatus(<span class="string">&quot;第二次失败调用&quot;</span>,breaker);</span><br><span class="line">    <span class="comment">//满足断路器的要求   即失败率达到50%</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//滑动窗口大小为2  调用满两次  一次失败  断路器开启 拒绝一切请求</span></span><br><span class="line"></span><br><span class="line">    CheckedFunction0&lt;String&gt; decorateCheckedSupplier2 = CircuitBreaker.decorateCheckedSupplier(breaker, () -&gt; <span class="string">&quot;断路器开启&quot;</span>);</span><br><span class="line">    Try&lt;String&gt; result2 = Try.of(decorateCheckedSupplier2);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;=========第三次拦截调用=========&quot;</span>);</span><br><span class="line">    CircuitBreakerUtil.getCircuitBreakerStatus(<span class="string">&quot;第三次拦截调用&quot;</span>,breaker);</span><br><span class="line">    System.out.println(<span class="string">&quot;result2是否成功==========&gt;&quot;</span>+result2.isSuccess());</span><br><span class="line">    System.out.println(<span class="string">&quot;result2结果==========&gt;&quot;</span>+result2.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CircuitBreaker工具类">CircuitBreaker工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircuitBreakerUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取熔断器状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> circuitBreaker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getCircuitBreakerStatus</span><span class="params">(String time, CircuitBreaker circuitBreaker)</span></span>&#123;</span><br><span class="line">        CircuitBreaker.Metrics metrics = circuitBreaker.getMetrics();</span><br><span class="line">        <span class="comment">// 失败百分比</span></span><br><span class="line">        <span class="keyword">float</span> failureRate = metrics.getFailureRate();</span><br><span class="line">        <span class="comment">// 缓冲区大小</span></span><br><span class="line">        <span class="keyword">int</span> bufferedCalls = metrics.getNumberOfBufferedCalls();</span><br><span class="line">        <span class="comment">// 当前缓冲区失败调用数量</span></span><br><span class="line">        <span class="keyword">int</span> failedCalls = metrics.getNumberOfFailedCalls();</span><br><span class="line">        <span class="comment">// 当前缓冲区成功调用数量</span></span><br><span class="line">        <span class="keyword">int</span> successCalls = metrics.getNumberOfSuccessfulCalls();</span><br><span class="line">        <span class="comment">// 断路器打开和半打开拒绝请求的数量</span></span><br><span class="line">        <span class="keyword">long</span> notPermittedCalls = metrics.getNumberOfNotPermittedCalls();</span><br><span class="line"></span><br><span class="line">        System.out.println(time + <span class="string">&quot;state=&quot;</span> +circuitBreaker.getState() + <span class="string">&quot; , metrics[ failureRate=&quot;</span> + failureRate +</span><br><span class="line">                <span class="string">&quot;, bufferedCalls=&quot;</span> + bufferedCalls +</span><br><span class="line">                <span class="string">&quot;, failedCalls=&quot;</span> + failedCalls +</span><br><span class="line">                <span class="string">&quot;, successCalls=&quot;</span> + successCalls +</span><br><span class="line">                <span class="string">&quot;, notPermittedCalls=&quot;</span> + notPermittedCalls +</span><br><span class="line">                <span class="string">&quot; ]&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 监听熔断器事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addCircuitBreakerListener</span><span class="params">(CircuitBreaker circuitBreaker)</span></span>&#123;</span><br><span class="line">        circuitBreaker.getEventPublisher()</span><br><span class="line">                .onSuccess(event -&gt; System.out.println(<span class="string">&quot;服务调用成功：&quot;</span> + event.toString()))</span><br><span class="line">                .onError(event -&gt; System.out.println(<span class="string">&quot;服务调用失败：&quot;</span> + event.toString()))</span><br><span class="line">                .onIgnoredError(event -&gt; System.out.println(<span class="string">&quot;服务调用失败，但异常被忽略：&quot;</span> + event.toString()))</span><br><span class="line">                .onReset(event -&gt; System.out.println(<span class="string">&quot;熔断器重置：&quot;</span> + event.toString()))</span><br><span class="line">                .onStateTransition(event -&gt; System.out.println(<span class="string">&quot;熔断器状态改变：&quot;</span> + event.toString()))</span><br><span class="line">                .onCallNotPermitted(event -&gt;System.out.println(<span class="string">&quot; 熔断器已经打开：&quot;</span> + event.toString()))</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210920214244811.png" alt="image-20210920214244811"></p><h4 id="AOP式调用CircuitBreaker">AOP式调用CircuitBreaker</h4><p>首先在连接器方法上使用**@CircuitBreaker(name=“”,fallbackMethod=“”)<strong>注解，其中</strong>name<strong>是要使用的熔断器的名称，<strong>fallbackMethod</strong>是要使用的降级方法，降级方法必须和原方法放在同一个类中，且降级方法的返回值需要和原方法相同，输入参数需要添加额外的</strong>exception**参数，类似这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> RemoteServiceConnector&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CircuitBreaker(name = &quot;backendA&quot;, fallbackMethod = &quot;fallBack&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">process</span><span class="params">()</span> <span class="keyword">throws</span> TimeoutException, InterruptedException </span>&#123;</span><br><span class="line">        List&lt;User&gt; users;</span><br><span class="line">        users = remoteServic.process();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;User&gt; <span class="title">fallBack</span><span class="params">(Throwable throwable)</span></span>&#123;</span><br><span class="line">        log.info(throwable.getLocalizedMessage() + <span class="string">&quot;,方法被降级了~~&quot;</span>);</span><br><span class="line">        CircuitBreakerUtil.getCircuitBreakerStatus(<span class="string">&quot;降级方法中:&quot;</span>, circuitBreakerRegistry.circuitBreaker(<span class="string">&quot;backendA&quot;</span>));</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;User&gt; <span class="title">fallBack</span><span class="params">(CallNotPermittedException e)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;熔断器已经打开，拒绝访问被保护方法~&quot;</span>);</span><br><span class="line">        CircuitBreakerUtil.getCircuitBreakerStatus(<span class="string">&quot;熔断器打开中:&quot;</span>, circuitBreakerRegistry.circuitBreaker(<span class="string">&quot;backendA&quot;</span>));</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>实例测试代码</strong></p><ul><li><strong>provider接口</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Resilience4J供应接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xpp011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2021-09-21 11:44</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/resilience4j&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resilience4JController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/name/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;resilience4j&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">        user.setUsername(<span class="string">&quot;resilience4j&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;SpringCloud-G版发布&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/math/&#123;num&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">mathematics</span><span class="params">(<span class="meta">@PathVariable(&quot;num&quot;)</span> Integer num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>/num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/runtime&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;允许时异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>OpenFeign接口</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * CircuitBreaker的OpenFeign接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/resilience4j&quot;)</span></span><br><span class="line"><span class="meta">@FeignClient(&quot;PROVIDER-APPLICATION&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CircuitBreakerApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/name/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">(<span class="meta">@PathVariable(&quot;name&quot;)</span> String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">addUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/math/&#123;num&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">mathematics</span><span class="params">(<span class="meta">@PathVariable(&quot;num&quot;)</span> Integer num)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/runtime&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runTime</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>CircuitBreaker控制器</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: CircuitBreaker断路器控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xpp011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2021-09-21 11:55</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/circuitbreaker&quot;)</span></span><br><span class="line"><span class="meta">@CircuitBreaker(name = &quot;breakerA&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircuitBreakerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CircuitBreakerApi circuitBreakerApi;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CircuitBreakerRegistry circuitBreakerRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/error&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CircuitBreakerUtil.getCircuitBreakerStatus(<span class="string">&quot;异常调用前&quot;</span>,circuitBreakerRegistry.circuitBreaker(<span class="string">&quot;breakerA&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span>==<span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        circuitBreakerApi.runTime();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/errorArithmeticException&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CircuitBreakerUtil.getCircuitBreakerStatus(<span class="string">&quot;异常调用前&quot;</span>,circuitBreakerRegistry.circuitBreaker(<span class="string">&quot;breakerA&quot;</span>));</span><br><span class="line"><span class="comment">//        if (1==1) throw new ArithmeticException();</span></span><br><span class="line">        circuitBreakerApi.mathematics(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;errorArithmeticException&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/ok&quot;)</span></span><br><span class="line">    <span class="comment">//注意服务进行服务降级时，算本次调用成功</span></span><br><span class="line">    <span class="meta">@CircuitBreaker(name = &quot;breakerA&quot;,fallbackMethod = &quot;test2Connect&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CircuitBreakerUtil.getCircuitBreakerStatus(<span class="string">&quot;正常调用前&quot;</span>,circuitBreakerRegistry.circuitBreaker(<span class="string">&quot;breakerA&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span>==<span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">        circuitBreakerApi.name(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2Connect</span><span class="params">(RuntimeException e)</span></span>&#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;运行时异常请稍后再试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2Connect</span><span class="params">(CallNotPermittedException e)</span></span>&#123;</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;断路器启动,服务暂不可访问，请稍后重试&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@CircuitBreaker(name = &quot;breakerB&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/start&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CircuitBreakerUtil.getCircuitBreakerStatus(<span class="string">&quot;状态&quot;</span>,circuitBreakerRegistry.circuitBreaker(<span class="string">&quot;breakerA&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>application.yml配置</strong></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5555</span></span><br><span class="line"><span class="comment">#port: 6666  端口6666被各大浏览器收录为不安全端口，请不要使用6666端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Resilience4J</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">appname:</span> <span class="string">Resilience4J</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:1111/eureka</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Resilience4J配置</span></span><br><span class="line"><span class="attr">resilience4j:</span></span><br><span class="line">  <span class="comment">#circuitbreaker配置</span></span><br><span class="line">  <span class="attr">circuitbreaker:</span></span><br><span class="line">    <span class="comment">#修改默认的配置</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="comment">#断路器失败阈值百分比</span></span><br><span class="line">        <span class="attr">failureRateThreshold:</span> <span class="number">50</span></span><br><span class="line">        <span class="comment">#超时请求阈值百分比</span></span><br><span class="line">        <span class="attr">slowCallRateThreshold:</span> <span class="number">70</span></span><br><span class="line">        <span class="comment">#超时时长阈值 3秒</span></span><br><span class="line">        <span class="attr">slowCallDurationThreshold:</span> <span class="number">3000</span></span><br><span class="line">        <span class="comment">#断路器half_open时允许调用的数量</span></span><br><span class="line">        <span class="attr">permittedNumberOfCallsInHalfOpenState:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment">#滑动窗口缓冲区类型</span></span><br><span class="line">        <span class="comment">#如果滑动窗口是COUNT_BASED，则记录并聚合最后的&#x27; slidingWindowSize &#x27;调用。</span></span><br><span class="line">        <span class="comment">#如果滑动窗口是TIME_BASED，则记录并聚合最后一个&#x27; slidingWindowSize &#x27;秒的调用。</span></span><br><span class="line">        <span class="attr">slidingWindowType:</span> <span class="string">COUNT_BASED</span></span><br><span class="line">        <span class="comment">#断路器关闭时记录通话结果的滑动窗口的大小</span></span><br><span class="line">        <span class="attr">slidingWindowSize:</span> <span class="number">5</span></span><br><span class="line">        <span class="comment">#在计算错误率或者计算慢速呼叫率最小呼叫数</span></span><br><span class="line">        <span class="attr">minimumNumberOfCalls:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment">#断路器由open状态到half_open状态需要的时间 6秒</span></span><br><span class="line">        <span class="attr">waitDurationInOpenState:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment">#true 开启一个线程监听CircuitBreakers的所有实例，一旦waitDurationInOpenState通过，就将它们转换到HALF_OPEN。</span></span><br><span class="line">        <span class="comment">#false 转换到HALF_OPEN只在调用时发生，即使在waitDurationInOpenState被传递之后。</span></span><br><span class="line">        <span class="attr">automaticTransitionFromOpenToHalfOpenEnabled:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment">#记录为失败的异常列表，从而增加失败率</span></span><br><span class="line">        <span class="comment">#注意指定失败异常列表那么只有符合该异常列表的异常才被计入失败,其他异常都算成功，除非被ignoreException忽略</span></span><br><span class="line">        <span class="attr">recordExceptions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">java.lang.ArithmeticException</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">feign.FeignException</span></span><br><span class="line">        <span class="comment">#忽略的异常列表，不计入失败</span></span><br><span class="line">        <span class="attr">ignoreException:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">java.lang.RuntimeException</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建配置实例</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">      <span class="comment">#实例A 覆盖一些默认配置</span></span><br><span class="line">      <span class="attr">breakerA:</span></span><br><span class="line">        <span class="attr">baseConfig:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">minimumNumberOfCalls:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">waitDurationInOpenState:</span> <span class="number">2000</span></span><br><span class="line">        <span class="attr">permittedNumberOfCallsInHalfOpenState:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">breakerB:</span></span><br><span class="line">        <span class="attr">baseConfig:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure><h4 id="总结-3">总结</h4><ul><li><p>失败率的计算必须等环装满才会计算</p></li><li><p>白名单优先级高于黑名单且白名单上的异常会被忽略，不会占用缓冲环位置，即不会计入失败率计算，<font color="red">但是会计入成功率计算(与文档不符，还需测验)</font></p></li><li><p>熔断器打开时同样会计算失败率，当状态转换为半开时重置为**-1**</p></li><li><p>只要出现异常都可以调用降级方法，不论是在白名单还是黑名单</p></li><li><p>熔断器的缓冲环有两个，一个关闭时的缓冲环，一个半打开时的缓冲环</p></li><li><p>熔断器关闭时，直至熔断器状态转换前所有请求都会通过，不会受到限制</p></li><li><p>熔断器半开时，限制请求数为缓冲环的大小，当调用次数满足<code>Half_Open</code>缓存环大小时，会根据失败率选择转换状态为<code>CLOSED</code>、<code>OPEN</code></p></li><li><p>熔断器从打开到半开的转换默认还需要请求进行触发，也可通过<strong>automaticTransitionFromOpenToHalfOpenEnabled=true</strong>设置为自动触发</p></li><li><p>服务降级成功后，会将本次调用计入成功率</p></li><li><p><strong>recordExceptions</strong>异常失败列表,<font color="red">注意指定失败异常列表那么只有符合该异常列表的异常才被计入失败,其他异常都算成功，除非被ignoreException忽略</font></p></li><li><p><strong>ignoreException</strong>忽略异常列表,出现该列表异常，那本次调用不会计入失败率(与文档不服还需测试)</p></li><li><p>滑动窗口含义为记录最新的<code>slidingWindowSize</code>次调用，并在此窗口内计算失败率</p></li></ul><h3 id="Ratelimiter">Ratelimiter</h3><h4 id="简介-6">简介</h4><p>速率限制是一项必不可少的技术，可让您的 API 为规模做好准备并建立服务的高可用性和可靠性。而且，该技术还提供了大量不同的选项，用于处理检测到的剩余限制，或者您想要限制的请求类型。您可以简单地拒绝此超限请求，或者构建一个队列以稍后执行它们，或者以某种方式将这两种方法结合起来。</p><p><font color="red">一般限速器在provider供应者服务内实现，方便预估限速调用次数,客户端实现无法预估集体调用数量</font></p><h4 id="可配置参数">可配置参数</h4><table><thead><tr><th>配置参数</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>timeoutDuration</td><td>5[s]</td><td>线程等待权限的默认等待时间</td></tr><tr><td>limitRefreshPeriod</td><td>500[ns]</td><td>权限刷新的时间，每个周期结束后，RateLimiter将会把权限计数设置为limitForPeriod的值</td></tr><tr><td>limitForPeriod</td><td>50</td><td>一个限制刷新期间的可用权限数</td></tr></tbody></table><h4 id="pom依赖">pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.github.resilience4j/resilience4j-circuitbreaker --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.resilience4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>resilience4j-ratelimiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="java配置Ratelimiter">java配置Ratelimiter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRateLimiter</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//以下配置含义  1秒内限制请求2个  被限制住的请求在2秒后过期不再发起请求</span></span><br><span class="line">    RateLimiterConfig config = RateLimiterConfig.custom()</span><br><span class="line">            <span class="comment">//超时持续时间</span></span><br><span class="line">            .timeoutDuration(Duration.ofMillis(<span class="number">2000</span>))</span><br><span class="line">            <span class="comment">//一个周期的时间</span></span><br><span class="line">            .limitRefreshPeriod(Duration.ofMillis(<span class="number">1000</span>))</span><br><span class="line">            <span class="comment">//一个周期可以用的权限数量</span></span><br><span class="line">            .limitForPeriod(<span class="number">2</span>)</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    RateLimiter ratelimiterA = RateLimiter.of(<span class="string">&quot;ratelimiterA&quot;</span>, config);</span><br><span class="line">    CheckedRunnable checkedRunnable = RateLimiter.decorateCheckedRunnable(ratelimiterA, () -&gt; System.out.println(<span class="keyword">new</span> Date()));</span><br><span class="line"></span><br><span class="line">    RateLimiterUtil.getRateLimiterStatus(<span class="string">&quot;执行前&quot;</span>,ratelimiterA);</span><br><span class="line">    Try.run(checkedRunnable)</span><br><span class="line">            .andThenTry(checkedRunnable)</span><br><span class="line">            .andThenTry(checkedRunnable)</span><br><span class="line">            .andThenTry(checkedRunnable)</span><br><span class="line">            .andThenTry(checkedRunnable)</span><br><span class="line">    ;</span><br><span class="line">    RateLimiterUtil.getRateLimiterStatus(<span class="string">&quot;执行后&quot;</span>,ratelimiterA);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RateLimiter工具类">RateLimiter工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiterUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 获取rateLimiter的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getRateLimiterStatus</span><span class="params">(String time, RateLimiter rateLimiter)</span></span>&#123;</span><br><span class="line">        RateLimiter.Metrics metrics = rateLimiter.getMetrics();</span><br><span class="line">        <span class="comment">// 当前时间可以使用的权限数</span></span><br><span class="line">        <span class="keyword">int</span> availablePermissions =  metrics.getAvailablePermissions();</span><br><span class="line">        <span class="comment">// 等待的请求数量</span></span><br><span class="line">        <span class="keyword">int</span> numberOfWaitingThreads = metrics.getNumberOfWaitingThreads();</span><br><span class="line"></span><br><span class="line">        System.out.println(time  + <span class="string">&quot;, metrics[ availablePermissions=&quot;</span> + availablePermissions +</span><br><span class="line">                <span class="string">&quot;, numberOfWaitingThreads=&quot;</span> + numberOfWaitingThreads + <span class="string">&quot; ]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 监听rateLimiter事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addRateLimiterListener</span><span class="params">(RateLimiter rateLimiter)</span></span>&#123;</span><br><span class="line">        rateLimiter.getEventPublisher()</span><br><span class="line">                .onSuccess(event -&gt; System.out.println(event.toString()))</span><br><span class="line">                .onFailure(event -&gt; System.out.println(event.toString()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AOP式调用RateLimiter">AOP式调用RateLimiter</h4><p>API</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimiterApi</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RateLimiterRegistry rateLimiterRegistry;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CircuitBreakerApi circuitBreakerApi;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RateLimiter(name = &quot;rateLimiterA&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        circuitBreakerApi.name(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="comment">//限速器</span></span><br><span class="line">        RateLimiterUtil.getRateLimiterStatus(<span class="keyword">new</span> Date().toString(),rateLimiterRegistry.rateLimiter(<span class="string">&quot;rateLimiterA&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pom.yml配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5555</span></span><br><span class="line"><span class="comment">#port: 6666  端口6666被各大浏览器收录为不安全端口，请不要使用6666端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Resilience4J</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">appname:</span> <span class="string">Resilience4J</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:1111/eureka</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Resilience4J配置</span></span><br><span class="line"><span class="attr">resilience4j:</span></span><br><span class="line">  <span class="comment">#ratelimiter限速器配置</span></span><br><span class="line">  <span class="attr">ratelimiter:</span></span><br><span class="line">    <span class="comment">#默认配置</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="comment">#限速请求在队列中等待时间</span></span><br><span class="line">        <span class="attr">timeoutDuration:</span> <span class="number">1000</span></span><br><span class="line">        <span class="comment">#一个周期的时间</span></span><br><span class="line">        <span class="attr">limitRefreshPeriod:</span> <span class="number">2000</span></span><br><span class="line">        <span class="comment">#一个周期可调用的权限数</span></span><br><span class="line">        <span class="attr">limitForPeriod:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">      <span class="comment">#实例配置</span></span><br><span class="line">      <span class="attr">rateLimiterA:</span></span><br><span class="line">        <span class="attr">baseConfig:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">limitForPeriod:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="总结-4">总结</h4><ul><li><font color="red">超出周期权限的请求会被放在队列中等待下一次周期，但如果请求过期，那么将不会在下一周期中调用过期请求</font></li><li>限速器在provider供应商实现，方便预估调用次数</li></ul><h3 id="Retry">Retry</h3><h4 id="简介-7">简介</h4><p>同熔断器一样，重试组件也提供了注册器，可以通过注册器获取实例来进行重试，同样可以跟熔断器配合使用。</p><h4 id="创建和配置Retry">创建和配置Retry</h4><p>您可以提供自定义的全局 RetryConfig。为了创建自定义全局 RetryConfig，您可以使用 RetryConfig 构建器。您可以使用构建器进行配置：</p><ul><li>最大尝试次数</li><li>连续尝试之间的等待时间</li><li>自定义 IntervalBiFunction，它根据尝试次数和结果或异常计算失败后的等待间隔。</li><li>一个自定义谓词，用于评估某个响应是否应该触发重试尝试</li><li>一个自定义谓词，用于评估异常是否应触发重试尝试</li><li>应触发重试尝试的异常列表</li><li>应该被忽略并且不会触发重试尝试的异常列表</li></ul><table><thead><tr><th style="text-align:left">配置属性</th><th style="text-align:left">默认值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">maxAttempts</td><td style="text-align:left">3</td><td style="text-align:left">最大尝试次数（包括首次调用作为第一次尝试）</td></tr><tr><td style="text-align:left">waitDuration</td><td style="text-align:left">500 [毫秒]</td><td style="text-align:left">重试尝试之间的固定等待时间</td></tr><tr><td style="text-align:left">intervalFunction</td><td style="text-align:left">numOfAttempts -&gt; waitDuration</td><td style="text-align:left">用来改变重试时间间隔，可以选择指数退避或者随机时间间隔</td></tr><tr><td style="text-align:left">intervalBiFunction</td><td style="text-align:left">(numOfAttempts, Each&lt;throwable, result&gt;) -&gt; waitDuration</td><td style="text-align:left">根据尝试次数和结果或异常修改失败后等待间隔的函数。与 intervalFunction 一起使用时会抛出 IllegalStateException。</td></tr><tr><td style="text-align:left">retryOnResultPredicate</td><td style="text-align:left">result -&gt; false</td><td style="text-align:left">配置一个 Predicate 来评估是否应该重试结果。如果应重试结果，则谓词必须返回true，否则必须返回false。</td></tr><tr><td style="text-align:left">retryExceptionPredicate</td><td style="text-align:left">throwable -&gt; true</td><td style="text-align:left">配置一个 Predicate 来评估是否应该重试异常。如果应重试异常，则谓词必须返回true，否则必须返回false。</td></tr><tr><td style="text-align:left">retryExceptions</td><td style="text-align:left">empty</td><td style="text-align:left">需要重试的异常列表</td></tr><tr><td style="text-align:left">ignoreExceptions</td><td style="text-align:left">empty</td><td style="text-align:left">需要忽略的异常列表</td></tr><tr><td style="text-align:left">failAfterMaxRetries</td><td style="text-align:left">false</td><td style="text-align:left">当重试达到配置的 maxAttempts 并且结果仍未通过 retryOnResultPredicate 时启用或禁用抛出 MaxRetriesExceededException 的布尔值</td></tr></tbody></table><h4 id="pom依赖-2">pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.resilience4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>resilience4j-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Java配置Retry">Java配置Retry</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRetry</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RetryConfig build = RetryConfig.custom()</span><br><span class="line">            <span class="comment">//最大重试次数</span></span><br><span class="line">            .maxAttempts(<span class="number">5</span>)</span><br><span class="line">            <span class="comment">//重试间隔</span></span><br><span class="line">            .waitDuration(Duration.ofMillis(<span class="number">1000</span>))</span><br><span class="line">            <span class="comment">//重试异常</span></span><br><span class="line">            .retryOnException(e -&gt; e <span class="keyword">instanceof</span> RuntimeException)</span><br><span class="line">            <span class="comment">//需要重试的异常列表</span></span><br><span class="line">            .retryExceptions(IOException.class, TimeoutException.class)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="comment">//获取配置</span></span><br><span class="line">    Retry retry = Retry.of(<span class="string">&quot;retry&quot;</span>, build);</span><br><span class="line">    CheckedRunnable checkedRunnable = Retry.decorateCheckedRunnable(retry, <span class="keyword">new</span> CheckedRunnable() &#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="comment">//重试3次后不再抛异常</span></span><br><span class="line">            <span class="keyword">while</span> (count++ &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                System.out.println(count);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    Void unused = Try.run(checkedRunnable).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Retry工具类">Retry工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: Retry工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xpp011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2021-09-20 23:30</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RetryUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 获取重试的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getRetryStatus</span><span class="params">(String time, Retry retry)</span></span>&#123;</span><br><span class="line">        Retry.Metrics metrics = retry.getMetrics();</span><br><span class="line">        <span class="keyword">long</span> failedRetryNum = metrics.getNumberOfFailedCallsWithRetryAttempt();</span><br><span class="line">        <span class="keyword">long</span> failedNotRetryNum = metrics.getNumberOfFailedCallsWithoutRetryAttempt();</span><br><span class="line">        <span class="keyword">long</span> successfulRetryNum = metrics.getNumberOfSuccessfulCallsWithRetryAttempt();</span><br><span class="line">        <span class="keyword">long</span> successfulNotyRetryNum = metrics.getNumberOfSuccessfulCallsWithoutRetryAttempt();</span><br><span class="line"></span><br><span class="line">        System.out.println(time + <span class="string">&quot;state=&quot;</span> + <span class="string">&quot; metrics[ failedRetryNum=&quot;</span> + failedRetryNum +</span><br><span class="line">                <span class="string">&quot;, failedNotRetryNum=&quot;</span> + failedNotRetryNum +</span><br><span class="line">                <span class="string">&quot;, successfulRetryNum=&quot;</span> + successfulRetryNum +</span><br><span class="line">                <span class="string">&quot;, successfulNotyRetryNum=&quot;</span> + successfulNotyRetryNum +</span><br><span class="line">                <span class="string">&quot; ]&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 监听重试事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addRetryListener</span><span class="params">(Retry retry)</span></span>&#123;</span><br><span class="line">        retry.getEventPublisher()</span><br><span class="line">                .onSuccess(event -&gt; System.out.println(<span class="string">&quot;服务调用成功：&quot;</span> + event.toString()))</span><br><span class="line">                .onError(event -&gt; System.out.println(<span class="string">&quot;服务调用失败：&quot;</span> + event.toString()))</span><br><span class="line">                .onIgnoredError(event -&gt; System.out.println(<span class="string">&quot;服务调用失败，但异常被忽略：&quot;</span> + event.toString()))</span><br><span class="line">                .onRetry(event -&gt; System.out.println(<span class="string">&quot;重试：第&quot;</span> + event.getNumberOfRetryAttempts() + <span class="string">&quot;次&quot;</span>))</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>控制台</p><p><img src="/.cn//D:%5Cwin10%E6%A1%8C%E9%9D%A2%E5%AD%98%E6%94%BE%5CSpringCloud%5C%E7%AC%94%E8%AE%B0%5CSpringCloud.assets%5Cimage-20210920233734739.png" alt="image-20210920233734739"></p><p><font color="red">可以看到只要没有超过最大重试次数时调用成功，那么整个方法就是成功的</font></p><h4 id="AOP式调用ReTry">AOP式调用ReTry</h4><p><strong>实际测试代码</strong></p><h4 id="ReTry控制器">ReTry控制器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: demo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: ReTry控制器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xpp011</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2021-09-22 22:47</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/retry&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReTreyController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> cut=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CircuitBreakerApi circuitBreakerApi;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CircuitBreaker(name = &quot;breakerA&quot;)</span></span><br><span class="line">    <span class="meta">@Retry(name = &quot;retryA&quot;,fallbackMethod = &quot;testRetryError&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/testRetry&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRetry</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date()+<span class="string">&quot;:&quot;</span>+cut);</span><br><span class="line">        <span class="comment">//Integer mathematics = circuitBreakerApi.mathematics(0);</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">1</span>==<span class="number">1</span>) <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException(<span class="string">&quot;异常测试&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;调用成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRetryError</span><span class="params">(Throwable t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.getMessage()+<span class="string">&quot;方法降级了&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testRetryError</span><span class="params">(CallNotPermittedException c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c.getMessage()+<span class="string">&quot;断路器已打开&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ReTry工具类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReTryUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 获取重试的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getRetryStatus</span><span class="params">(String time, Retry retry)</span></span>&#123;</span><br><span class="line">        Retry.Metrics metrics = retry.getMetrics();</span><br><span class="line">        <span class="keyword">long</span> failedRetryNum = metrics.getNumberOfFailedCallsWithRetryAttempt();</span><br><span class="line">        <span class="keyword">long</span> failedNotRetryNum = metrics.getNumberOfFailedCallsWithoutRetryAttempt();</span><br><span class="line">        <span class="keyword">long</span> successfulRetryNum = metrics.getNumberOfSuccessfulCallsWithRetryAttempt();</span><br><span class="line">        <span class="keyword">long</span> successfulNotyRetryNum = metrics.getNumberOfSuccessfulCallsWithoutRetryAttempt();</span><br><span class="line"></span><br><span class="line">        System.out.println(time + <span class="string">&quot;state=&quot;</span> + <span class="string">&quot; metrics[ failedRetryNum=&quot;</span> + failedRetryNum +</span><br><span class="line">                <span class="string">&quot;, failedNotRetryNum=&quot;</span> + failedNotRetryNum +</span><br><span class="line">                <span class="string">&quot;, successfulRetryNum=&quot;</span> + successfulRetryNum +</span><br><span class="line">                <span class="string">&quot;, successfulNotyRetryNum=&quot;</span> + successfulNotyRetryNum +</span><br><span class="line">                <span class="string">&quot; ]&quot;</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 监听重试事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addRetryListener</span><span class="params">(Retry retry)</span></span>&#123;</span><br><span class="line">        retry.getEventPublisher()</span><br><span class="line">                .onSuccess(event -&gt; System.out.println(<span class="string">&quot;服务调用成功：&quot;</span> + event.toString()))</span><br><span class="line">                .onError(event -&gt; System.out.println(<span class="string">&quot;服务调用失败：&quot;</span> + event.toString()))</span><br><span class="line">                .onIgnoredError(event -&gt; System.out.println(<span class="string">&quot;服务调用失败，但异常被忽略：&quot;</span> + event.toString()))</span><br><span class="line">                .onRetry(event -&gt; System.out.println(<span class="string">&quot;重试：第&quot;</span> + event.getNumberOfRetryAttempts() + <span class="string">&quot;次&quot;</span>))</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>application.yml配置信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5555</span></span><br><span class="line"><span class="comment">#port: 6666  端口6666被各大浏览器收录为不安全端口，请不要使用6666端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Resilience4J</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">appname:</span> <span class="string">Resilience4J</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:1111/eureka</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Resilience4J配置</span></span><br><span class="line"><span class="attr">resilience4j:</span></span><br><span class="line">  <span class="attr">retry:</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="comment">#最大尝试重试次数</span></span><br><span class="line">        <span class="attr">maxAttempts:</span> <span class="number">3</span></span><br><span class="line">        <span class="comment">#每一次重试的间隔时间</span></span><br><span class="line">        <span class="attr">waitDuration:</span> <span class="number">500</span></span><br><span class="line">        <span class="comment">#需要重试的异常列表</span></span><br><span class="line">        <span class="attr">retryExceptions:</span></span><br><span class="line">        <span class="comment">#忽略重试的异常列表</span></span><br><span class="line">        <span class="attr">ignoreExceptions:</span></span><br><span class="line">          <span class="comment">#当断路器打开时应当放弃重试</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">io.github.resilience4j.circuitbreaker.CallNotPermittedException</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">      <span class="attr">retryA:</span></span><br><span class="line">        <span class="attr">baseConfig:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">maxAttempts:</span> <span class="number">4</span></span><br><span class="line">        <span class="attr">waitDuration:</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><h4 id="总结-5">总结</h4><ul><li>当断路器注解<code>@CircuitBreaker</code>和重试器<code>@Retry</code>一起使用时，每一次重试请求都会被断路器记录,</li><li>服务降级只会在重试失败后调用</li><li>调用服务降级后，会被断路器计入成功率</li></ul><h3 id="Resilience4j配置文件">Resilience4j配置文件</h3><p>注意当如果<strong>Retry</strong>、<strong>CircuitBreaker</strong>、<strong>RateLimiter</strong>同时注解在方法上，默认的顺序是<strong>Retry&gt;CircuitBreaker&gt;RateLimiter</strong>，<font color="red">即先控制并发再限流然后熔断最后重试</font></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5555</span></span><br><span class="line"><span class="comment">#port: 6666  端口6666被各大浏览器收录为不安全端口，请不要使用6666端口</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Resilience4J</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#eureka配置</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">appname:</span> <span class="string">Resilience4J</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://127.0.0.1:1111/eureka</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Resilience4J配置</span></span><br><span class="line"><span class="attr">resilience4j:</span></span><br><span class="line">  <span class="comment">#circuitbreaker断路器配置</span></span><br><span class="line">  <span class="attr">circuitbreaker:</span></span><br><span class="line">    <span class="comment">#修改默认的配置</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="comment">#断路器失败阈值百分比</span></span><br><span class="line">        <span class="attr">failureRateThreshold:</span> <span class="number">50</span></span><br><span class="line">        <span class="comment">#超时请求阈值百分比</span></span><br><span class="line">        <span class="attr">slowCallRateThreshold:</span> <span class="number">70</span></span><br><span class="line">        <span class="comment">#超时时长阈值 3秒</span></span><br><span class="line">        <span class="attr">slowCallDurationThreshold:</span> <span class="number">3000</span></span><br><span class="line">        <span class="comment">#断路器half_open时允许调用的数量</span></span><br><span class="line">        <span class="attr">permittedNumberOfCallsInHalfOpenState:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment">#滑动窗口缓冲区类型</span></span><br><span class="line">        <span class="comment">#如果滑动窗口是COUNT_BASED，则记录并聚合最后的&#x27; slidingWindowSize &#x27;调用。</span></span><br><span class="line">        <span class="comment">#如果滑动窗口是TIME_BASED，则记录并聚合最后一个&#x27; slidingWindowSize &#x27;秒的调用。</span></span><br><span class="line">        <span class="attr">slidingWindowType:</span> <span class="string">COUNT_BASED</span></span><br><span class="line">        <span class="comment">#断路器关闭时记录通话结果的滑动窗口的大小</span></span><br><span class="line">        <span class="attr">slidingWindowSize:</span> <span class="number">5</span></span><br><span class="line">        <span class="comment">#在计算错误率或者计算慢速呼叫率最小呼叫数</span></span><br><span class="line">        <span class="attr">minimumNumberOfCalls:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment">#断路器由open状态到half_open状态需要的时间 6秒</span></span><br><span class="line">        <span class="attr">waitDurationInOpenState:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment">#true 开启一个线程监听CircuitBreakers的所有实例，一旦waitDurationInOpenState通过，就将它们转换到HALF_OPEN。</span></span><br><span class="line">        <span class="comment">#false 转换到HALF_OPEN只在调用时发生，即使在waitDurationInOpenState被传递之后。</span></span><br><span class="line">        <span class="attr">automaticTransitionFromOpenToHalfOpenEnabled:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment">#记录为失败的异常列表，从而增加失败率</span></span><br><span class="line">        <span class="comment">#注意指定失败异常列表那么只有符合该异常列表的异常才被计入失败,其他异常都算成功，除非被ignoreException忽略</span></span><br><span class="line">        <span class="attr">recordExceptions:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">java.lang.ArithmeticException</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">feign.FeignException</span></span><br><span class="line">        <span class="comment">#忽略的异常列表，不计入失败</span></span><br><span class="line">        <span class="attr">ignoreException:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">java.lang.RuntimeException</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建配置实例</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">      <span class="comment">#实例A 覆盖一些默认配置</span></span><br><span class="line">      <span class="attr">breakerA:</span></span><br><span class="line">        <span class="attr">baseConfig:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">minimumNumberOfCalls:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">waitDurationInOpenState:</span> <span class="number">20000</span></span><br><span class="line">        <span class="attr">permittedNumberOfCallsInHalfOpenState:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">breakerB:</span></span><br><span class="line">        <span class="attr">baseConfig:</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#retry重试器配置</span></span><br><span class="line">  <span class="attr">retry:</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="comment">#最大尝试重试次数</span></span><br><span class="line">        <span class="attr">maxAttempts:</span> <span class="number">3</span></span><br><span class="line">        <span class="comment">#每一次重试的间隔时间</span></span><br><span class="line">        <span class="attr">waitDuration:</span> <span class="number">500</span></span><br><span class="line">        <span class="comment">#需要重试的异常列表</span></span><br><span class="line">        <span class="attr">retryExceptions:</span></span><br><span class="line">        <span class="comment">#忽略重试的异常列表</span></span><br><span class="line">        <span class="attr">ignoreExceptions:</span></span><br><span class="line">          <span class="comment">#当断路器打开时应当放弃重试</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">io.github.resilience4j.circuitbreaker.CallNotPermittedException</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">      <span class="attr">retryA:</span></span><br><span class="line">        <span class="attr">baseConfig:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">maxAttempts:</span> <span class="number">4</span></span><br><span class="line">        <span class="attr">waitDuration:</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#ratelimiter限速器配置</span></span><br><span class="line">  <span class="attr">ratelimiter:</span></span><br><span class="line">    <span class="comment">#默认配置</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="comment">#限速请求在队列中等待时间</span></span><br><span class="line">        <span class="attr">timeoutDuration:</span> <span class="number">1000</span></span><br><span class="line">        <span class="comment">#一个周期的时间</span></span><br><span class="line">        <span class="attr">limitRefreshPeriod:</span> <span class="number">2000</span></span><br><span class="line">        <span class="comment">#一个周期可调用的权限数</span></span><br><span class="line">        <span class="attr">limitForPeriod:</span> <span class="number">60</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">      <span class="comment">#实例配置</span></span><br><span class="line">      <span class="attr">rateLimiterA:</span></span><br><span class="line">        <span class="attr">baseConfig:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">limitForPeriod:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="十，服务监控">十，服务监控</h2><p>在微服务中，由于服务数量众多，那么服务出现故障的几率也会非常大，那么维护这些服务就成了至关重要的事情了，服务监控也就成了必然的事情了</p><p>服务监控部分不再赘述</p><p>这里直接看健康信息可视化工具</p><h3 id="Prometheus">Prometheus</h3><p>官网文档:<a href="https://prometheus.io/docs/introduction/first_steps/">https://prometheus.io/docs/introduction/first_steps/</a></p><h4 id="简单安装">简单安装</h4><p>下载Linux版的Prometheus后</p><p><strong>解压</strong></p><blockquote><p>tar -zxvf  prometheus-X.X.X.tar</p></blockquote><p><strong>进入工作目录</strong></p><blockquote><p>cd prometheus-2.30.1.linux-amd64/</p></blockquote><p><strong>修改<code>prometheus.yml</code>配置文件</strong></p><p><font color="red">注意，返回服务信息的URL所返回的数据必须是</font><code>Protobuf</code><font color="red">格式</font></p><p>文档地址: <code>https://prometheus.io/docs/instrumenting/exposition_formats/</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span> <span class="comment"># 拉取服务信息间隔</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># 每15秒评估规则一次</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">          <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global &#x27;evaluation_interval&#x27;.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - &quot;first_rules.yml&quot;</span></span><br><span class="line">  <span class="comment"># - &quot;second_rules.yml&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it&#x27;s Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># 监听的服务标签</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">&quot;prometheus&quot;</span></span><br><span class="line">    <span class="comment">#拉取服务信息的URL</span></span><br><span class="line">    <span class="comment">#该接口返回的数据必须是 Protobuf 文档连接地址https://prometheus.io/docs/instrumenting/exposition_formats/</span></span><br><span class="line">    <span class="comment">#该接口返回的数据必须是 Protobuf</span></span><br><span class="line">    <span class="comment">#该接口返回的数据必须是 Protobuf</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">&#x27;/actuator/prometheus&#x27;</span></span><br><span class="line">    <span class="comment"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class="line">    <span class="comment">#拉取信息间隔</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="comment">#监听的服务地址</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> [<span class="string">&quot;192.168.32.1:8080&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>启动Prometheus</strong></p><blockquote><p>./prometheus --config.file=prometheus.yml</p></blockquote><p><strong>监控服务配置</strong></p><p>引入prometheus依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.micrometer/micrometer-registry-prometheus --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>简单配置依赖</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="comment">#暴露所有端口</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="comment">#health任何时候可见</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line">      <span class="attr">show-components:</span> <span class="string">always</span></span><br><span class="line">    <span class="comment">#prometheus普罗米修斯开启</span></span><br><span class="line">    <span class="attr">prometheus:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#开启metrics</span></span><br><span class="line">    <span class="attr">metrics:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#开启普罗米修斯检测</span></span><br><span class="line">  <span class="attr">metrics:</span></span><br><span class="line">    <span class="attr">export:</span></span><br><span class="line">      <span class="attr">prometheus:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="Security配置">Security配置</h4><p>如果你的项目配置了<code>SpringSecurity</code>，请开放接口<code>/actuator/prometheus</code>的权限</p><p><strong>访问地址</strong></p><blockquote><p>prometheusIP:9090</p></blockquote><h3 id="Grafana">Grafana</h3><p>官网地址: <a href="https://grafana.com/grafana/download?pg=get&amp;plcmt=selfmanaged-box1-cta1&amp;platform=docker">https://grafana.com/grafana/download?pg=get&amp;plcmt=selfmanaged-box1-cta1&amp;platform=docker</a></p><p>文档地址: <a href="https://grafana.com/docs/grafana/latest/basics/">https://grafana.com/docs/grafana/latest/basics/</a></p><h4 id="Docker安装">Docker安装</h4><p>基于ubuntu镜像</p><blockquote><p>docker run -d --name=grafana -p 3000:3000 grafana/grafana-enterprise:8.1.5-ubuntu</p></blockquote><h4 id="添加Prometheus数据源">添加Prometheus数据源</h4><p><img src="http://typora.xpp011.cn/typora/img/image-20211002203840220.png" alt="image-20211002203840220"></p><h4 id="添加仪表盘">添加仪表盘</h4><p>点击红框设置仪表盘展示信息</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211002222438403.png" alt="hongkuang"></p><p>在输入框填写<code>Prometheus</code>Sql语句即可将服务信息以图形化方式展示出来</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211002222617485.png" alt="image-20211002222617485"></p><h2 id="十一，服务网关">十一，服务网关</h2><p>Zuul已经闭源，这里不做描述</p><h3 id="网关简介">网关简介</h3><h4 id="一、什么是服务网关">一、什么是服务网关</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务网关 = 路由转发 + 过滤器</span><br></pre></td></tr></table></figure><p>1、路由转发：接收一切外界请求，转发到后端的微服务上去；</p><p>2、过滤器：在服务网关中可以完成一系列的横切功能，例如权限校验、限流以及监控等，这些都可以通过过滤器完成（其实路由转发也是通过过滤器实现的）。</p><h4 id="二、为什么需要服务网关">二、为什么需要服务网关</h4><p>上述所说的横切功能（以权限校验为例）可以写在三个位置：</p><ul><li>每个服务自己实现一遍</li><li>写到一个公共的服务中，然后其他所有服务都依赖这个服务</li><li>写到服务网关的前置过滤器中，所有请求过来进行权限校验</li></ul><p>第一种，缺点太明显，基本不用；第二种，相较于第一点好很多，代码开发不会冗余，但是有两个缺点：</p><ul><li>由于每个服务引入了这个公共服务，那么相当于在每个服务中都引入了相同的权限校验的代码，使得每个服务的jar包大小无故增加了一些，尤其是对于使用docker镜像进行部署的场景，jar越小越好；</li><li>由于每个服务都引入了这个公共服务，那么我们后续升级这个服务可能就比较困难，而且公共服务的功能越多，升级就越难，而且假设我们改变了公共服务中的权限校验的方式，想让所有的服务都去使用新的权限校验方式，我们就需要将之前所有的服务都重新引包，编译部署。</li></ul><p>而服务网关恰好可以解决这样的问题：</p><ul><li>将权限校验的逻辑写在网关的过滤器中，后端服务不需要关注权限校验的代码，所以服务的jar包中也不会引入权限校验的逻辑，不会增加jar包大小；</li><li>如果想修改权限校验的逻辑，只需要修改网关中的权限校验过滤器即可，而不需要升级所有已存在的微服务。</li></ul><p>所以，需要服务网关！！！</p><h4 id="三、服务网关技术选型">三、服务网关技术选型</h4><p><img src="https://pic1.zhimg.com/80/v2-7032af539f437112f77049540c43a4d4_720w.jpg" alt="img"></p><p>引入服务网关后的微服务架构如上，总体包含三部分：服务网关、open-service和service。</p><h5 id="1、总体流程">1、总体流程</h5><ul><li>服务网关、open-service和service启动时注册到注册中心上去；</li><li>用户请求时直接请求网关，网关做智能路由转发（包括服务发现，负载均衡）到open-service，这其中包含权限校验、监控、限流等操作</li><li>open-service聚合内部service响应，返回给网关，网关再返回给用户</li></ul><h5 id="2、引入网关的注意点">2、引入网关的注意点</h5><ul><li>增加了网关，多了一层转发（原本用户请求直接访问open-service即可），性能会下降一些（但是下降不大，通常，网关机器性能会很好，而且网关与open-service的访问通常是内网访问，速度很快）；</li><li>网关的单点问题：在整个网络调用过程中，一定会有一个单点，可能是网关、nginx、dns服务器等。防止网关单点，可以在网关层前边再挂一台nginx，nginx的性能极高，基本不会挂，这样之后，网关服务就可以不断的添加机器。但是这样一个请求就转发了两次，所以最好的方式是网关单点服务部署在一台牛逼的机器上（通过压测来估算机器的配置），而且nginx与zuul的性能比较，根据国外的一个哥们儿做的实验来看，其实相差不大，zuul是netflix开源的一个用来做网关的开源框架；</li><li>网关要尽量轻。</li></ul><h5 id="3、服务网关基本功能">3、服务网关基本功能</h5><ul><li><p>智能路由：接收外部一切请求，并转发到后端的对外服务open-service上去；</p></li><li><ul><li>注意：我们只转发外部请求，服务之间的请求不走网关，这就表示全链路追踪、内部服务API监控、内部服务之间调用的容错、智能路由不能在网关完成；当然，也可以将所有的服务调用都走网关，那么几乎所有的功能都可以集成到网关中，但是这样的话，网关的压力会很大，不堪重负。</li></ul></li><li><p>权限校验：只校验用户向open-service服务的请求，不校验服务内部的请求。服务内部的请求有必要校验吗？</p></li><li><p>API监控：只监控经过网关的请求，以及网关本身的一些性能指标（例如，gc等）；</p></li><li><p>限流：与监控配合，进行限流操作；</p></li><li><p>API日志统一收集：类似于一个aspect切面，记录接口的进入和出去时的相关日志</p></li><li><p>。。。后续补充</p></li></ul><p>上述功能是网关的基本功能，网关还可以实现以下功能：</p><ul><li>A|B测试：A|B测试时一块比较大的东西，包含后台实验配置、数据埋点（看转化率）以及分流引擎，在服务网关中，可以实现分流引擎，但是实际上分流引擎会调用内部服务，所以如果是按照上图的架构，分流引擎最好做在open-service中，不要做在服务网关中。</li><li>。。。后续补充</li></ul><h3 id="Gateway">Gateway</h3><p>文档地址:<a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/">https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/</a></p><h4 id="简介-8">简介</h4><blockquote><p>Spring Cloud Gateway是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控/埋点，和限流等。</p></blockquote><h4 id="优点">优点</h4><p>​Spring Cloud Gateway 可以看做是一个 Zuul 1.x 的升级版和代替品，比 Zuul 2 更早的使用 Netty 实现异步 IO，从而实现了一个简单、比 Zuul 1.x 更高效的、与 Spring Cloud 紧密配合的 API 网关。<br>​Spring Cloud Gateway 里明确的区分了 Router 和 Filter，并且一个很大的特点是内置了非常多的开箱即用功能，并且都可以通过 SpringBoot 配置或者手工编码链式调用来使用。<br>​比如内置了 10 种 Router，使得我们可以直接配置一下就可以随心所欲的根据 Header、或者 Path、或者 Host、或者 Query 来做路由。<br>​比如区分了一般的 Filter 和全局 Filter，内置了 20 种 Filter 和 9 种全局 Filter，也都可以直接用。当然自定义 Filter 也非常方便。</p><p><strong>最重要的几个概念</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nvcy5yYWluMTAyNC5jb20vbWFya2Rvd24vaW1hZ2UtMjAxOTEwMDgxNjA3MTM4MjIucG5n?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nvcy5yYWluMTAyNC5jb20vbWFya2Rvd24vaW1hZ2UtMjAxOTEwMDgxNjA4MDkxNDYucG5n?x-oss-process=image/format,png" alt="img"></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2Nvcy5yYWluMTAyNC5jb20vbWFya2Rvd24vaW1hZ2UtMjAxOTEwMDgxNjA4MjU3MzEucG5n?x-oss-process=image/format,png" alt="img"></p><h4 id="RouteProperties匹配">RouteProperties匹配</h4><h5 id="时间匹配">时间匹配</h5><p>Predicate 支持设置一个时间，在请求进行转发的时候，可以通过判断在这个时间之前或者之后进行转发。比如我们现在设置只有在 2021年 9 月 20 日才会转发到我的网站，在这之前不进行转发，我就可以这样配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after-router</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://httpbin.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">After=2021-09-20T06:06:06+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><p>Spring 是通过 ZonedDateTime 来对时间进行的对比，ZonedDateTime 是 Java 8 中日期时间功能里，用于表示带时区的日期与时间信息的类，ZonedDateTime 支持通过时区来设置时间，中国的时区是：Asia/Shanghai。</p><p>After Route Predicate 是指在这个时间之后的请求都转发到目标地址。上面的示例是指，请求时间在 2021年 9 月 20 日 6 点 6 分 6 秒之后的所有请求都转发到地址http://ityouknow.com。+08:00是指时间和 UTC 时间相差八个小时，时间地区为Asia/Shanghai。</p><p>添加完路由规则之后，访问地址http://localhost:8080会自动转发到http://httpbin.org。注意这里的转发只能转发到指定某个服务或者URL上，而不能转发到服务上某个具体的请求，比如:<a href="http://httpbin.org/get%E6%98%AF%E4%B8%8D%E5%8F%AF%E8%A1%8C%E7%9A%84%E3%80%82">http://httpbin.org/get是不可行的。</a></p><p>Before Route Predicate 刚好相反，在某个时间之前的请求的请求都进行转发。我们把上面路由规则中的 After 改为 Before，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">Before-router</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Before=2021-10-20T06:06:06+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><p>就表示在这个时间之前可以进行路由，在这时间之后停止路由，修改完之后重启项目再次访问地址http://localhost:8080，页面会报 404 没有找到地址。</p><p>除过在时间之前或者之后外，Gateway 还支持限制路由请求在某一个时间段范围内，可以使用 Between Route Predicate 来实现。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#        匹配两个具体时间之间的请求</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">Between-router</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Between=2021-10-04T21:42:06+08:00[Asia/Shanghai],2021-10-20T06:06:06+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure><p>这样设置就意味着在这个时间段内可以匹配到此路由，超过这个时间段范围则不会进行匹配。通过时间匹配路由的功能很酷，可以用在限时抢购的一些场景中。</p><h5 id="Cookie匹配">Cookie匹配</h5><p>Cookie Route Predicate 可以接收两个参数，一个是 Cookie name , 一个是正则表达式，路由规则会通过获取对应的 Cookie name 值和正则表达式去匹配，如果匹配上就会执行路由，如果没有匹配上则不执行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#       根据Cookie的name以及value的正则进行匹配</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cookie_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://httpbin.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Cookie=Gateway,coo[A-Za-z]+</span></span><br></pre></td></tr></table></figure><p>以上符合配置的Cookie为</p><blockquote><p>name: Gateway</p><p>value:  coo开头的值</p></blockquote><p><img src="http://typora.xpp011.cn/typora/img/image-20211004215809123.png" alt="image-20211004215809123"></p><p>Header Route Predicate 和 Cookie Route Predicate 一样，也是接收 2 个参数，一个 header 中属性名称和一个正则表达式，这个属性值和正则表达式匹配则执行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#       根据请求头匹配名称为X-Request-Id ,value和表达式\d+匹配</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">header-route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://httpbin.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br></pre></td></tr></table></figure><p>我们在Fiddler中拦截<code>localhost:8080/get</code>的请求，为其添加请求头，就可以发现请求成功</p><blockquote><p>X-Request-Id：123</p></blockquote><p><img src="http://typora.xpp011.cn/typora/img/image-20211004221257312.png" alt="image-20211004221257312"></p><h5 id="Host匹配">Host匹配</h5><p>Host Route Predicate 接收一组参数，一组匹配的域名列表，这个模板是一个 ant 分隔的模板，用<code>.</code>号作为分隔符。它通过参数中的主机地址作为匹配规则。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#       根据请求头中的host字段匹配</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">host-route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://httpbin.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Host=*.org</span></span><br></pre></td></tr></table></figure><p>使用 curl 测试，命令行输入:</p><blockquote><p>curl <a href="http://localhost:8080">http://localhost:8080</a>  -H “Host: <a href="http://www.ityouknow.org">www.ityouknow.org</a>”<br>curl <a href="http://localhost:8080">http://localhost:8080</a>  -H “Host: <a href="http://md.ityouknow.org">md.ityouknow.org</a>”</p></blockquote><p>经测试以上两种 host 均可匹配到 host_route 路由，去掉 host 参数则会报 404 错误。</p><h5 id="通过请求方式匹配">通过请求方式匹配</h5><p>可以通过是 POST、GET、PUT、DELETE 等不同的请求方式来进行路由。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#       根据请求方法</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">method-route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://httpbin.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=GET,POST</span></span><br></pre></td></tr></table></figure><p>通过不同的请求方式可以看到，<code>GET</code>可以通过请求，而<code>PUT</code>请求直接404</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211004223328304.png" alt="image-20211004223328304"></p><h5 id="通过请求路径匹配">通过请求路径匹配</h5><p>Path Route Predicate 接收一个匹配路径的参数来判断是否走路由。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#       根据请求路径匹配</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">path-route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://httpbin.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/get/**,/basic-auth/&#123;user&#125;/&#123;passwd&#125;</span></span><br></pre></td></tr></table></figure><h5 id="通过请求参数匹配">通过请求参数匹配</h5><p>Query Route Predicate 支持传入两个参数，一个是属性名一个为属性值，属性值可以是正则表达式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#       根据请求参数匹配</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">query-route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://httpbin.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=name,zhang[A-Za-z]+</span></span><br></pre></td></tr></table></figure><p>以下URL可以匹配成功</p><blockquote><p><a href="http://localhost:8080/get/?name=zhanhsk">localhost:8080/get/?name=zhanhsk</a></p></blockquote><h5 id="通过请求-ip-地址进行匹配">通过请求 ip 地址进行匹配</h5><p>Predicate 也支持通过设置某个 ip 区间号段的请求才会路由，RemoteAddr Route Predicate 接受 cidr 符号 (IPv4 或 IPv6) 字符串的列表(最小大小为 1)，例如 192.168.0.1/16 (其中 192.168.0.1 是 IP 地址，16 是子网掩码)。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#       根据请求ip匹配</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">remoteaddr_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://httpbin.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RemoteAddr=192.168.1.5/24</span></span><br></pre></td></tr></table></figure><h5 id="权重路由匹配">权重路由匹配</h5><p>该<code>Weight</code>有两个参数：<code>group</code>和<code>weight</code>（一个int）。权重是按组计算的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#       根据权重匹配</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_high</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://httpbin.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">8</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_low</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>该路由会将约 80% 的流量转发到http://httpbin.org，将约 20% 的流量<a href="https://weighlow.org/">转发</a>到https://example.org</p><h4 id="结合Eureka注册中心">结合Eureka注册中心</h4><p><strong>引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>yaml配置文件</strong></p><p>注意<code>Gateway</code>和<code>注册中心</code>整合时，<font color="red">务必开启注册中心客户端代理</font><code>spring.cloud.gateway.discovery,enabled=true</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="comment">#启动注册中心客户端代理</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">#前往注册中心注册</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:1111/eureka</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">4444</span></span><br></pre></td></tr></table></figure><p><strong>检查Eureka注册中心上的服务</strong></p><p><img src="http://typora.xpp011.cn/typora/img/image-20211004234409248.png" alt="image-20211004234409248"></p><p><strong>访问注册中心上的服务</strong></p><p>url的前缀<code>/PROVIDER-APPLICATION/</code>必须为注册中心上某个服务的名称,<font color="red">同时注意大小写</font></p><blockquote><p><a href="http://localhost:4444/PROVIDER-APPLICATION/provider/zhangsan">localhost:4444/PROVIDER-APPLICATION/provider/zhangsan</a></p></blockquote><p><img src="http://typora.xpp011.cn/typora/img/image-20211004234509330.png" alt="image-20211004234509330"></p><h4 id="Filter过滤器">Filter过滤器</h4><p>Gateway的过滤器众多，这里不每个都看一遍，必要时查阅文档即可</p><ul><li><p><code>AddRequestHeader</code></p><blockquote><p>在转发请求网关下游服务时，在请求头添加<code>AddRequestHeader</code>所配置的参数</p></blockquote></li><li><p><code>AddRequestParameter</code></p><blockquote><p>在转发请求网关下游服务时，在参数体中添加<code>AddRequestParameter</code>所配置的参数</p></blockquote></li><li><p><code>AddResponseHeader</code></p><blockquote><p>在返回调用者之前，在响应头中添加<code>AddResponseHeader</code>配置的参数</p></blockquote></li><li><p><code>CircuitBreaker</code></p><blockquote><p>结合Resilience4j的CircuitBreaker断路器</p></blockquote><ol><li><p>引入依赖<font color="red">，注意一定是反应式</font><code>reactor</code>的<code>CircuitBreaker</code>的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-circuitbreaker-reactor-resilience4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置<code>CircuitBreaker</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Resilience4J配置</span></span><br><span class="line"><span class="attr">resilience4j:</span></span><br><span class="line">  <span class="comment">#circuitbreaker配置</span></span><br><span class="line">  <span class="attr">circuitbreaker:</span></span><br><span class="line">    <span class="comment">#修改默认的配置</span></span><br><span class="line">    <span class="attr">configs:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="comment">#断路器失败阈值百分比</span></span><br><span class="line">        <span class="attr">failureRateThreshold:</span> <span class="number">50</span></span><br><span class="line">        <span class="comment">#超时请求阈值百分比</span></span><br><span class="line">        <span class="attr">slowCallRateThreshold:</span> <span class="number">70</span></span><br><span class="line">        <span class="comment">#超时时长阈值 3秒</span></span><br><span class="line">        <span class="attr">slowCallDurationThreshold:</span> <span class="number">3000</span></span><br><span class="line">        <span class="comment">#断路器half_open时允许调用的数量</span></span><br><span class="line">        <span class="attr">permittedNumberOfCallsInHalfOpenState:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment">#滑动窗口缓冲区类型</span></span><br><span class="line">        <span class="comment">#如果滑动窗口是COUNT_BASED，则记录并聚合最后的&#x27; slidingWindowSize &#x27;调用。</span></span><br><span class="line">        <span class="comment">#如果滑动窗口是TIME_BASED，则记录并聚合最后一个&#x27; slidingWindowSize &#x27;秒的调用。</span></span><br><span class="line">        <span class="attr">slidingWindowType:</span> <span class="string">COUNT_BASED</span></span><br><span class="line">        <span class="comment">#断路器关闭时记录通话结果的滑动窗口的大小</span></span><br><span class="line">        <span class="attr">slidingWindowSize:</span> <span class="number">5</span></span><br><span class="line">        <span class="comment">#在计算错误率或者计算慢速呼叫率最小呼叫数</span></span><br><span class="line">        <span class="attr">minimumNumberOfCalls:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment">#断路器由open状态到half_open状态需要的时间 6秒</span></span><br><span class="line">        <span class="attr">waitDurationInOpenState:</span> <span class="number">60000</span></span><br><span class="line">        <span class="comment">#true 开启一个线程监听CircuitBreakers的所有实例，一旦waitDurationInOpenState通过，就将它们转换到HALF_OPEN。</span></span><br><span class="line">        <span class="comment">#false 转换到HALF_OPEN只在调用时发生，即使在waitDurationInOpenState被传递之后。</span></span><br><span class="line">        <span class="attr">automaticTransitionFromOpenToHalfOpenEnabled:</span> <span class="literal">false</span></span><br><span class="line">        <span class="comment">#记录为失败的异常列表，从而增加失败率</span></span><br><span class="line">        <span class="comment">#注意指定失败异常列表那么只有符合该异常列表的异常才被计入失败,其他异常都算成功，除非被ignoreException忽略</span></span><br><span class="line">        <span class="attr">recordExceptions:</span></span><br><span class="line">        <span class="comment">#忽略的异常列表，不计入失败</span></span><br><span class="line">        <span class="attr">ignoreException:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建配置实例</span></span><br><span class="line">    <span class="attr">instances:</span></span><br><span class="line">      <span class="comment">#实例A 覆盖一些默认配置</span></span><br><span class="line">      <span class="attr">breakerA:</span></span><br><span class="line">        <span class="attr">baseConfig:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">minimumNumberOfCalls:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">waitDurationInOpenState:</span> <span class="number">2000</span></span><br><span class="line">        <span class="attr">permittedNumberOfCallsInHalfOpenState:</span> <span class="number">2</span></span><br><span class="line">      <span class="attr">breakerB:</span></span><br><span class="line">        <span class="attr">baseConfig:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure></li><li><p>在router匹配中加入<code>CircuitBreaker</code>过滤器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line"><span class="comment">#       根据权重匹配</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_high</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://httpbin.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">8</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestHeader=name,zhangsan</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddResponseHeader=response-headers,test</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">CircuitBreaker=breakerA</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">weight_low</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Weight=group1,</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>最后，我们的断路器就在该router匹配中生效了，<font color="red">但是注意的是一定是</font><code>circuitbreaker-reactor-resilience4j</code>依赖而不是<code>circuitbreaker-resilience4j</code></p></li></ol></li><li><p><code>SaveSession</code></p><blockquote><p>将客户端的session信息，连同请求和session一起转发到下游服务上，确保安全详细信息能够发送到下游服务器</p></blockquote></li></ul><p>过滤器有很多，这里不一一赘述，如果有需求可以查阅<code>SpringColud Gateway</code><a href="https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories">官方文档</a></p><h4 id="Http超时配置">Http超时配置</h4><p>可以为所有路由配置 Http 超时（响应和连接），并为每个特定路由覆盖。</p><h5 id="全局超时配置">全局超时配置</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">httpclient:</span></span><br><span class="line">        <span class="attr">connect-timeout:</span> <span class="number">1000</span></span><br><span class="line">        <span class="attr">response-timeout:</span> <span class="string">5s</span></span><br></pre></td></tr></table></figure><h5 id="特定路由覆盖">特定路由覆盖</h5><p>要配置每条路由超时：</p><ul><li><code>connect-timeout</code>必须以毫秒为单位指定。</li><li><code>response-timeout</code>必须以毫秒为单位指定。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">per_route_timeouts</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Path</span></span><br><span class="line">      <span class="attr">args:</span></span><br><span class="line">        <span class="attr">pattern:</span> <span class="string">/delay/&#123;timeout&#125;</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">response-timeout:</span> <span class="number">200</span></span><br><span class="line">    <span class="attr">connect-timeout:</span> <span class="number">200</span></span><br></pre></td></tr></table></figure><h2 id="十二，SpringCoudConfig">十二，SpringCoudConfig</h2><h3 id="简介-9">简介</h3><p>Spring Cloud Config为分布式系统中的外部配置提供服务器和客户端支持。使用Config Server，您可以在所有环境中管理应用程序的外部属性。客户端和服务器上的概念映射与Spring <code>Environment</code>和<code>PropertySource</code>抽象相同，因此它们与Spring应用程序非常契合，但可以与任何以任何语言运行的应用程序一起使用。随着应用程序通过从开发人员到测试和生产的部署流程，您可以管理这些环境之间的配置，并确定应用程序具有迁移时需要运行的一切。服务器存储后端的默认实现使用git，因此它轻松支持标签版本的配置环境，以及可以访问用于管理内容的各种工具。可以轻松添加替代实现，并使用Spring配置将其插入。</p><h3 id="ConfigServer">ConfigServer</h3><h4 id="准备工作">准备工作</h4><p>首先，我们知道<code>Spring Clod Config</code>是结合<code>Git</code>使用的，所以我们需要创建一个可以存放Spring配置文件的仓库,</p><p>仓库的创建，以及配置文件的上传这里不赘述</p><p>我们直接来看创建好的仓库，内部包含四个配置文件，接下来我们使用<code>Spring Clod Config Server</code>服务来访问这些配置文件</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211006220125018.png" alt="image-20211006220125018"></p><h4 id="创建Spring-Clod-Config-Server服务">创建<code>Spring Clod Config Server</code>服务</h4><p><strong>引入依赖</strong><img src="http://typora.xpp011.cn/typora/img/image-20211006214022352.png" alt="image-20211006214022352"></p><p><strong>配置</strong></p><p>创建<code>Spring Clod Config Server</code>服务后，需要在启动类上加入<code>@EnableConfigServer</code>注解,声明这是一台配置服务</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211006222548407.png" alt="image-20211006222548407"></p><p><strong>application配置</strong></p><ul><li>{application}—&gt;<font color="red">占位符</font>，请求连接的client的<code>spring.application.name</code>属性值</li></ul><p><font color="red">注意！！！</font></p><blockquote><p>在yaml文件中单独使用占位符时必须使用``单引号括起来</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="comment">#git仓库连接地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/xpp011/SpringCloudConfig.git</span></span><br><span class="line">          <span class="comment">#占位符——client的spring.application.name属性值</span></span><br><span class="line">          <span class="comment">#这样client服务就可以去仓库对应的文件下寻找配置文件</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">&#x27;&#123;application&#125;&#x27;</span></span><br><span class="line">          <span class="comment">#仓库用户名以及密码</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">xpp011</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">&quot;@S-R-YXXXX&quot;</span></span><br><span class="line">          <span class="comment">#git连接超时时间</span></span><br><span class="line">          <span class="comment">#timeout: 4</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3333</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后我们就可以在浏览器中通过url访问配置文件了</p><p>以下几种方式的<code>URL</code>都可以访问到配置文件</p><ul><li>application—配置文件的应用名称</li><li>profile—配置文件的环境</li><li>label—git分支</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/&#123;application&#125;/&#123;profile&#125;[/&#123;label&#125;]</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.yml</span><br><span class="line">/&#123;application&#125;-&#123;profile&#125;.properties</span><br><span class="line">/&#123;label&#125;/&#123;application&#125;-&#123;profile&#125;.properties</span><br></pre></td></tr></table></figure><h3 id="ConfigClient">ConfigClient</h3><h4 id="创建项目">创建项目</h4><p>引入依赖</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211006233429203.png" alt="image-20211006233429203"></p><p><font color="red">注意</font></p><p>注意在<code>SpringBoot2.4</code>之后使用<code>bootstrap.yml | bootstrap.properties</code>引导文件需要引入<code>spring-cloud-starter-bootstrap</code>依赖</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&lt;dependency&gt;</span></span><br><span class="line">    <span class="string">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span></span><br><span class="line">    <span class="string">&lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;</span></span><br><span class="line"><span class="string">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure><p>如果不使用<code>bootstrap.yml | bootstrap.properties</code>引导文件，配置<code>configServer</code>则在<code>application.yml</code>中加入以下属性</p><blockquote><p>spring.config.import=optional:configserver:<a href="http://myhost:8888">http://myhost:8888</a></p></blockquote><h4 id="配置文件">配置文件</h4><p><strong><code>bootstrap.yml</code>配置</strong></p><p>在<code>bootstrap.yml</code>中需要配置<code>configserver</code>服务信息</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#应用名称对应仓库的配置文件的&#123;application&#125;</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client1</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">#git分支对应&#123;label&#125;</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span></span><br><span class="line">      <span class="comment">#活跃的配置文件对应&#123;profile&#125;</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">$&#123;spring.profiles.active&#125;</span></span><br><span class="line">      <span class="comment">#configServer服务的ip地址</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">http://localhost:3333</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2222</span></span><br></pre></td></tr></table></figure><p><strong><code>application.yml</code>配置</strong></p><p>为了验证配置文件是否生效</p><p>我们自定义了两个属性<code>activate</code>和<code>serveractivate</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">activate:</span> <span class="string">&quot;null&quot;</span></span><br><span class="line"><span class="attr">serveractivate:</span> <span class="string">&quot;null&quot;</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2222</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#默认活跃的配置文件</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure><h4 id="验证接口">验证接口</h4><p>我们在git仓库中的配置文件配置了不同的<code>serveractivate</code>属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;activate&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String activate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;serveractivate&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String serveractivate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;activate=&gt;&quot;</span>+activate + <span class="string">&quot;\nserveractivate=&gt;&quot;</span>+serveractivate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取配置信息eureka"><strong>获取配置信息eureka</strong></h3><p>通过eureka获取配置信息的好处就是，<code>ConfigServer</code>服务可以随意改变坐标，而不用修改每一个<code>ConfigSlient</code>服务的配置文件</p><p>具体操作非常简单</p><p><strong>引入依赖</strong></p><p>首先我们需要将<code>ConfigServer</code>和<code>ConfigClient</code>注册到Eureka上去</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置<code>ConfigServer</code></strong></p><p><code>ConfigServer</code>的配置非常简单，只需简单配置以下<code>Eureka</code>的服务地址即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">config-server</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="attr">server:</span></span><br><span class="line">        <span class="attr">git:</span></span><br><span class="line">          <span class="comment">#git仓库连接地址</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://gitee.com/xpp011/SpringCloudConfig.git</span></span><br><span class="line">          <span class="comment">#占位符——client的spring.application.name属性值</span></span><br><span class="line">          <span class="comment">#这样client服务就可以去仓库对应的文件下寻找配置文件</span></span><br><span class="line">          <span class="attr">search-paths:</span> <span class="string">&#x27;&#123;application&#125;&#x27;</span></span><br><span class="line">          <span class="comment">#仓库用户名以及密码</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">xpp011</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">&quot;@S-R-Y(Gitee)&quot;</span></span><br><span class="line">          <span class="comment">#git连接超时时间</span></span><br><span class="line">          <span class="comment">#timeout: 4</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3333</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:1111/eureka</span></span><br></pre></td></tr></table></figure><p><strong>配置<code>ConfigClient</code></strong></p><p><code>ConfigClient</code>的配置第一步也是注册到<code>Eureka</code>上</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:1111/eureka</span></span><br></pre></td></tr></table></figure><p>然后我们需要开启配置文件的服务发现</p><blockquote><p><code>spring.cloud.config.discovery.enabled=true</code>（默认为<code>false</code>）</p></blockquote><p>最后我们需要指定注册中心上<code>ConfigServer</code>的服务名称，也就是<code>ConfigServer</code>配置文件中属性<code>spring.application.name</code>的值的大写</p><p>我们也可以去eureka上去查看</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211007233342550.png" alt="image-20211007233342550"></p><p>配置属性</p><blockquote><p>spring.cloud.config.discovery.serviceId=CONFIG-SERVER       (默认服务 ID 是<code>configserver</code>)</p></blockquote><p>最后别忘了取消属性~~<code>spring.cloud.config.uri</code>~~我们已经不需要它了</p><p><strong><code>bootstrap.yml</code>文件完整配置</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#应用名称对应仓库的配置文件的&#123;application&#125;</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client1</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="comment">#git分支对应&#123;label&#125;</span></span><br><span class="line">      <span class="attr">label:</span> <span class="string">main</span></span><br><span class="line">      <span class="comment">#活跃的配置文件对应&#123;profile&#125;</span></span><br><span class="line">      <span class="attr">profile:</span> <span class="string">$&#123;spring.profiles.active&#125;</span></span><br><span class="line">      <span class="comment">#configServer服务的ip地址</span></span><br><span class="line">      <span class="comment">#uri: http://CONFIG-SERVER:3333</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">service-id:</span> <span class="string">CONFIG-SERVER</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2222</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:1111/eureka</span></span><br></pre></td></tr></table></figure><h3 id="配置文件的加解密">配置文件的加解密</h3><p>在分布式环境下，一些由运维工程师掌握的敏感信息现在不得不写在配置文件中了，这样网传的程序员删库跑路的段子可能就成真了！但是在微服务中，我们又不太可能让运维工程师手动去维护这些信息，因为工作量太大了，那么一个好的办法，就是对这些配置信息进行加密，</p><h4 id="常见加密方法">常见加密方法</h4><p>说到加密，需要先和大家来捋一捋一些常见的加密策略，首先，从整体上来说，加密分为两大类：</p><ul><li><p>不可逆加密</p><blockquote><p>不可逆加密就是大家熟知的在 Spring Security 或者 Shiro 这一类安全管理框架中我们对密码加密经常采取的方案。这种加密算法的特点就是不可逆，即理论上无法使用加密后的密文推算出明文，常见的算法如 MD5 消息摘要算法以及 SHA 安全散列算法， SHA 又分为不同版本，这种不可逆加密相信大家在密码加密中经常见到。</p></blockquote></li><li><p>可逆加密</p><blockquote><p>可逆算法看名字就知道，这种算法是可以根据密文推断出明文的，可逆算法又分为两大类：</p><ul><li>对称加密</li></ul><blockquote><p>对称加密是指加密的密钥和解密的密钥一致，例如 A 和 B 之间要通信，为了防止别人偷听，两个人提前约定好一个密钥。每次发消息时， A 使用这个密钥对要发送的消息进行加密，B 收到消息后则使用相同的密钥对消息进行解密。这是对称加密，常见的算法有 DES、3DES、AES 等。</p></blockquote><ul><li>非对称加密</li></ul><blockquote><p>对称加密在一些场景下并不适用，特别是在一些一对多的通信场景下，于是又有了非对称加密，非对称加密就是加密的密钥和解密的密钥不是同一个，加密的密钥叫做公钥，这个可以公开告诉任何人，解密的密钥叫做私钥，只有自己知道。非对称加密不仅可以用来做加密，也可以用来做签名，使用场景还是非常多的，常见的加密算法是 RSA 。</p></blockquote></blockquote></li></ul><p>配置文件加密肯定是可逆加密，不然给我一个加密后的字符串，我拿着也没用，还是没法使用。可逆算法中的对称加密和非对称加密在 Spring Cloud Config 中都得到支持，下面我们就分别来看。</p><h4 id="对称加密">对称加密</h4><p>Java 中提供了一套用于实现加密、密钥生成等功能的包 JCE(Java Cryptography Extension)，这些包提供了对称、非对称、块和流密码的加密支持，但是默认的 JCE 是一个有限长度的 JCE ，我们需要到 Oracle 官网去下载一个不限长度的 JCE ：<br>不限长度JCE下载地址</p><p>下载完成后，将下载文件解压，解压后的文件包含如下三个文件：<br><img src="http://typora.xpp011.cn/typora/img/image-20211010212147266.png" alt="image-20211010212147266"></p><p>将<code>local_policy.jar</code>和<code>US_export_policy.jar</code>两个文件拷贝到 JDK 的安装目录下，具体位置是 <code>%JAVA_HOME%\jre\lib\security</code> ，如果该目录下有同名文件，则直接覆盖即可。</p><p>然后我们在<code>ConfigServer</code>服务中配置对称加密的密钥</p><p>注意该配置需要加在<code>bootstrap.yml</code>引导文件中</p><p>此外我们还需要开启健康监控，方便查看暴露端点</p><p>所以我们需要引入以下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启bootstrap引导文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>bootstrap.yml</code>配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对称加密的密钥</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">xpp011</span></span><br></pre></td></tr></table></figure><p>配置完成后启动服务，我们查看端点</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211010214218994.png" alt="image-20211010214218994"></p><p>我们可以将需要加密的密码进行加密，得到密文后，写在目标配置文件中</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211010214014644.png" alt="image-20211010214014644"></p><p><font color="red">注意</font></p><ul><li><font color="red">为了区分密文和正常的字符串，我们需要在密文前机加上</font><code>&#123;cipher&#125;</code><font color="red">前缀，标识它是一串密文</font></li><li>在<code>yaml</code><font color="red">配置文件中，具有特殊含义的字符一定要加上</font><font color="red">‘单引号</font></li></ul><p><img src="http://typora.xpp011.cn/typora/img/image-20211010214941171.png" alt="image-20211010214941171"></p><p>我们可以在<code>ConfigServer</code>服务上查看该配置文件</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211010215344172.png" alt="image-20211010215344172"></p><h4 id="非对称加密">非对称加密</h4><p>当然我们也可以使用非对称加密的方式来对配置文件进行加密，非对称加密要求我们先有一个密钥，密钥的生成我们可以使用 JDK 中自带的 keytool。keytool 是一个 Java 自带的数字证书管理工具 ，keytool 将密钥（key）和证书 （certificates） 存在一个称为 keystore 的文件中。具体操作步骤如下：<br>首先打开命令行窗口，输入如下命令：</p><blockquote><p>keytool -genkeypair -alias config-server -keyalg RSA -keystore D:\win10桌面存放\SpringCloud\config-server.keystore</p></blockquote><p>上面参数的解释如下:</p><ul><li><p>-genkeypair 表示生成密钥对</p></li><li><p>-alias 表示 keystore 关联的别名</p></li><li><p>-keyalg 表示指定密钥生成的算法</p></li><li><p>-keystore 指定密钥库的位置和名称</p><p>执行过程中，密钥库口令需要牢记，这个我们在后面还会用到。其它的信息可以输入也可以直接回车表示 Unknown ，自己做练习无所谓，实际开发中还是建议如实填写。</p></li></ul><p><img src="http://typora.xpp011.cn/typora/img/image-20211010222054367.png" alt="image-20211010222054367"></p><p>好了，这个命令执行完成后，在 <code>D:\win10桌面存放\SpringCloud</code>路径下就会生成一个名为 config-server.keystore 的文件，将这个文件直接拷贝到 <code>ConfigServer</code>服务项目的 classpath 下，如下:</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211010222358996.png" alt="image-20211010222358996"></p><p>然后我们需要在<code>bootstrap.yml</code>配置文件中简单配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对称加密的密钥</span></span><br><span class="line"><span class="comment">#encrypt:</span></span><br><span class="line"><span class="comment">#  key: xpp011</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#非对称加密</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="attr">key-store:</span></span><br><span class="line">    <span class="attr">location:</span> <span class="string">config-server.keystore</span></span><br><span class="line">    <span class="attr">alias:</span> <span class="string">config-server</span></span><br><span class="line">    <span class="comment">#生成证书时输入的口令</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xpp011</span></span><br><span class="line">    <span class="attr">secret:</span> <span class="string">xpp011</span></span><br></pre></td></tr></table></figure><p><font color="red">注意：</font></p><p>如果无法加载证书，请检查<code>maven</code>生成target文件时是否把证书过滤掉了</p><p>服务启动完成后，访问接口<code>/encrypt</code>加密正文</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211010223044389.png" alt="image-20211010223044389"></p><p>也可访问接口<code>/decrypt</code>，将密文解密</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211010223305669.png" alt="image-20211010223305669"></p><p>同理，我们将密文写在git仓库的配置文件之中</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211010223929087.png" alt="image-20211010223929087"></p><p>由此可以看出，所有的加密解密工作全部交给<code>ConfigServer</code>服务，而<code>ConfigClient</code>只负责获取配置</p><h3 id="安全管理">安全管理</h3><p>目前的 <code>ConfigServer</code> 存在很大的安全隐患，因为所有的数据都可以不经过 <code>ConfigClient </code>直接访问。出于数据安全考虑，我们要给 <code>ConfigServer</code> 中的接口加密。在 Spring Boot 项目中，项目加密方案当然首选 <code>Spring Security </code>，使用<code>Spring Security</code>也很简单，只需要在 <code>ConfigServer</code> 项目中添加如下依赖即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>ConfigServer</code>的配置文件中简单配置一下<code>Security</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">xpp011</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xpp011</span></span><br></pre></td></tr></table></figure><p>注意此时，我们再去访问<code>ConfigServer</code>服务的接口就需要登录了，证明<code>ConfigServer</code>服务起到了保护作用</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211010231555727.png" alt="image-20211010231555727"></p><p>如果此时我们的<code>ConfigClient</code>不去配置登录信息的话就无法在<code>ConfigServer</code>拿取配置文件了</p><p>配置<code>ConfigClient</code>的<code>bootstrap.yml</code>文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#应用名称对应仓库的配置文件的&#123;application&#125;</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client1</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line">      <span class="comment">#ConfigServer的登录信息</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">xpp011</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">xpp011</span></span><br></pre></td></tr></table></figure><h3 id="动态刷新">动态刷新</h3><p>在更改Git仓库的配置文件后，服务的配置发生了变化，此时服务不能及时的重启去加载新的配置文件，为了解决整个问题，我们需要让服务可以实现配置文件的动态刷新</p><h4 id="Autuator实现">Autuator实现</h4><p>该方法只是简单的实现了动态刷新，引用<code>Autuator</code>依赖只是为了使用其中的<code>/actuator/refresh</code>端点重启服务</p><p>在<code>ConfigClient</code>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>暴露<code>/refresh</code>端点</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><p>更改配置文件后调用端点<code>/actuator/refresh</code>对应用进行重启，重加载配置文件</p><h3 id="客户端重试">客户端重试</h3><p>由于在分布式体系中，分区容错、网络波动的情况非常常见，在此期间注册中心，客户端服务，配置服务都有可能出现网络波动，那我的客户端请求不到配置就算了吗，肯定不是这样的，我们需要在网络波动的时候不断的请求我们的配置</p><h4 id="快速失败">快速失败</h4><p>首先我们需要配置客户端无法来连接配置服务器时快速失败，而不是略过，加载下一配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.cloud.config.fail-fast</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>这样在我们的服务请求不到配置时，就直接抛异常快速失败</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211011233415816.png" alt="image-20211011233415816"></p><h4 id="请求重试">请求重试</h4><p>需要将<code>spring-retry</code>和添加<code>spring-boot-starter-aop</code>到我们的项目之中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.retry<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-retry<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认行为是重试六次，初始退避间隔为 1000 毫秒，后续退避的指数乘数为 1.1。可以通过设置<code>spring.cloud.config.retry.*</code>配置属性来配置这些属性（和其他属性）</p><p>可以看到，配置客户端重试非常简单，只需引入依赖，即可马上开箱即由</p><p>以下是，客户端在请求不到配置时，不断尝试请求</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211011233951478.png" alt="image-20211011233951478"></p><p>我们也可以配置<code>spring.cloud.config.retry.*</code>重试规则</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="comment">#应用名称对应仓库的配置文件的&#123;application&#125;</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">client1</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">config:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">      <span class="attr">retry:</span></span><br><span class="line">        <span class="comment">#最大重试次数</span></span><br><span class="line">        <span class="attr">max-attempts:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment">#重试间隔</span></span><br><span class="line">        <span class="attr">initial-interval:</span> <span class="number">2000</span></span><br><span class="line">        <span class="comment">#最大重试间隔</span></span><br><span class="line">        <span class="attr">max-interval:</span> <span class="number">10000</span></span><br><span class="line">        <span class="comment">#后续重试间隔的乘数(避免有规律的网络抖动)</span></span><br><span class="line">        <span class="attr">multiplier:</span> <span class="number">1.5</span></span><br></pre></td></tr></table></figure><p>配置详解</p><ul><li><p><code>max-attempts</code></p><blockquote><p>最大重试次数</p></blockquote></li><li><p><code>initial-interval</code></p><blockquote><p>重试间隔</p></blockquote></li><li><p><code>max-interval</code></p><blockquote><p>最大重试间隔</p></blockquote></li><li><p><code>multiplier</code></p><blockquote><p>后续退避的指数乘数</p></blockquote></li></ul><h2 id="十三，SpringCloudBus">十三，SpringCloudBus</h2><p>Spring Cloud Bus 将分布式系统的节点与轻量级消息代理连接起来。然后可以使用此代理来广播状态更改（例如配置更改）或其他管理指令。一个关键的想法是，总线就像一个用于横向扩展的 Spring Boot 应用程序的分布式执行器。但是，它也可以用作应用程序之间的通信渠道。该项目为 AMQP 代理或 Kafka 提供启动器作为传输。</p><h3 id="快速入门">快速入门</h3><p>如果需要使用<code>SpringCloudBus</code>消息总线，那么需要引入依赖<code>spring-cloud-starter-bus-amqp</code>或 添加<code>spring-cloud-starter-bus-kafka</code>，<code>SpringCloudBus</code>启动器涵盖了 <code>Rabbit</code> 和<code> Kafka</code>，因为这是两个最常见的实现。</p><blockquote><p>但是，<code>Spring Cloud Stream </code>非常灵活，并且与<code>spring-cloud-bus</code>很好的结合</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--由于Bus需要提供端点，需要健康检查的依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>rabbitMq</code>以及<code>actuator</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.32</span><span class="number">.131</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xpp011</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xpp011</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">      <span class="comment">#暴露端点</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure><h3 id="总线端点">总线端点</h3><h4 id="busrefresh">busrefresh</h4><ul><li><p><code>/actuator/busrefresh</code></p><blockquote><p>针对<code>ConfigServer</code>的接口由于通知接入<code>RabbitMq</code>的服务进行刷新配置重启操作</p></blockquote></li></ul><p><img src="https://img-blog.csdnimg.cn/20181204172531555.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Mjg4NjA2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><font color="red">注意</font></p><blockquote><p>busrefresh接口确实可以将客户端服务进行重新加载配置操作</p><p>但是注意如果需要有一个接口查看配置信息，如果以下代码块，使用<code>$</code>符号引用配置文件值,如果在配置未重新加载前获取该值，那么该值会一直保留重新加载前的值，即使服务重新加载配置后，该值还是保留原来jvm加载的值。</p><p>如果希望，该值可以随着配置文件的加载而加载，需要在该类上加上<code>@RefreshScope</code>注解即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;activate&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String activate;</span><br></pre></td></tr></table></figure></blockquote><h4 id="busrefresh-2">busrefresh/**</h4><p>通过目标路径指定服务刷新配置</p><p>应用程序的每个实例都有一个服务 ID，它的值可以设置 <code>spring.cloud.bus.id</code>,默认值是从环境中构造的<code>spring.application.name</code>和 <code>server.port</code>（或<code>spring.application.index</code>，如果设置）的组合。ID的默认值以 的形式构造<code>app:index:id</code>，其中：</p><ul><li><code>app</code>是<code>vcap.application.name</code>，如果它存在，或者<code>spring.application.name</code></li><li><code>index</code>是<code>vcap.application.instance_index</code>, 如果存在, <code>spring.application.index</code>, <code>local.server.port</code>, <code>server.port</code>, 或<code>0</code>(按此顺序)。</li><li><code>id</code>是<code>vcap.application.instance_id</code>，如果存在，或者是一个随机值。(<font color="red">不存在则不参与改造ID</font>)</li></ul><p>HTTP 端点接受“目标”路径参数，例如 <code>busrefresh/client1:2222</code>，其中<code>destination</code>是服务 ID。如果该 ID 由总线上的一个实例拥有，它会处理该消息，而所有其他实例将忽略它。</p><h4 id="实例">实例</h4><p>我们启用两个客户端分别是<code>2222</code>和<code>2223</code>端口</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211012233333782.png" alt="image-20211012233333782"></p><p>更改Git仓库中的配置文件</p><p>然后通过<code>Postman</code>请求带有指定“目标”的路径</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211012233456226.png" alt="image-20211012233456226"></p><p>最后我们查看两个服务查看配置文件属性的接口,可以发现，成功指定了服务进行刷新配置</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211012233655669.png" alt="image-20211012233655669"></p><h2 id="十四，SpringCloudStream">十四，SpringCloudStream</h2><p>Spring Cloud Stream 是用于构建消息驱动的微服务应用程序的框架。Spring Cloud Stream 构建在 Spring Boot 的基础上，以创建独立的、生产级的 Spring 应用程序，并使用 Spring Integration 提供与消息代理的连接。它提供了来自多个供应商的中间件的自以为是的配置，介绍了持久发布订阅语义、消费者组和分区的概念。</p><p>通过简单地将 spring-cloud-stream 依赖项添加到应用程序的类路径，您将立即连接到通过提供的 spring-cloud-stream 绑定器公开的消息代理（稍后会详细介绍），并且您可以实现您的功能需求使用简单的基于传入消息执行</p><h3 id="快速开始">快速开始</h3><p>创建具有以下依赖的服务</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211013225729943.png" alt="image-20211013225729943"></p><p>创建一个消费者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.0支持函数式编程</span></span><br><span class="line"><span class="comment">     * 创建一个消费者，其参数Person会根据json解析并强制类型转换</span></span><br><span class="line"><span class="comment">     * 创建了一个名称为log-in-0的Exchanges</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Consumer&lt;Person&gt; <span class="title">log</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;log1=======&gt;&quot;</span>+person);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>简单配置一下<code>application.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.32</span><span class="number">.131</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xpp011</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xpp011</span></span><br></pre></td></tr></table></figure><p>此时我们在<code>rabbitMq</code>发送消息时，该bean就会接收到</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211013232651862.png" alt="image-20211013232651862"></p><h3 id="自定义通道">自定义通道</h3><p>我们可以通过<code>SpringCloudStream3.0</code>的bean方式来创建供应商消费者</p><p><a name="rule"><strong>绑定输入输出的名称规则如下</strong></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Function&lt;String, String&gt; <span class="title">uppercase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value -&gt; value.toUpperCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输入 - <code>&lt;functionName&gt; + -in- + &lt;index&gt;</code></li><li>输出 - <code>&lt;functionName&gt; + -out- + &lt;index&gt;</code></li></ul><p><code>in</code>和<code>out</code>对应于结合的类型（如<em>输入</em>或<em>输出</em>）</p><p><code>index</code>是输入或输出的结合的索引。对于典型的单个输入/输出函数，它始终为 0，因此它仅与<a href="https://docs.spring.io/spring-cloud-stream/docs/current/reference/html/spring-cloud-stream.html#_functions_with_multiple_input_and_output_arguments">具有多个输入和输出参数的函数</a>相关。</p><p><strong>消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerBeans</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个消费者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Consumer&lt;String&gt; <span class="title">now</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//将事件驱动得到的消息直接打印</span></span><br><span class="line">        <span class="keyword">return</span> s -&gt; System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>供应商</strong></p><p><code>Supplier</code>的默认触发调用方式是一秒执行一次，也就是说该供应商将会每一秒制造一次消息</p><p><strong>如果我们不想让<code>Supplier</code>采用轮询的方式制造消息，我们直接让该方法返回<code>null</code>即可</strong></p><blockquote><p>@Bean<br>public Supplier<String> noPoll()    { return () -&gt; null;}</String></p></blockquote><p>具体可查看<a href="#trigger">触发方式</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupplierBeans</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 轮询</span></span><br><span class="line"><span class="comment">     * 创建一个供应商bean用于生产消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Supplier&lt;String&gt; <span class="title">date</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; <span class="keyword">new</span> Date().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码我们创建好了供应商，消费者</p><p>接下来我们需要将他们两个进行绑定,绑定的名称规则需要符合<a href="#rule">名称规则</a></p><p><strong><code>application.yml</code></strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.32</span><span class="number">.131</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xpp011</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xpp011</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="comment">#将创建的生产者消费者捆绑到一起</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="attr">date-out-0:</span></span><br><span class="line">          <span class="comment">#保定到My-Topic的Exchanges</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">My-Topic</span></span><br><span class="line">        <span class="attr">now-in-0:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">My-Topic</span></span><br><span class="line">    <span class="comment">#申明以下bean属于stream，一定要配置</span></span><br><span class="line">    <span class="attr">function:</span></span><br><span class="line">      <span class="attr">definition:</span> <span class="string">now;date</span></span><br></pre></td></tr></table></figure><p>值得注意的是，当我们创建多个类型的<code>java.util.function.[Supplier/Function/Consumer]</code>Bean时，我们需要通过<code>spring.cloud.function.definition</code>进行声明，同时这也是必须的</p><p><strong>效果</strong></p><p><img src="http://typora.xpp011.cn/typora/img/image-20211014233758209.png" alt="image-20211014233758209"></p><p><a name="trigger"><strong>触发方式</strong></a></p><p><code>Function</code>并且<code>Consumer</code>在涉及如何触发它们的调用时非常简单。它们是根据发送到它们绑定到的目的地的数据（事件）触发的。换句话说，它们是经典的事件驱动组件。</p><p>但是，<code>Supplier</code>在触发方面属于它自己的类别。由于根据定义，它是数据的源（源），它不订阅任何入站目的地，因此必须由一些其他机制触发。还有的问题<code>Supplier</code>实现方式中，这可能是<em>必要的</em>或<em>反应性</em>和其直接涉及这样的供应商的触发。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SupplierConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Supplier&lt;String&gt; <span class="title">stringSupplier</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> () -&gt; <span class="string">&quot;Hello from Supplier&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Supplier</code>每当<code>get()</code>调用其方法时，前面的bean 都会生成一个字符串。但是，谁调用这个方法，多久调用一次？该框架提供了一个默认的轮询机制（回答“谁？”的问题），它将触发供应商的调用，并且默认情况下它会每秒执行一次（回答“多久？”的问题）。换句话说，上述配置每秒生成一条消息，并且每条消息都发送到<code>output</code>由绑定器公开的目的地。要了解如何自定义轮询机制，请参阅<a href="https://docs.spring.io/spring-cloud-stream/docs/current/reference/html/spring-cloud-stream.html#_polling_configuration_properties">轮询配置属性</a>部分。</p><h3 id="分组">分组</h3><p>当我们在两个服务内同时订阅了输入通道<code>now-in-0</code>，同时绑定的路由也是同一个，那么这两个服务都会同时消费输入通道<code>now-in-0</code>内的消息，也就是说一个通道的消息被消费了两次，那如果我们想要实现一个通道的消息只被消费一次该怎么办呢，</p><p>这时就有了分组的概念</p><p>使用配置将输入通道分到<code>g1</code>组</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">....</span></span><br><span class="line"> <span class="attr">stream:</span></span><br><span class="line">     <span class="attr">bindings:</span></span><br><span class="line">       <span class="comment">#供应商  绑定到名为my-topic的exchange</span></span><br><span class="line">       <span class="attr">date-out-0:</span></span><br><span class="line">         <span class="attr">destination:</span> <span class="string">my-topic</span></span><br><span class="line">         <span class="attr">group:</span> <span class="string">g1</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">#消费者  绑定到名为my-topic的exchange</span></span><br><span class="line">       <span class="attr">now-in-0:</span></span><br><span class="line">         <span class="attr">destination:</span> <span class="string">my-topic</span></span><br><span class="line">         <span class="attr">group:</span> <span class="string">g1</span></span><br></pre></td></tr></table></figure><p>可以看到，rabbitMq创建了一个<code>g1</code>队列，该队列下有两个消费者，对应着服务A和服务B</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211017230643101.png" alt="image-20211017230643101"></p><p><img src="http://typora.xpp011.cn/typora/img/image-20211017230810336.png" alt="image-20211017230810336"></p><p>此时，这两个消费者，会采用轮询的方式消费该队列的消息，而不再是一个消息被消费两次或者多次</p><p><font color="red">在未分组前，一个Consumer连接就是一个队列</font></p><h3 id="分区">分区</h3><p>由于分组无法决定那个连接消费消息，所以我们需要设置分组，来保证消息可以指定消费</p><p><strong>创建供应商</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SupplierBeans</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 非轮询方式，不产生任何消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Supplier&lt;Message&lt;String&gt;&gt; noPoll()&#123;</span><br><span class="line">        <span class="keyword">return</span> () -&gt; <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>创建消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerBeans</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个消费者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Consumer&lt;Message&lt;String&gt;&gt; now()&#123;</span><br><span class="line">        <span class="comment">//将事件驱动得到的消息直接打印</span></span><br><span class="line">        <span class="keyword">return</span> s -&gt; System.out.println(s.getPayload()+<span class="string">&quot;\n&quot;</span>+</span><br><span class="line">                s.getHeaders().get(AmqpHeaders.CONSUMER_QUEUE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>application.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.32</span><span class="number">.131</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xpp011</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xpp011</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="comment">#申明以下bean属于stream</span></span><br><span class="line">    <span class="attr">function:</span></span><br><span class="line">      <span class="attr">definition:</span> <span class="string">now;noPoll</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">stream:</span></span><br><span class="line">      <span class="attr">bindings:</span></span><br><span class="line">        <span class="comment">#消费者  绑定到名为my-topic的exchange</span></span><br><span class="line">        <span class="attr">now-in-0:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">my-topic</span></span><br><span class="line">          <span class="attr">group:</span> <span class="string">myGroup</span></span><br><span class="line">          <span class="attr">consumer:</span></span><br><span class="line">            <span class="comment">#开启分组</span></span><br><span class="line">            <span class="attr">partitioned:</span> <span class="literal">true</span></span><br><span class="line">            <span class="comment">#所属分组下标</span></span><br><span class="line">            <span class="attr">instance-index:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#非轮询方式的Supplier</span></span><br><span class="line">        <span class="attr">noPoll-out-0:</span></span><br><span class="line">          <span class="attr">destination:</span> <span class="string">my-topic</span></span><br><span class="line">          <span class="attr">producer:</span></span><br><span class="line">            <span class="comment">#partition-key-expression就是生产者的路由分配功能 依据该字段来分区到指定队列</span></span><br><span class="line">            <span class="attr">partition-key-expression:</span> <span class="string">headers[&#x27;partitionKey&#x27;]</span></span><br><span class="line">            <span class="comment">#分组的数量</span></span><br><span class="line">            <span class="attr">partition-count:</span> <span class="number">2</span></span><br><span class="line">            <span class="comment">#分组名称   可以配置多个</span></span><br><span class="line">            <span class="attr">required-groups:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">myGroup</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">poller:</span></span><br><span class="line">        <span class="comment">#单次轮询最大消息</span></span><br><span class="line">        <span class="attr">max-messages-per-poll:</span> <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>使用请求发送消息</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NowController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StreamBridge streamBridge;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String outputName,String payload,Integer index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//outputName——向那个路由发送消息</span></span><br><span class="line">            <span class="comment">//payload——有效载荷，消息体</span></span><br><span class="line">            <span class="comment">//index——消息头的partitionKey字段值，决定该消息被那一组消费</span></span><br><span class="line">            streamBridge.send(outputName,</span><br><span class="line">                    MessageBuilder.withPayload(payload)</span><br><span class="line">                    .setHeader(<span class="string">&quot;partitionKey&quot;</span>,index).build());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动服务</strong></p><p>我们再创建一个服务,配置如下</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211018234828163.png" alt="image-20211018234828163"></p><p>配置完成后，分别启动两个项目</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211018234917430.png" alt="image-20211018234917430"></p><p><strong>讲解</strong></p><p>创建和配置好Bean后，我们来看一下<code>RabbitMq</code></p><p>可以看到，创建了一个名<code>my-topic</code>的路由,该路由下具有两个队列，这两个队列是分组队列，名称都是以<code>myGroup</code>为前缀，</p><p>这个是由<code>supplier</code>的<code>required-groups</code>配置决定的</p><p>那为什么是两个分组呢,这也是由<code>supplier</code>的<code>partition-count</code>的配置决定的</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211018233825488.png" alt="image-20211018233825488"></p><p>接下来我们详细查看这两个队列</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211018234719180.png" alt="image-20211018234719180"></p><p>可以看到，两个分组下各有一个连接，那么当我请求url</p><blockquote><p><a href="http://localhost:8080/send?payload=%E8%B0%A2%E8%B0%A2%E4%BD%A0&amp;outputName=noPoll-out-0&amp;index=0">localhost:8080/send?payload=谢谢你&amp;outputName=noPoll-out-0&amp;index=0</a></p></blockquote><p>通过控制index的值，就可以指定消息被哪一组的连接消费了</p><p><strong>重点</strong></p><ul><li>分组是依靠消息头中的<code>partitionKey</code>实现的</li></ul><h3 id="外部数据发送到Supplier">外部数据发送到Supplier</h3><p>在某些情况下，实际数据源可能来自不是绑定器的外部（外国）系统。例如，数据源可能是经典的 REST 端点。我们如何将此类源与 spring-cloud-stream 使用的功能机制连接起来？</p><p>Spring Cloud Stream 提供了两种机制，让我们更详细地了解它们</p><p>在这里，对于这两个示例，我们将使用称为<code>delegateToSupplier</code>绑定到根 Web 上下文的标准 MVC 端点方法，通过两种不同的机制将传入请求委托给流 - 命令式（通过 StreamBridge）和反应式（通过 EmitterProcessor）。</p><p><strong>Supplicat以及Consumer还是以上配置</strong></p><h4 id="StreamBridge"><strong><a href="https://docs.spring.io/spring-cloud-stream/docs/current/reference/html/spring-cloud-stream.html#_using_streambridge"> StreamBridge</a></strong></h4><ul><li><p><code>outputName</code></p><blockquote><p>输出通道名称</p></blockquote></li><li><p><code>payload</code></p><blockquote><p>消息体</p></blockquote></li></ul><p>当我们创建以下接口后，每当我们调用URL<code>localhost:8080/send?payload=谢谢你&amp;outputName=date-out-0</code>,都会在输出通道<code>date-out-0</code>发送一条<code>谢谢你</code>的消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NowController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StreamBridge streamBridge;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">send</span><span class="params">(String outputName,String payload)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            streamBridge.send(outputName,payload);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">return</span> e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;发送成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EmitterProcessor">EmitterProcessor</h4><p>另一种可用于将任意数据发送到输出的方法是使用 Reactor API。</p><p>我们需要做的就是声明一个 从反应器 API<code>Supplier&lt;Flux&lt;whatever&gt;&gt;</code>返回<a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/EmitterProcessor.html">EmitterProcessor</a>（有关更多详细信息，请参阅<a href="https://docs.spring.io/spring-cloud-stream/docs/current/reference/html/spring-cloud-stream.html#_reactive_functions_support">Reactive Functions 支持</a>）以有效地提供实际事件源（<em>外源</em>）和 spring-cloud-stream之间的桥梁。现在，您现在需要做的就是<code>EmitterProcessor</code>通过<code>EmitterProcessor#onNext(data)</code>操作提供数据。</p><p>例如，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">               SpringApplication.run(SampleApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    EmitterProcessor&lt;String&gt; processor = EmitterProcessor.create();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ApplicationRunner <span class="title">runner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Message&lt;String&gt; msg1 = MessageBuilder.withPayload(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">                .setHeader(<span class="string">&quot;*.events&quot;</span>, <span class="string">&quot;test1.events.billing&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        Message&lt;String&gt; msg2 = MessageBuilder.withPayload(<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">                .setHeader(<span class="string">&quot;*.events&quot;</span>, <span class="string">&quot;test2.events.messages&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.processor.onNext(msg1);</span><br><span class="line">            <span class="keyword">this</span>.processor.onNext(msg2);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Supplier&lt;Flux&lt;String&gt;&gt; supplier() &#123;</span><br><span class="line">               <span class="keyword">return</span> () -&gt; <span class="keyword">this</span>.processor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十五，链路追踪">十五，链路追踪</h2><h3 id="Spring-Cloud-Sleuth"><a href="https://docs.spring.io/spring-cloud-sleuth/docs/current/reference/html/getting-started.html#getting-started-introducing-spring-cloud-sleuth">Spring Cloud Sleuth</a></h3><p>参考链接:<a href="https://zhuanlan.zhihu.com/p/136593164">https://zhuanlan.zhihu.com/p/136593164</a></p><h4 id="简介-10">简介</h4><p>随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要一些可以帮助理解系统行为、用于分析性能问题的工具，以便发生故障的时候，能够快速定位和解决问题。在复杂的微服务架构系统中，几乎每一个前端请求都会形成一个复杂的分布式服务调用链路。一个请求完整调用链可能如下图所示：</p><p><img src="https://pic1.zhimg.com/80/v2-dda8eb422443d1fe51778449322c6710_720w.jpg" alt="img"></p><p>随着服务的越来越多，对调用链的分析会越来越复杂。它们之间的调用关系也许如下：</p><p><img src="https://pic3.zhimg.com/80/v2-5c0639334a2dd2ed64883842e0a5c9e6_720w.jpg" alt="img"></p><p>随着业务规模不断增大、服务不断增多以及频繁变更的情况下，面对复杂的调用链路就带来一系列问题：</p><ul><li>如何快速发现问题？</li><li>如何判断故障影响范围？</li><li>如何梳理服务依赖以及依赖的合理性？</li><li>如何分析链路性能问题以及实时容量规划？</li></ul><p>而链路追踪的出现正是为了解决这种问题，它可以在复杂的服务调用中定位问题，还可以在新人加入后台团队之后，让其清楚地知道自己所负责的服务在哪一环。</p><p>除此之外，如果某个接口突然耗时增加，也不必再逐个服务查询耗时情况，我们可以直观地分析出服务的性能瓶颈，方便在流量激增的情况下精准合理地扩容。</p><h4 id="什么是链路追踪">什么是链路追踪</h4><p>“链路追踪”一词是在 2010 年提出的，当时谷歌发布了一篇 Dapper 论文：<a href="https://link.zhihu.com/?target=http%3A//bigbully.github.io/Dapper-translation/">Dapper，大规模分布式系统的跟踪系统</a>，介绍了谷歌自研的分布式链路追踪的实现原理，还介绍了他们是怎么低成本实现对应用透明的。</p><p><strong>单纯的理解链路追踪，就是指一次任务的开始到结束，期间调用的所有系统及耗时（时间跨度）都可以完整记录下来。</strong></p><p>其实 Dapper 一开始只是一个独立的调用链路追踪系统，后来逐渐演化成了监控平台，并且基于监控平台孕育出了很多工具，比如实时预警、过载保护、指标数据查询等。</p><p>除了谷歌的 Dapper，还有一些其他比较有名的产品，比如阿里的鹰眼、大众点评的 CAT、Twitter 的 Zipkin、Naver（著名社交软件LINE的母公司）的 PinPoint 以及国产开源的 SkyWalking（已贡献给 Apache） 等。</p><h4 id="什么是-Sleuth">什么是 Sleuth</h4><p>Spring Cloud Sleuth 为 Spring Cloud 实现了分布式跟踪解决方案。兼容 Zipkin，HTrace 和其他基于日志的追踪系统，例如 ELK（Elasticsearch 、Logstash、 Kibana）。</p><p>Spring Cloud Sleuth 提供了以下功能：</p><ul><li><code>链路追踪</code>：通过 Sleuth 可以很清楚的看出一个请求都经过了那些服务，可以很方便的理清服务间的调用关系等。</li><li><code>性能分析</code>：通过 Sleuth 可以很方便的看出每个采样请求的耗时，分析哪些服务调用比较耗时，当服务调用的耗时随着请求量的增大而增大时， 可以对服务的扩容提供一定的提醒。</li><li><code>数据分析，优化链路</code>：对于频繁调用一个服务，或并行调用等，可以针对业务做一些优化措施。</li><li><code>可视化错误</code>：对于程序未捕获的异常，可以配合 Zipkin 查看。</li></ul><h4 id="术语">术语</h4><ol><li><p><strong>Span</strong>：基本工作单位，一次单独的调用链可以称为一个 Span，Dapper 记录的是 Span 的名称，以及每个 Span 的 ID 和父 ID，以重建在一次追踪过程中不同 Span 之间的关系，图中一个矩形框就是一个 Span，前端从发出请求到收到回复就是一个 Span。</p><p><img src="https://pic2.zhimg.com/80/v2-456c15a52635b52f91de335afeccba2d_720w.jpg" alt="img"></p><blockquote><p>开始跟踪的初始跨度称为<code>root span</code>。该跨度的 ID 的值等于跟踪 ID。</p></blockquote><p>Dapper 记录了 span 名称，以及每个 span 的 ID 和父 span ID，以重建在一次追踪过程中不同 span 之间的关系。如果一个 span 没有父 ID 被称为 root span。所有 span 都挂在一个特定的 Trace 上，也共用一个 trace id。</p><p><img src="https://pic4.zhimg.com/80/v2-412974ef70e7998f6537e394d40660df_720w.jpg" alt="img"></p></li><li><p><strong>Trace</strong>：一系列 Span 组成的树状结构，一个 Trace 认为是一次完整的链路，内部包含 n 多个 Span。Trace 和 Span 存在一对多的关系，Span 与 Span 之间存在父子关系。</p><p>举个例子：客户端调用服务 A 、服务 B 、服务 C 、服务 F，而每个服务例如 C 就是一个 Span，如果在服务 C 中另起线程调用了 D，那么 D 就是 C 的子 Span，如果在服务 D 中另起线程调用了 E，那么 E 就是 D 的子 Span，这个 C -&gt; D -&gt; E 的链路就是一条 Trace。如果链路追踪系统做好了，链路数据有了，借助前端解析和渲染工具，可以达到下图中的效果：</p><p><img src="https://pic2.zhimg.com/80/v2-613fbad15779ac22757cdaa2cab3f801_720w.jpg" alt="img"></p></li><li><p><strong>Annotation/Event</strong>：用来及时记录一个事件的存在，一些核心 annotations 用来定义一个请求的开始和结束。</p><ol><li><strong>cs-Client-Sent</strong>：客户端发送一个请求，这个注解描述了Span的开始</li><li><strong>sr-Server Received</strong>：服务端获得请求并准备开始处理它，如果将sr减去cs时间戳，便可得到网络传输的时间</li><li><strong>ss-Server Sent</strong>：服务端发送响应，该注解表明请求处理的完成（当请求返回客户端），用ss的时间戳减去sr时间戳，便可以得到服务器请求的时间</li><li><strong>cr-Client Received</strong>：客户端接收响应，此时Span结束，如果cr的时间戳减去cs时间戳，便可以得到整个请求所消耗的时间</li></ol></li></ol><p><img src="http://typora.xpp011.cn/typora/img/image-20211019215225929.png" alt="image-20211019215225929"></p><p>每种颜色表示一个跨度（有七个跨度 - 从<strong>A</strong>到<strong>G</strong>）。请考虑以下注意事项：</p><blockquote><p>Trace Id = X<br>Span Id = D<br>Client Sent</p></blockquote><p>此注释表示当前跨度将<strong>Trace Id</strong>设置为<strong>X</strong>并将<strong>Span Id</strong>设置为<strong>D</strong>。此外，从 RPC 的角度来看，<code>Client Sent</code>事件发生了。</p><p>让我们考虑更多注意事项：</p><blockquote><p>Trace Id = X<br>Span Id = A<br>(no custom span)</p><p>Trace Id = X<br>Span Id = C<br>(custom span)</p></blockquote><p>您可以继续使用创建的跨度（带有<code>no custom span</code>指示的示例），也可以手动创建子跨度（带有<code>custom span</code>指示的示例）。</p><p>下图显示了跨度的父子关系：</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211019215515317.png" alt="image-20211019215515317"></p><h4 id="快速开始-2">快速开始</h4><h5 id="前提项目"><strong>前提项目</strong></h5><ul><li><p>Eureka</p></li><li><p>Provider</p><ul><li><p>controller</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sleuth&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SleuthController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(SleuthController.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello sleuth&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/link-api&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">link</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String rsp = restTemplate.getForObject(<span class="string">&quot;http://localhost:8080/sleuth/api&quot;</span>, String.class);</span><br><span class="line">        log.info(rsp);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello sleuth&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/api&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">api</span><span class="params">()</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;调用api&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello api&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>一个注册中心，一个提供接口调用的服务,这两个项目可以参考以上笔记创建</p><h5 id="创建项目-2">创建项目</h5><p>首先我们创建<code>Slieuth</code>项目,引入以下依赖</p><ul><li>web</li><li>openfeign</li><li>eureka</li><li>sleuth</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="发起调用">发起调用</h5><p>我们向<code>Sleuth</code>服务发起请求<a href="http://localhost:2222/link-api">localhost:2222/link-api</a></p><p>我们分别观察<code>Sleuth</code>服务和<code>Provider</code>服务的日志</p><p><strong>Sleuth</strong><br><img src="http://typora.xpp011.cn/typora/img/image-20211020225210766.png" alt="image-20211020225210766"></p><p><strong>Provider</strong></p><p>api接口链式调用,使用restTemple二次调用接口，打印两次</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211020225359060.png" alt="image-20211020225359060"></p><p>可以看到在日志中打印出来的<code>Trace</code>和<code>Span</code>的ID,在发起请求的<code>Sleuth</code>服务中可以看到生成了本次调用的<code>Trace</code>ID，但是并未生成<code>Span</code>ID(Span栏位使用了<code>Trace</code>ID)，而在<code>Provider</code>服务中，可以看到熟悉的<code>Trace</code>ID,但是每一次调用的<code>Span</code>ID不同。</p><p>所以Span组成了Trace，一个Trace记录了本次调用的调用链，可以结合一下这张图片理解。</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211019215225929.png" alt="image-20211019215225929"></p><h4 id="自定义Span">自定义Span</h4><h5 id="创建Span"><strong>创建Span</strong></h5><p>Spring Cloud Sleuth<code>Tracer</code>创建了一个实例。为了使用它，可以自动装配它。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Tracer tracer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/api2&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">api2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;=======&gt;调用api2&quot;</span>);</span><br><span class="line">    Span newSpan=tracer.nextSpan().name(<span class="string">&quot;calculateTax&quot;</span>);</span><br><span class="line">    <span class="comment">//将自定义Span，写入绑定到当前Trace</span></span><br><span class="line">    <span class="keyword">try</span>(Tracer.SpanInScope ws=tracer.withSpan(newSpan.start())) &#123;</span><br><span class="line">        <span class="comment">//标记Span</span></span><br><span class="line">        newSpan.tag(<span class="string">&quot;taxValue&quot;</span>,<span class="string">&quot;tag&quot;</span>);</span><br><span class="line">        <span class="comment">//记录事件</span></span><br><span class="line">        newSpan.event(<span class="string">&quot;createSpan&quot;</span>);</span><br><span class="line">        log.info(newSpan.toString());</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        newSpan.end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello api2&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自此我们就创建好了一个Span，并且我们可以在Span结束之前自定义它。</p><h5 id="连续Span">连续Span</h5><p>有时，您不想创建一个新的跨度，而是想继续一个。这种情况的一个例子可能如下：</p><ul><li><strong>AOP</strong>：如果在达到方面之前已经创建了一个跨度，您可能不想创建一个新的跨度。</li></ul><p>要继续跨度，您可以将跨度存储在一个线程中并将其传递给另一个线程，如下例所示。</p><p>我们只需将想要连续使用的Span，将参数转递给下一个方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 连续使用Span，而不是新创建一个</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> span 上一个span</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">continued</span><span class="params">(Span span)</span></span>&#123;</span><br><span class="line">    span.tag(<span class="string">&quot;taxValue&quot;</span>,<span class="string">&quot;continued&quot;</span>);</span><br><span class="line">    span.event(<span class="string">&quot;连续使用Span&quot;</span>);</span><br><span class="line">    log.info(<span class="string">&quot;连续使用Span&quot;</span>);</span><br><span class="line">    father(span);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建父级Span的子级Span">创建父级Span的子级Span</h5><p>与连续使用 Span相似，我们需要将父级Span作为参数传递下去，</p><p>然后通过<code>Span childSpan = tracer.nextSpan(fatherSpan);</code>得到子级Span</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意每次创建创建一次Span就要将其写入绑定到Trace</span></span><br><span class="line"><span class="comment"> * 为父级Span创建子级Span</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fatherSpan 父级Span</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">father</span><span class="params">(Span fatherSpan)</span></span>&#123;</span><br><span class="line">    Span childSpan = tracer.nextSpan(fatherSpan);</span><br><span class="line">  <span class="comment">//try的语法糖，在()内的对象将自动实现close和finally代码块</span></span><br><span class="line">    <span class="keyword">try</span>(Tracer.SpanInScope ws = tracer.withSpan(childSpan))&#123;</span><br><span class="line">        childSpan.tag(<span class="string">&quot;taxValue&quot;</span>,<span class="string">&quot;father&quot;</span>);</span><br><span class="line">        childSpan.event(<span class="string">&quot;father&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;子级:&quot;</span>+childSpan.toString());</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        childSpan.end();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://typora.xpp011.cn/typora/img/image-20211021225253496.png" alt="image-20211021225253496"></p><p><font color="red">注意:</font></p><ul><li><p>只要我们在代码中创建了Span，就需要将其写入到<code>Trace</code>,</p><blockquote><p>tracer.withSpan(childSpan)</p></blockquote></li><li><p>创建的Span，需要手动关闭,否则该Span将不会报告(无效)</p><blockquote><p>span.end();</p></blockquote></li></ul><h5 id="注解"><strong>注解</strong></h5><p>如果您不想手动创建本地跨度，则可以使用<code>@NewSpan</code>注释。此外，我们提供了<code>@SpanTag</code>以自动化方式添加标签的注释。</p><p>现在我们可以考虑一些使用示例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NewSpan</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>注释不带任何参数的方法会导致创建一个新的跨度，其名称等于注释的方法名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NewSpan(&quot;customNameOnTestMethod4&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMethod4</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>如果您在注释中提供值（直接或通过设置<code>name</code>参数），则创建的跨度将提供的值作为名称。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// method declaration</span></span><br><span class="line"><span class="meta">@NewSpan(name = &quot;customNameOnTestMethod5&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testMethod5</span><span class="params">(<span class="meta">@SpanTag(&quot;testTag&quot;)</span> String param)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// and method execution</span></span><br><span class="line"><span class="keyword">this</span>.testBean.testMethod5(<span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="ZipKin">ZipKin</h3><h4 id="简介-11">简介</h4><p><img src="http://typora.xpp011.cn/typora/img/image-20211021231318886.png" alt="image-20211021231318886"></p><p><a href="https://zipkin.io/">Zipkin</a> 是 Twitter 公司开发贡献的一款开源的分布式实时数据追踪系统（Distributed Tracking System），基于 Google Dapper 的论文设计而来，其主要功能是聚集各个异构系统的实时监控数据。</p><p>它可以收集各个服务器上请求链路的跟踪数据，并通过 Rest API 接口来辅助我们查询跟踪数据，实现对分布式系统的实时监控，及时发现系统中出现的延迟升高问题并找出系统性能瓶颈的根源。除了面向开发的 API 接口之外，它还提供了方便的 UI 组件，每个服务向 Zipkin 报告计时数据，Zipkin 会根据调用关系生成依赖关系图，帮助我们直观的搜索跟踪信息和分析请求链路明细。Zipkin 提供了可插拔数据存储方式：In-Memory、MySql、Cassandra 以及 Elasticsearch。</p><p>分布式跟踪系统还有其他比较成熟的实现，例如：Naver 的 PinPoint、Apache 的 HTrace、阿里的鹰眼 Tracing、京东的 Hydra、新浪的 Watchman，美团点评的 CAT，Apache 的 SkyWalking 等。</p><p><a href="https://mrhelloworld.com/resources/articles/spring/spring-cloud/sleuth/v2-a32471042408c726c7c944456f8e1e34_hd.jpg"><img src="https://mrhelloworld.com/resources/articles/spring/spring-cloud/sleuth/v2-a32471042408c726c7c944456f8e1e34_hd.jpg" alt="/resources/articles/spring/spring-cloud/sleuth/v2-a32471042408c726c7c944456f8e1e34_hd.jpg"></a></p><p></p><h4 id="工作原理">工作原理</h4><p></p><p><a href="https://mrhelloworld.com/resources/articles/spring/spring-cloud/sleuth/zipkin.jpg"><img src="https://mrhelloworld.com/resources/articles/spring/spring-cloud/sleuth/zipkin.jpg" alt="/resources/articles/spring/spring-cloud/sleuth/zipkin.jpg"></a></p><p>共有四个组件构成了 Zipkin：</p><ul><li><code>Collector</code>：收集器组件，处理从外部系统发送过来的跟踪信息，将这些信息转换为 Zipkin 内部处理的 Span 格式，以支持后续的存储、分析、展示等功能。</li><li><code>Storage</code>：存储组件，处理收集器接收到的跟踪信息，默认将信息存储在内存中，可以修改存储策略使用其他存储组件，支持 MySQL，Elasticsearch 等。</li><li><code>Web UI</code>：UI 组件，基于 API 组件实现的上层应用，提供 Web 页面，用来展示 Zipkin 中的调用链和系统依赖关系等。</li><li><code>RESTful API</code>：API 组件，为 Web 界面提供查询存储中数据的接口。</li></ul><p></p><p>Zipkin 分为两端，一个是 Zipkin 服务端，一个是 Zipkin 客户端，客户端也就是微服务的应用，客户端会配置服务端的 URL 地址，一旦发生服务间的调用的时候，会被配置在微服务里面的 Sleuth 的监听器监听，并生成相应的 Trace 和 Span 信息发送给服务端。发送的方式有两种，一种是消息总线的方式如 RabbitMQ 发送，还有一种是 HTTP 报文的方式发送。</p><h4 id="前置准备"><strong>前置准备</strong></h4><p>这里我们使用<code>Elasticsearch </code>作为<code>ZipKin</code>的持久化库,使用<code>RabbitMQ</code>作为客户端和服务端消息传递的方式</p><p>注意:<code>Elasticsearch </code>和其可视化工具<code>Kibana</code>的<font color="red">大版本需要保持一致</font></p><p><strong>Elasticsearch</strong></p><p>dockerhub:<a href="https://registry.hub.docker.com/_/elasticsearch?tab=description">https://registry.hub.docker.com/_/elasticsearch?tab=description</a></p><ul><li>拉取镜像</li></ul><blockquote><p>docker pull elasticsearch:7.14.2</p></blockquote><ul><li>启动服务</li></ul><blockquote><p>docker run -d --name elasticsearch --net ESwork -p 9200:9200 -p 9300:9300 -e “discovery.type=single-node” elasticsearch:7.14.2</p></blockquote><p>访问URL<code>192.168.32.131:9200</code>验证是否启动成功</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211023235811506.png" alt="image-20211023235811506"></p><p><strong>Kibana</strong></p><p>文档:<a href="https://www.elastic.co/guide/cn/kibana/current/index.html">https://www.elastic.co/guide/cn/kibana/current/index.html</a></p><p>dockerhub:<a href="https://registry.hub.docker.com/_/kibana?tab=description">https://registry.hub.docker.com/_/kibana?tab=description</a></p><ul><li>拉取镜像</li></ul><blockquote><p>docker pull kibana:7.14.2</p></blockquote><ul><li>启动服务</li></ul><blockquote><p>docker run -d --name kibana --net ESwork -p 5601:5601 -e ELASTICSEARCH_URL=192.168.32.131:9200 kibana:7.14.2</p></blockquote><ul><li>进入<code>Kibana</code>服务修改配置文件，设置<code>Elasticsearch</code>地址</li></ul><blockquote><p>docker   exec   -it   kibana bash</p><p>vi   /usr/share/kibana/config/kibana.yml</p></blockquote><p>​将红框部分设置为<code>Elasticsearch</code>集群地址</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211023232332840.png" alt="image-20211023232332840"></p><p>接下来我们只需访问<code>http://192.168.32.131:5601</code>，点击左侧菜单的<code>Dev Tools</code>即可查询<code>Elasticsearch</code></p><p><img src="http://typora.xpp011.cn/typora/img/image-20211023232508959.png" alt="image-20211023232508959"></p><p><strong>RabbitMQ</strong></p><ul><li>拉取服务</li></ul><blockquote><p>docker pull rabbitmq:3-management</p></blockquote><ul><li>启动服务</li></ul><blockquote><p>docker run -d --name rabbit -p 5672:5762 -p 15672:15672 rabbitmq:3-management</p></blockquote><h4 id="安装ZipKin">安装ZipKin</h4><p>文档:<a href="https://zipkin.io/">https://zipkin.io/</a></p><p>dockerhub:<a href="https://registry.hub.docker.com/r/openzipkin/zipkin">https://registry.hub.docker.com/r/openzipkin/zipkin</a></p><ul><li>docker获取镜像</li></ul><blockquote><p>docker pull openzipkin/zipkin</p></blockquote><ul><li>启动服务</li></ul><blockquote><p>docker run -d -p 9411:9411 --name zipkin  -e ES_HOSTS=192.168.32.131 -e STORAGE_TYPE=elasticsearch -e ES_HTTP_LOGGING=BASIC -e RABBIT_URI=amqp://xpp011:xpp011@192.168.32.131:5672 openzipkin/zipkin:latest</p><ul><li>ES_HOSTS                            Elasticsearch服务地址</li><li>STORAGE_TYPE                   数据存储方式</li><li>ES_HTTP_LOGGING            日志打印级别</li><li><font color="red">RABBIT_URI</font>                        Rabbit连接地址 (amqp://账号:密码@连接地址)</li></ul></blockquote><p>访问URL<code>http://192.168.32.131:9411/zipkin</code>，验证是否启动成功</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211023235840371.png" alt="image-20211023235840371"></p><h4 id="创建ZipKin客户端">创建ZipKin客户端</h4><p><img src="https://mrhelloworld.com/resources/articles/spring/spring-cloud/sleuth/1569484-20190414155801823-317987095.png" alt="/resources/articles/spring/spring-cloud/sleuth/1569484-20190414155801823-317987095.png"></p><p><strong>引入以下依赖</strong></p><p><img src="http://typora.xpp011.cn/typora/img/image-20211024174147995.png" alt="image-20211024174147995"></p><p><strong>配置以下信息</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sleuth</span>                           <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span>                             <span class="comment">#rabbit端口</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.32</span><span class="number">.131</span>                   <span class="comment">#rabbit地址</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xpp011</span>                       <span class="comment">#用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xpp011</span>                       <span class="comment">#密码</span></span><br><span class="line">  <span class="attr">zipkin:</span></span><br><span class="line">    <span class="attr">sender:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">rabbit</span>                         <span class="comment">#zipkin消息发送类型</span></span><br><span class="line">    <span class="attr">base-url:</span> <span class="string">http://192.168.32.131:9411</span>   <span class="comment">#zipkin地址</span></span><br><span class="line">  <span class="attr">sleuth:</span></span><br><span class="line">    <span class="attr">sampler:</span></span><br><span class="line">      <span class="attr">probability:</span> <span class="number">1.0</span>                     <span class="comment">#数据收集采样率(默认0.1:10%) 过高的采样率会导致zipkin和sleuth过载</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">2222</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:1111/eureka</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span>                <span class="comment">#是否将服务ip显示至注册中心</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>可视化</strong></p><p>配置完成后我们可以启动该服务</p><p>访问zipkin地址<code>http://192.168.32.131:9411/zipkin</code>,即可看到访问信息</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211024225729852.png" alt="image-20211024225729852"></p><p><strong>持久化</strong></p><p>查看Kibana<code>http://192.168.32.131:5601/</code>，根据图片菜单 查看<code>Elasticsearch</code>指标信息</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211024230719477.png" alt="image-20211024230719477"></p><h2 id="十六，Alibbaba">十六，Alibbaba</h2><h3 id="简介-12">简介</h3><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><p>依托 Spring Cloud Alibaba，只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><p></p><h3 id="Spring-Cloud-Alibaba-功能">Spring Cloud Alibaba 功能</h3><p></p><ol><li><strong>服务限流降级 Sentinel</strong>：支持 WebServlet，WebFlux，OpenFeign，RestTemplate，Dubbo，Gateway，Zuul 限流降级功能的接入。可以在运行时通过控制台实时修改限流降级规则，并且还支持限流降级度量指标监控。</li><li><strong>服务注册与发现 Nacos</strong>：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li><li><strong>分布式配置管理 Nacos</strong>：支持分布式系统中的外部化配置，配置更改时自动刷新。</li><li><strong>RPC 服务 Dubbo</strong>：扩展 Spring Cloud 客户端 RestTemplate 和 OpenFeign 以支持调用 Dubbo RPC 服务。</li><li><strong>消息驱动 RocketMQ</strong>：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li><li><strong>分布式事务 Seata</strong>：支持高性能且易于使用的分布式事务解决方案。</li><li><strong>阿里云对象存储 OSS</strong>：大规模，安全，低成本，高度可靠的云存储服务。支持随时随地在任何应用程序中存储和访问任何类型的数据。</li><li><strong>分布式任务调度 SchedulerX</strong>：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li><li><strong>阿里云短信服务 SMS</strong>：覆盖全球的短信服务，友好、高效、智能的通讯能力，帮助企业迅速搭建客户触达通道。</li></ol><p></p><h3 id="Spring-Cloud-Alibaba-组件">Spring Cloud Alibaba 组件</h3><p></p><ul><li><code>Nacos</code>：阿里巴巴开源产品，一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li><li><code>Sentinel</code>：面向分布式服务架构的轻量级流量控制产品，把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</li><li><code>RocketMQ</code>：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</li><li><code>Dubbo</code>：Apache Dubbo™ 是一款高性能 Java RPC 框架。</li><li><code>Seata</code>：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li><li><code>Alibaba Cloud ACM</code>：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。</li><li><code>Alibaba Cloud OSS</code>：阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li><code>Alibaba Cloud SchedulerX</code>：阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</li><li><code>Alibaba Cloud SMS</code>：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ul><p></p><h3 id="什么是注册中心">什么是注册中心</h3><p></p><p>服务注册中心是服务实现服务化管理的核心组件，类似于目录服务的作用，主要用来存储服务信息，譬如提供者 url 串、路由信息等。服务注册中心是微服务架构中最基础的设施之一。</p><p>注册中心可以说是微服务架构中的“通讯录”，它记录了服务和服务地址的映射关系。在分布式架构中，服务会注册到这里，当服务需要调用其它服务时，就到这里找到服务的地址，进行调用。</p><p>简单理解就是：在没有注册中心时候，服务间调用需要知道被当服务调方的具体地址（写死的 ip:port）。更换部署地址，就不得不修改调用当中指定的地址。而有了注册中心之后，每个服务在调用别人的时候只需要知道服务名称（软编码）就好，地址都会通过注册中心根据服务名称获取到具体的服务地址进行调用。</p><p><a href="https://mrhelloworld.com/resources/articles/spring/spring-cloud/nacos/timg.jpg"><img src="https://mrhelloworld.com/resources/articles/spring/spring-cloud/nacos/timg.jpg" alt="/resources/articles/spring/spring-cloud/nacos/timg.jpg"></a></p><p>举个现实生活中的例子，比如说，我们手机中的通讯录的两个使用场景：</p><blockquote><p>当我想给张三打电话时，那我需要在通讯录中按照名字找到张三，然后就可以找到他的手机号拨打电话。—— 服务发现</p><p>李四办了手机号并把手机号告诉了我，我把李四的号码存进通讯录，后续，我就可以从通讯录找到他。—— 服务注册</p><p>通讯录 —— ？什么角色（服务注册中心）</p></blockquote><p>总结：服务注册中心的作用就是<strong>服务的注册</strong>和<strong>服务的发现</strong>。</p><p></p><h4 id="常见的注册中心">常见的注册中心</h4><p></p><ul><li>Netflix Eureka</li><li>Alibaba Nacos</li><li>HashiCorp Consul</li><li>Apache ZooKeeper</li><li>CoreOS Etcd</li><li>CNCF CoreDNS</li></ul><p></p><table><thead><tr><th>特性</th><th>Eureka</th><th>Nacos</th><th>Consul</th><th>Zookeeper</th></tr></thead><tbody><tr><td>CAP</td><td>AP</td><td>CP + AP</td><td>CP</td><td>CP</td></tr><tr><td>健康检查</td><td>Client Beat</td><td>TCP/HTTP/MYSQL/Client Beat</td><td>TCP/HTTP/gRPC/Cmd</td><td>Keep Alive</td></tr><tr><td>雪崩保护</td><td>有</td><td>有</td><td>无</td><td>无</td></tr><tr><td>自动注销实例</td><td>支持</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>访问协议</td><td>HTTP</td><td>HTTP/DNS</td><td>HTTP/DNS</td><td>TCP</td></tr><tr><td>监听支持</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>多数据中心</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>跨注册中心同步</td><td>不支持</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>SpringCloud集成</td><td>支持</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><p></p><h4 id="为什么需要注册中心">为什么需要注册中心</h4><p></p><p>了解了什么是注册中心，那么我们继续谈谈，为什么需要注册中心。在分布式系统中，我们不仅仅是需要在注册中心找到服务和服务地址的映射关系这么简单，我们还需要考虑更多更复杂的问题：</p><ul><li>服务注册后，如何被及时发现</li><li>服务宕机后，如何及时下线</li><li>服务如何有效的水平扩展</li><li>服务发现时，如何进行路由</li><li>服务异常时，如何进行降级</li><li>注册中心如何实现自身的高可用</li></ul><p>这些问题的解决都依赖于注册中心。简单看，注册中心的功能有点类似于 DNS 服务器或者负载均衡器，而实际上，注册中心作为微服务的基础组件，可能要更加复杂，也需要更多的灵活性和时效性。所以我们还需要学习更多 Spring Cloud 微服务组件协同完成应用开发。</p><p></p><p>注册中心解决了以下问题：</p><ul><li>服务管理</li><li>服务之间的自动发现</li><li>服务的依赖关系管理</li></ul><p></p><h3 id="Nacos">Nacos</h3><p>文档:<a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">什么是 Nacos</a></p><h4 id="简介-13">简介</h4><p>Nacos 是 Alibaba 公司推出的开源工具，用于实现分布式系统的服务发现与配置管理。英文全称 Dynamic Naming and Configuration Service，Na 为 Naming/NameServer 即注册中心，co 为 Configuration 即配置中心，Service 是指该注册/配置中心都是以服务为核心。服务（Service）是 Nacos 世界的一等公民。</p><blockquote><p>官网是这样说的：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</p></blockquote><p>Nacos 致力于发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，可以快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><p>Nacos 可以更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构的服务基础设施。</p><p>使用 Nacos 简化服务发现、配置管理、服务治理及管理的解决方案，让微服务的发现、管理、共享、组合更加容易。</p><p>Nacos 官网：<a href="https://nacos.io/zh-cn/">https://nacos.io/zh-cn/</a></p><p>Github：<a href="https://github.com/alibaba/nacos">https://github.com/alibaba/nacos</a></p><h4 id="安装-2">安装</h4><p><strong>docker安装</strong></p><blockquote><p>docker run --name nacos-e MODE=standalone -p 8848:8848 -d nacos/nacos-server:2.0.2</p></blockquote><p><strong>jar</strong></p><p><a href="https://github.com/alibaba/nacos/releases%EF%BC%8C%E5%9C%A8Girhub%E4%B8%AD%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%90%84%E4%B8%AA%E7%8E%AF%E5%A2%83%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%87%E4%BB%B6">https://github.com/alibaba/nacos/releases，在Girhub中可以获取各个环境的安装文件</a></p><p>环境</p><ul><li>JDK1.8+</li><li>Maven2.3+</li></ul><p>windowns将zip解压后，进入<code>bin</code>目录双击<code>startup.cmd</code>文件即可</p><p>访问<code>http://loaclhost:8848/nacos</code>,输入账户和密码(都是<code>nacos</code>)</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211028223900047.png" alt="image-20211028223900047"></p><h5 id="配置中心">配置中心</h5><p>在使用客户端拉取配置之前，我们需要先在<code>nacos</code>创建一个配置</p><p><strong>配置集 ID</strong></p><p>Nacos 中的某个配置集的 ID。配置集 ID 是组织划分配置的维度之一。Data ID 通常用于组织划分系统的配置集。一个系统或者应用可以包含多个配置集，每个配置集都可以被一个有意义的名称标识。Data ID 通常采用类 Java 包（如 com.taobao.tc.refund.log.level）的命名规则保证全局唯一性。此命名规则非强制。</p><p><strong>配置分组</strong></p><p>Nacos 中的一组配置集，是组织配置的维度之一。通过一个有意义的字符串（如 Buy 或 Trade ）对配置集进行分组，从而区分 Data ID 相同的配置集。当您在 Nacos 上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用 DEFAULT_GROUP 。配置分组的常见场景：不同的应用或组件使用了相同的配置类型，如 database_url 配置和 MQ_topic 配置。</p><p>可以看到我们配置了一个名称为<code>example.yaml</code>分组为<code>DEFAULT_GREP</code>的配置文件</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211031175252944.png" alt="image-20211031175252944"></p><h4 id="nacos客户端">nacos客户端</h4><p>我们创建一个Spring项目,引入以下依赖</p><ul><li>spring-cloud-starter-bootstrap</li><li>spring-cloud-starter-alibaba-nacos-config</li><li>spring-boot-starter-web</li></ul><p>以下注释还对SpringCloud项目依赖结果做了说明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--继承spring-boot-starter-parent的依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用继承方式，实现复用，符合继承的都可以被使用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目坐标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--模块名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目版本  SNAPSHOT快照版  RELEASE正式版 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nacos<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Nacos<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        集中定义依赖组件版本号，但不引入，</span></span><br><span class="line"><span class="comment">        在子工程中用到声明的依赖时，可以不加依赖的版本号，</span></span><br><span class="line"><span class="comment">        这样可以统一管理工程中用到的依赖版本</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--JDK版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-cloud版本号 Ilford版--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2020.0.3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--项目依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 项目依赖管理 父项目只是声明依赖，子项目需要写明需要的依赖(可以省略版本信息) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--SpringCloud依赖--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Server端安装启动完成后，我们开始创建客户端,针对<code>nacos</code>进行服务发现和配置拉取</p><h5 id="配置拉取"><strong>配置拉取</strong></h5><p>由于配置信息在配置中心中，启动时需要提取配置信息加载<code>applicat.yml</code>的配置，Spring提供了<code>booystrap.yml</code>引导配置文件</p><p>在<code>bootstrap.yml</code>中我需要提前申明应用名称，以及配置中心地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">example</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.32</span><span class="number">.131</span><span class="string">:8849</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yaml</span></span><br></pre></td></tr></table></figure><p>配置完成后就可以在配置中心拉取配置了</p><p>当然配置中心也支持不同环境<code>$&#123;spring.application.name&#125;-$&#123;profile&#125;.$&#123;file-extension:properties&#125;</code>的配置文件</p><p>我们在配置文件中配置<code>$&#123;spring.profiles.active&#125;</code>即可确认活跃的配置文件是那一项</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211031215829446.png" alt="image-20211031215829446"></p><h5 id="配置中心-2">配置中心</h5><p>nacos的配置中心和注册中心是一起的</p><p>这边我们直接在客户端导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单的配置<code>$&#123;spring.cloud.discovery.server-addr&#125;</code>注册中心地址</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">example</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="comment">#注册中心地址</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.32</span><span class="number">.131</span><span class="string">:8849</span></span><br></pre></td></tr></table></figure><p>查看<code>nacos</code>就可以发现服务已经注册上去了</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211031222347831.png" alt="image-20211031222347831"></p><h3 id="Sentinel">Sentinel</h3><p><a href="https://github.com/alibaba/spring-cloud-alibaba/blob/139b03e652059e88c8bdadc3722cc5c554a348d5/spring-cloud-alibaba-docs/src/main/asciidoc-zh/sentinel.adoc">文档</a></p><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。 <a href="https://github.com/alibaba/Sentinel">Sentinel</a> 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p><a href="https://github.com/alibaba/Sentinel">Sentinel</a> 具有以下特征:</p><ul><li><strong>丰富的应用场景</strong>： Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控</strong>： Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态</strong>： Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li><li><strong>完善的 SPI 扩展点</strong>： Sentinel 提供简单易用、完善的 SPI 扩展点。您可以通过实现扩展点，快速的定制逻辑。例如定制规则管理、适配数据源等。</li></ul><h4 id="控制台">控制台</h4><p>Sentinel 控制台提供一个轻量级的控制台，它提供机器发现、单机资源实时监控、集群资源汇总，以及规则管理的功能。您只需要对应用进行简单的配置，就可以使用这些功能。</p><p>下载地址:<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p>下载完成后我们启动它</p><blockquote><p>java -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-1.8.2.jar</p></blockquote><p>访问<code>192.168.32.131:8080</code></p><p><img src="http://typora.xpp011.cn/typora/img/image-20211031231823009.png" alt="image-20211031231823009"></p><h4 id="客户端">客户端</h4><p>创建客户端连接到<code>Sentinel</code>控制台.</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba.cloud/spring-cloud-starter-alibaba-sentinel --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2021.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<code>Sentinel</code>相关信息</p><ul><li><p><code>spring.cloud.sentinel.transport.port</code></p><blockquote><p>端口配置会在应用对应的机器上启动一个 Http Server，该 Server 会与 Sentinel 控制台做交互。比如 Sentinel 控制台添加了1个限流规则，会把规则数据 push 给这个 Http Server 接收，Http Server 再将规则注册到 Sentinel 中。</p></blockquote></li><li><p><code>spring.cloud.sentinel.transport.dashboard</code></p><blockquote><p>控制台地址</p></blockquote></li><li><p><code>spring.cloud.sentinel.log.dir</code></p><blockquote><p>日志输出地址</p></blockquote></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">#会在该端口创建一个HTTP Server来保持与Sentinel通信</span></span><br><span class="line">        <span class="comment">#比如Sentinel的限流规则，该服务健康信息</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8719</span></span><br><span class="line">        <span class="comment">#Sentinel控制台地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="number">192.168</span><span class="number">.32</span><span class="number">.131</span><span class="string">:8080</span></span><br><span class="line">      <span class="attr">log:</span></span><br><span class="line">        <span class="comment">#日志输出地址</span></span><br><span class="line">        <span class="attr">dir:</span> <span class="string">D:\log\sentinel</span></span><br></pre></td></tr></table></figure><p>创建测试的Controller</p><ul><li><p><code>@SentinelResource</code></p><blockquote><p>@SentinelResource 注解用来标识资源是否被限流、降级。上述例子上该注解的属性 ‘hello’ 表示资源名。</p><p>@SentinelResource 还提供了其它额外的属性如 <code>blockHandler</code>，<code>blockHandlerClass</code>，<code>fallback</code> 用于表示限流或降级的操作，更多内容可以参考 <a href="https://github.com/alibaba/Sentinel/wiki/%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81">Sentinel注解支持</a>。</p></blockquote></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="comment">//@SentinelResource 注解用来标识资源是否被限流、降级。上述例子上该注解的属性 &#x27;hello&#x27; 表示资源名。</span></span><br><span class="line">    <span class="meta">@SentinelResource(&quot;hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们的客户端就创建好了</p><p>注意当我们启动服务后，在控制台没有看到该服务，可以尝试请求一下服务接口，激活一下</p><h4 id="控制台创建规则">控制台创建规则</h4><p>在簇点链路菜单下可以针对某一资源创建<code>限流</code>、<code>熔断策略</code>、<code>热点</code>、<code>授权</code>等操作</p><p><img src="http://typora.xpp011.cn/typora/img/image-20211101211125724.png" alt="image-20211101211125724"></p><p>创建<code>限流规则</code></p><p><img src="http://typora.xpp011.cn/typora/img/image-20211101210710702.png" alt="image-20211101210710702"></p><p><strong>测试</strong></p><p>我们连续接口<code>hello</code>15次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">        String rsp = restTemplate.getForObject(<span class="string">&quot;http://localhost:8080/hello&quot;</span>, String.class);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date()+rsp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://typora.xpp011.cn/typora/img/image-20211101211632460.png" alt="image-20211101211632460"></p><p>可以看到控制台是每一秒打印两次，也就是接口每一秒受理两次请求</p>]]></content>
      
      
      <categories>
          
          <category> SpringCloud </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
